"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const resolve = require("resolve");
const shelljs_1 = require("shelljs");
const GoogleAnalytics_1 = require("../GoogleAnalytics");
const Util_1 = require("../Util");
const ProjectConfig_1 = require("./../ProjectConfig");
const build_1 = require("./build");
let command;
// tslint:disable:object-literal-sort-keys
command = {
    command: "start",
    desc: "starts the project",
    templateManager: null,
    builder: {
        port: {
            alias: "p",
            describe: "serve app port",
            type: "number"
        }
    },
    execute(argv) {
        return __awaiter(this, void 0, void 0, function* () {
            GoogleAnalytics_1.GoogleAnalytics.post({
                t: "screenview",
                cd: "Start"
            });
            command.start(argv);
        });
    },
    start(argv) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!ProjectConfig_1.ProjectConfig.hasLocalConfig()) {
                Util_1.Util.error("Start command is supported only on existing project created with igniteui-cli", "red");
                return;
            }
            //build
            yield build_1.default.build({});
            const config = ProjectConfig_1.ProjectConfig.getConfig();
            const framework = config.project.framework;
            const projectType = config.project.projectType;
            const defaultPort = config.project.defaultPort;
            Util_1.Util.log(`Starting project.`, "green");
            GoogleAnalytics_1.GoogleAnalytics.post({
                t: "event",
                ec: "$ig start",
                cd1: framework,
                cd2: projectType,
                cd11: !!config.skipGit,
                cd14: config.project.theme
            });
            let port = Number(argv.port) || defaultPort;
            switch (framework.toLowerCase()) {
                case "jquery":
                    // browser-sync installed per project
                    const bs = require(resolve.sync("browser-sync", { basedir: process.cwd() }));
                    const browserSync = bs.create("igniteui-cli");
                    const filePath = path.join(process.cwd(), "bs-config.js");
                    const bsConfig = require(filePath);
                    if (port) {
                        bsConfig.port = port;
                    }
                    browserSync.init(bsConfig);
                    break;
                case "react":
                    if (projectType === "igr-es6" && port) {
                        // https://facebook.github.io/create-react-app/docs/advanced-configuration
                        process.env.PORT = `${port}`;
                        port = null;
                    }
                /* falls through */
                case "angular":
                    if (port) {
                        shelljs_1.exec(`npm start -- --port=` + port);
                    }
                    else {
                        shelljs_1.exec(`npm start`);
                    }
                    break;
                default:
                    break;
            }
        });
    }
};
exports.default = command;
