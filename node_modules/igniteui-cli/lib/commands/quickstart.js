"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const resolve = require("resolve");
const GoogleAnalytics_1 = require("../GoogleAnalytics");
const Util_1 = require("../Util");
// TODO: remove. exec blocks main stdio!
const shell = require("shelljs");
// tslint:disable:object-literal-sort-keys
const command = {
    command: "quickstart",
    desc: "creates rich feature grid",
    builder: {
        framework: {
            alias: "f",
            default: "jquery",
            describe: "Framework to setup quickstart for",
            type: "string",
            choices: ["jquery", "react", "angular"]
        }
    },
    execute(argv) {
        return __awaiter(this, void 0, void 0, function* () {
            GoogleAnalytics_1.GoogleAnalytics.post({
                t: "screenview",
                cd: "Quick Start"
            });
            Util_1.Util.log("Quick Start!");
            const framework = argv.framework;
            let name = "";
            let type = "";
            switch (framework) {
                case "jquery":
                    name = "jquery-quickstart";
                    type = "js";
                    break;
                case "react":
                    name = "react-quickstart";
                    type = "es6";
                    break;
                case "angular":
                    name = "angular-quickstart";
                    type = "ig-ts";
                    break;
                default:
                    Util_1.Util.error("The framework is not supported!", "red");
                    return;
            }
            const outDir = path.join(process.cwd(), name);
            if (Util_1.Util.directoryExists(path.join(__dirname, "../../templates/quickstart", argv.framework))) {
                yield Util_1.Util.processTemplates(path.join(__dirname, "../../templates/quickstart", argv.framework), outDir, {}, {});
            }
            //change folder
            process.chdir(name);
            GoogleAnalytics_1.GoogleAnalytics.post({
                t: "event",
                ec: "$ig quickstart",
                ea: `framework: ${argv.framework}`,
                cd1: framework,
                cd2: type,
                cd3: name
            });
            if (argv.framework === "react") {
                Util_1.Util.log("react-quickstart loaded");
                shell.exec("npm install");
                shell.exec("npm run webpack");
                // lite-server installed per project
                const liteServer = require(resolve.sync("lite-server", { basedir: process.cwd() }));
                liteServer.server();
            }
            if (argv.framework === "angular") {
                Util_1.Util.log("angular-quickstart loaded");
                shell.exec("npm install");
                shell.exec("npm start");
            }
            if (argv.framework === "jquery") {
                Util_1.Util.log("jquery-quickstart loaded");
                shell.exec("npm install");
                // lite-server installed per project
                const liteServer = require(resolve.sync("lite-server", { basedir: process.cwd() }));
                liteServer.server();
            }
        });
    }
};
exports.default = command;
