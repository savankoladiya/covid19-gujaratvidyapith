"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const GoogleAnalytics_1 = require("../GoogleAnalytics");
const Util_1 = require("../Util");
const PackageManager_1 = require("./../packages/PackageManager");
const ProjectConfig_1 = require("./../ProjectConfig");
let command;
command = {
    command: "build",
    desc: "builds the project",
    builder: {},
    templateManager: null,
    execute(argv) {
        return __awaiter(this, void 0, void 0, function* () {
            GoogleAnalytics_1.GoogleAnalytics.post({
                t: "screenview",
                cd: "Build"
            });
            command.build(argv);
        });
    },
    build(argv) {
        return __awaiter(this, void 0, void 0, function* () {
            Util_1.Util.log("Build started.");
            PackageManager_1.PackageManager.ensureIgniteUISource(true, command.templateManager);
            if (!ProjectConfig_1.ProjectConfig.hasLocalConfig()) {
                Util_1.Util.error("Add command is supported only on existing project created with igniteui-cli", "red");
                return;
            }
            const config = ProjectConfig_1.ProjectConfig.getConfig();
            GoogleAnalytics_1.GoogleAnalytics.post({
                t: "event",
                ec: "$ig build",
                cd1: config.project.framework,
                cd2: config.project.projectType,
                cd11: !!config.skipGit,
                cd14: config.project.theme
            });
            yield PackageManager_1.PackageManager.installPackages();
            if (config.project.theme.includes(".less") || config.project.theme.includes(".sass")) {
                fs.mkdirSync("./themes");
                const source = path.join(config.project.igniteuiSource, "/css/themes/", config.project.theme.split(".")[0]);
                const destination = path.join(config.project.sourceRoot, "themes");
                fs.copySync(source, destination, { recursive: true });
            }
        });
    }
};
exports.default = command;
