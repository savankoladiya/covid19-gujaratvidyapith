"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const GoogleAnalytics_1 = require("../GoogleAnalytics");
const ProjectConfig_1 = require("../ProjectConfig");
const Util_1 = require("../Util");
const PackageManager_1 = require("./../packages/PackageManager");
const PromptSession_1 = require("./../PromptSession");
let command;
// tslint:disable:object-literal-sort-keys
command = {
    command: "add [template] [name]",
    desc: "adds template by its ID",
    templateManager: null,
    builder: {
        "template": {
            alias: "t",
            description: `Template ID, such as "grid", "combo", etc.`,
            type: "string",
            global: true
        },
        "name": {
            alias: "n",
            description: "File name.",
            type: "string",
            global: true
        },
        "module": {
            alias: "m",
            description: "The module to which the template is to be added",
            type: "string",
            global: true
        },
        "skip-route": {
            alias: "skr",
            describe: "Don't auto-generate am app navigation route for the new component",
            type: "boolean",
            global: true
        }
    },
    check: argv => {
        if ((!argv.name && argv.template) || (argv.name && !argv.template)) {
            return false;
        }
        return true;
    },
    execute(argv) {
        return __awaiter(this, void 0, void 0, function* () {
            GoogleAnalytics_1.GoogleAnalytics.post({
                t: "screenview",
                cd: "Add"
            });
            if (!ProjectConfig_1.ProjectConfig.hasLocalConfig()) {
                Util_1.Util.error("Add command is supported only on existing project created with igniteui-cli", "red");
                return;
            }
            const config = ProjectConfig_1.ProjectConfig.getConfig();
            if (config.project.isShowcase) {
                Util_1.Util.error("Showcases and quickstart projects don't support the add command", "red");
                return;
            }
            const framework = command.templateManager.getFrameworkById(config.project.framework);
            if (!framework) {
                Util_1.Util.error("Framework not supported", "red");
                return;
            }
            const frameworkLibrary = command.templateManager.getProjectLibrary(config.project.framework, config.project.projectType);
            if (!argv.template && !argv.name) {
                const prompts = new PromptSession_1.PromptSession(command.templateManager);
                yield prompts.chooseActionLoop(frameworkLibrary, config.project.theme);
                return;
            }
            if (!frameworkLibrary.hasTemplate(argv.template)) {
                Util_1.Util.error("Template doesn't exist in the current library", "red");
                return;
            }
            const selectedTemplate = frameworkLibrary.getTemplateById(argv.template);
            if (selectedTemplate) {
                GoogleAnalytics_1.GoogleAnalytics.post({
                    t: "event",
                    ec: "$ig add",
                    ea: `template id: ${argv.template}; file name: ${argv.name}`,
                    cd1: selectedTemplate.framework,
                    cd2: selectedTemplate.projectType,
                    cd5: selectedTemplate.controlGroup,
                    cd7: selectedTemplate.id,
                    cd8: selectedTemplate.name,
                    cd11: !!config.skipGit,
                    cd14: config.project.theme
                });
                yield command.addTemplate(argv.name, selectedTemplate, {
                    modulePath: argv.module,
                    skipRoute: argv.skipRoute
                });
                yield PackageManager_1.PackageManager.flushQueue(true);
                PackageManager_1.PackageManager.ensureIgniteUISource(config.packagesInstalled, command.templateManager);
            }
        });
    },
    addTemplate(fileName, template, options) {
        return __awaiter(this, void 0, void 0, function* () {
            fileName = fileName.trim();
            const name = Util_1.Util.nameFromPath(fileName);
            // letter+alphanumeric check
            if (!Util_1.Util.isAlphanumericExt(name)) {
                Util_1.Util.error(`Name '${name}' is not valid. `
                    + "Names should start with a letter and can also contain numbers, dashes and spaces.", "red");
                return false;
            }
            if (yield template.generateFiles(process.cwd(), fileName, options || {})) {
                //successful
                template.registerInProject(process.cwd(), fileName, options || {});
                command.templateManager.updateProjectConfiguration(template);
                template.packages.forEach(x => PackageManager_1.PackageManager.queuePackage(x));
                Util_1.Util.log(`${Util_1.Util.greenCheck()} View '${name}' added.`);
                return true;
            }
            else {
                /* Log error? */
                return false;
            }
        });
    }
};
// hint transpiler it's an ES6 module, exports without import won't do
exports.default = command;
