declare class Util {
    static getCurrentDirectoryBase(): string;
    static directoryExists(filePath: any): boolean;
    static fileExists(filePath: any): boolean;
    static isDirectory(dirPath: any): boolean;
    static isFile(filePath: any): boolean;
    static getDirectoryNames(rootPath: string): string[];
    static processTemplates(sourcePath: string, destinationPath: string, configuration: {
        [key: string]: string;
    }, pathsConfiguration: {
        [key: string]: string;
    }): Promise<boolean>;
    static validateTemplate(sourcePath: string, destinationPath: string, configuration: {
        [key: string]: string;
    }, pathsConfiguration: {
        [key: string]: string;
    }): boolean;
    static applyConfigTransformation: (data: string, configuration: {
        [key: string]: string;
    }) => string;
    static escapeRegExp(str: any): string;
    /**
     * Simple log with optional color.
     * @param message Text to log
     * @param colorKeyword Optional color (CSS keyword like red, green, etc.)
     */
    static log(message: string, colorKeyword?: string): void;
    /**
     * Error log with optional color.
     * @param message Error to log
     * @param colorKeyword Optional color (CSS keyword like red, green, etc.)
     */
    static error(message: string, colorKeyword?: string): void;
    /**
     * Log a warning with optional color.
     * @param message warn to log
     * @param colorKeyword Optional color (CSS keyword like red, green, etc.)
     */
    static warn(message: string, colorKeyword?: string): void;
    static greenCheck(): string;
    static version(): string;
    static showVersion(): void;
    static getOSFriendlyName(platform: string): string;
    /**
     * lower-dashed string
     */
    static lowerDashed(text: string): string;
    /**
     * Checks if a giver string consists of alphanumeric characters, dashes and spaces only
     * and also starts with a letter.
     * @param name Text to check
     */
    static isAlphanumericExt(name: string): boolean;
    /**
     * Separate provided name to words on each space and/or dash and capitalize first letter of each
     * resulting word.
     * @param name Text to convert to proper class name
     */
    static className(name: string): string;
    /**
     * Simple object merge - deep nested objects and arrays (of primitive values only)
     * @param target Object to merge values into
     * @param source Object to merge values from
     */
    static merge(target: any, source: any): any;
    /**
     * Execute synchronous command with options
     * @param command Command to be executed
     * @param options Command options
     * @throws {Error} On timeout or non-zero exit code. Error has 'status', 'signal', 'output', 'stdout', 'stderr'
     */
    static exec(command: string, options?: any): string;
    /**
     * Initialize git for a project, located in the provided directory and commit it.
     * @param parentRoot Parent directory root of the project.
     * @param projectName Project name.
     */
    static gitInit(parentRoot: any, projectName: any): void;
    /**
     * Truncating text to fit console viewPort and appending specified truncate characters at the end
     * to indicate text is truncated.
     * @param text Text to be used.
     * @param limit max viewPort.
     * @param truncateCount How many characters to be replaced at the text end with a specified truncateChar.
     * @param truncateChar Char to use for truncated text.
     */
    static truncate(text: string, limit: number, count?: number, truncateChar?: string): string;
    /**
     * to indicate text is truncated.
     * @param text Text to be used.
     * @param startIndex Apply color from this index on.
     */
    static addColor(text: string, startIndex: number): string;
    static incrementName(name: string, baseLength: number): string;
    static getAvailableName(defaultName: string, isApp: boolean, framework?: string, projectType?: string): string;
    /**
     * Creates all folders in a given absolute path. Starts from cwd
     * @param targetDir Absolute path to folder to create
     * @throws Throws on `EACCES`, `EISDIR`
     */
    static createDirectory(targetDir: string): void;
    /**
     * Extracts the name (last part) from a path and trims.
     * @param fileName Path-like name, e.g. /path/to/my component
     */
    static nameFromPath(fileName: string): string;
    static camelCase(str: string): string;
    private static propertyByPath;
}
export { Util };
