"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const ProjectConfig_1 = require("../ProjectConfig");
const Util_1 = require("../Util");
/**
 * Template with specific implementation for jQuery projects
 */
// tslint:disable-next-line:class-name
class jQueryTemplate {
    /**
     *
     */
    constructor(rootPath) {
        this.rootPath = rootPath;
        this.framework = "jquery";
        this.packages = [];
        this.configFile = "ignite-cli-views.js";
        this.replacePattern = /\[[\s\S]*\](?=;)/;
        this.listInComponentTemplates = false;
        this.listInCustomTemplates = false;
        this.hasExtraConfiguration = false;
    }
    generateFiles(projectPath, name, options) {
        let config = {};
        if (options["extraConfig"]) {
            config = options["extraConfig"];
        }
        // view goes in its own folder based on the name
        const outputPath = path.join(projectPath, this.folderName(name));
        const pathsConfig = {};
        const projectConfig = ProjectConfig_1.ProjectConfig.getConfig();
        if (projectConfig != null) {
            pathsConfig["$(igniteuiSource)"] = projectConfig.project.igniteuiSource;
            pathsConfig["$(themePath)"] = projectConfig.project.themePath;
        }
        config["$(name)"] = Util_1.Util.nameFromPath(name);
        config["$(cssBlock)"] = this.getCssTags();
        config["$(scriptBlock)"] = this.getScriptTags();
        config["$(description)"] = this.description;
        config["$(theme)"] = projectConfig.project.theme;
        config["$(cliVersion)"] = Util_1.Util.version();
        // generate scripts/imports based on framework - per template
        if (!Util_1.Util.validateTemplate(path.join(this.rootPath, "files"), outputPath, config, pathsConfig)) {
            return Promise.resolve(false);
        }
        return Util_1.Util.processTemplates(path.join(this.rootPath, "files"), outputPath, config, pathsConfig);
    }
    /**
     * Add a view to the project config to be listed in index page
     * @param projectPath
     * @param name The name of the view
     */
    registerInProject(projectPath, name, options) {
        if (options && options.skipRoute) {
            return;
        }
        let configFile = fs.readFileSync(path.join(projectPath, this.configFile), "utf8");
        const viewsArr = JSON.parse(this.replacePattern.exec(configFile)[0]);
        viewsArr.push({ name: Util_1.Util.nameFromPath(name), path: this.getViewLink(name) });
        configFile = configFile.replace(this.replacePattern, JSON.stringify(viewsArr, null, 4));
        fs.writeFileSync(path.join(projectPath, this.configFile), configFile);
    }
    getExtraConfiguration() {
        return [];
    }
    setExtraConfiguration(extraConfigKeys) { }
    //ms index
    getJqueryDependenciesScriptTag() {
        let builder = "<!-- Ignite UI required script references -->\n";
        // builder += "<script src=\"http://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js\"></script>\n";
        builder += "<script src=\"http://code.jquery.com/jquery-1.11.3.min.js\"></script>\n";
        builder += "<script src=\"http://code.jquery.com/ui/1.11.1/jquery-ui.min.js\"></script>\n";
        return builder;
    }
    getScriptTags() {
        const config = require("../packages/components");
        let builder = "";
        builder += this.getJqueryDependenciesScriptTag();
        builder += "\n\n";
        builder += "<!-- Ignite UI Required Combined JavaScript Files -->\n";
        //builder += "<script src=\"$(igniteuiSource)\\js\\infragistics.core.js\"></script>\n";
        //builder += "<script src=\"$(igniteuiSource)\\js\\infragistics.lob.js\"></script>\n";
        builder += "<script src=\"/ignite-ui/js/infragistics.core.js\"></script>\n";
        builder += "<script src=\"/ignite-ui/js/infragistics.lob.js\"></script>\n";
        // temporary:
        if (this.dependencies.filter(x => config.dv.indexOf(x) !== -1).length) {
            builder += "\n";
            //builder += "<script src=\"$(igniteuiSource)\\js\\infragistics.lob.js\"></script>\n";
            builder += "<script src=\"/ignite-ui/js/infragistics.dv.js\"></script>\n";
        }
        if (this.dependencies.indexOf("igExcel") !== -1) {
            builder += "<script src=\"/ignite-ui/js/infragistics.excel-bundled.js\"></script>\n";
        }
        if (this.dependencies.indexOf("igGridExcelExporter") !== -1) {
            builder += "<script src=\"/ignite-ui/js/modules/infragistics.gridexcelexporter.js\"></script>\n";
        }
        builder += this.getNavigationScript();
        return builder;
    }
    getNavigationScript() {
        let builder = "";
        builder += "<script src=\"/ignite-cli-views.js\"></script>";
        builder += "<script src=\"/assets/navigation.js\"></script>";
        return builder;
    }
    getCssTags() {
        let builder = "";
        builder += "<!-- Ignite UI Required Combined CSS Files -->\n";
        builder += "<link href=\"/ignite-ui/css/themes/infragistics/infragistics.theme.css\" rel=\"stylesheet\" />\n";
        builder += "<link href=\"/ignite-ui/css/structure/infragistics.css\" rel=\"stylesheet\" />\n";
        //builder += "<link href=\"$(themePath)\" rel=\"stylesheet\" />\n";
        //builder += "<link href=\"$(igniteuiSource)\\css\\structure\\infragistics.css\" rel=\"stylesheet\" />\n"
        builder += "<link href=\"/assets/app.css\" rel=\"stylesheet\" />\n";
        return builder;
    }
    //getViewPath
    folderName(pathName) {
        let folderName = pathName;
        const parts = path.parse(pathName);
        if (parts.dir) {
            folderName = path.join(parts.dir, parts.name);
            folderName = folderName.replace(/\\/g, "/");
            const fullPath = path.join(process.cwd(), folderName);
            // path.join will also resolve any '..' segments
            // if it doesn't start with CWD it's out of project root
            if (!fullPath.startsWith(process.cwd())) {
                Util_1.Util.error(`Path ${folderName} is not valid!`, "red");
                process.exit(1);
            }
            //clean up potential leading spaces in folder names (`path/    name`):
            folderName = folderName.replace(/\/\s+/g, "/");
        }
        return Util_1.Util.lowerDashed(folderName);
    }
    getViewLink(pathName) {
        const linkPath = this.folderName(pathName) + "/index.html";
        return linkPath;
    }
}
exports.jQueryTemplate = jQueryTemplate;
