"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const ProjectConfig_1 = require("../ProjectConfig");
const Util_1 = require("../Util");
class AngularTemplate {
    /**
     * Creates a new AngularTemplate for a root path (pass in __dirname)
     */
    constructor(rootPath) {
        this.rootPath = rootPath;
        this.listInComponentTemplates = true;
        this.listInCustomTemplates = false;
        this.dependencies = [];
        this.framework = "angular";
        this.hasExtraConfiguration = false;
        this.packages = [];
    }
    generateFiles(projectPath, name, options) {
        if (options["modulePath"] && !Util_1.Util.fileExists(path.join(process.cwd(), `src\\app`, options["modulePath"]))) {
            Util_1.Util.error(`Wrong module path provided: ${options["modulePath"]}. No components were added!`);
            return Promise.resolve(false);
        }
        const config = Object.assign({}, options["extraConfig"], this.getBaseVariables(name));
        const pathsConfig = {};
        if (!Util_1.Util.validateTemplate(path.join(this.rootPath, "files"), projectPath, config, pathsConfig)) {
            return Promise.resolve(false);
        }
        return Util_1.Util.processTemplates(path.join(this.rootPath, "files"), projectPath, config, pathsConfig);
    }
    registerInProject(projectPath, name, options) {
        let modulePath = "app.module.ts";
        if (options && options.modulePath) {
            modulePath = options.modulePath;
        }
        // D.P. Don't use the top-level import as that chains import of typescript
        // which slows down execution of the entire component noticeably (template loading)
        // https://www.typescriptlang.org/docs/handbook/modules.html#dynamic-module-loading-in-nodejs
        // tslint:disable-next-line:variable-name
        const TsUpdate = require("./../project-utility/TypeScriptFileUpdate").TypeScriptFileUpdate;
        if (!(options && options.skipRoute)) {
            //1) import the component class name,
            //2) and populate the Routes array with the path and component
            //for example: { path: 'combo', component: ComboComponent }
            const routingModule = new TsUpdate(path.join(projectPath, "src/app/app-routing.module.ts"));
            routingModule.addRoute(path.join(projectPath, `src/app/components/${this.folderName(name)}/${this.fileName(name)}.component.ts`), this.folderName(name), //path
            Util_1.Util.nameFromPath(name) //text
            );
        }
        //3) add an import of the component class from its file location.
        //4) populate the declarations portion of the @NgModule with the component class name.
        const mainModule = new TsUpdate(path.join(projectPath, `src/app/${modulePath}`));
        mainModule.addDeclaration(path.join(projectPath, `src/app/components/${this.folderName(name)}/${this.fileName(name)}.component.ts`), modulePath !== "app.module.ts");
        mainModule.finalize();
        // make sure DV file is added to project if needed:
        this.ensureSourceFiles();
    }
    getExtraConfiguration() {
        return [];
    }
    setExtraConfiguration(extraConfigKeys) { }
    getBaseVariables(name) {
        const config = {};
        config["$(name)"] = Util_1.Util.nameFromPath(name);
        config["$(ClassName)"] = Util_1.Util.className(Util_1.Util.nameFromPath(name));
        config["__name__"] = this.fileName(name);
        config["__path__"] = this.folderName(name);
        config["$(filePrefix)"] = this.fileName(name);
        config["$(description)"] = this.description;
        config["$(cliVersion)"] = Util_1.Util.version();
        config["$(camelCaseName)"] = Util_1.Util.camelCase(name);
        if (this.widget) {
            config["$(widget)"] = this.widget;
        }
        if (this.name) {
            config["$(nameMerged)"] = this.name.replace(/ /g, "");
        }
        return config;
    }
    ensureSourceFiles() {
        const components = require("../packages/components");
        const config = ProjectConfig_1.ProjectConfig.getConfig();
        const files = config.project.sourceFiles;
        const dvDependencies = this.dependencies.filter(x => components.dv.indexOf(x) !== -1);
        if (dvDependencies.length && files.indexOf("infragistics.dv.js") === -1) {
            files.push("infragistics.dv.js");
            ProjectConfig_1.ProjectConfig.setConfig(config);
        }
        if (this.dependencies.indexOf("igExcel") !== -1 && files.indexOf("infragistics.excel-bundled.js") === -1) {
            files.push("infragistics.excel-bundled.js");
            ProjectConfig_1.ProjectConfig.setConfig(config);
        }
        if (this.dependencies.indexOf("igGridExcelExporter") !== -1
            && files.indexOf("modules/infragistics.gridexcelexporter.js") === -1) {
            files.push("modules/infragistics.gridexcelexporter.js");
            ProjectConfig_1.ProjectConfig.setConfig(config);
        }
    }
    folderName(pathName) {
        //TODO: should remove the spaces
        const parts = path.parse(pathName);
        let folderName = pathName;
        if (parts.dir) {
            folderName = path.join(parts.dir, parts.name);
            folderName = folderName.replace(/\\/g, "/");
            // TODO: config-based "src/app"?
            const relative = path.join(process.cwd(), "src/app", folderName);
            // path.join will also resolve any '..' segments
            // so if relative result doesn't start with CWD it's out of project root
            if (!relative.startsWith(process.cwd())) {
                Util_1.Util.error(`Path ${"src/app/" + folderName} is not valid!`, "red");
                process.exit(1);
            }
            //clean up potential leading spaces in folder names (`path/    name`):
            folderName = folderName.replace(/\/\s+/g, "/");
        }
        return Util_1.Util.lowerDashed(folderName);
    }
    fileName(pathName) {
        const name = Util_1.Util.nameFromPath(pathName);
        return Util_1.Util.lowerDashed(name);
    }
}
exports.AngularTemplate = AngularTemplate;
