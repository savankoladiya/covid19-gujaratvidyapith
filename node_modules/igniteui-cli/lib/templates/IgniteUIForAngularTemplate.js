"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const TypeScriptUtils_1 = require("../project-utility/TypeScriptUtils");
const Util_1 = require("../Util");
const AngularTemplate_1 = require("./AngularTemplate");
class IgniteUIForAngularTemplate extends AngularTemplate_1.AngularTemplate {
    constructor(rootPath) {
        super(rootPath);
        this.dependencies = [];
    }
    //TODO: rename name to fullName for clarity + in all other places fileName to fullName
    registerInProject(projectPath, name, options) {
        let modulePath = "app.module.ts";
        if (options && options.modulePath) {
            modulePath = options.modulePath;
        }
        const stringDeps = this.dependencies.filter(x => typeof x === "string");
        if (stringDeps.length) {
            /** @deprecate */
            Util_1.Util.warn("String dependencies are deprecated, use object descriptions.", "yellow");
            this.dependencies = this.dependencies.map(x => {
                if (typeof x === "string") {
                    return { import: x, from: "igniteui-angular/main" };
                }
                return x;
            });
        }
        // D.P. Don't use the top-level import as that chains import of typescript
        // which slows down execution of the entire component noticeably (template loading)
        // https://www.typescriptlang.org/docs/handbook/modules.html#dynamic-module-loading-in-nodejs
        // tslint:disable-next-line:variable-name
        const TsUpdate = require("./../project-utility/TypeScriptFileUpdate").TypeScriptFileUpdate;
        if (!(options && options.skipRoute) && Util_1.Util.fileExists("src/app/app-routing.module.ts")) {
            //1) import the component class name,
            //2) and populate the Routes array with the path and component
            //for example: { path: 'combo', component: ComboComponent }
            const routingModule = new TsUpdate(path.join(projectPath, "src/app/app-routing.module.ts"));
            routingModule.addRoute(path.join(projectPath, `src/app/${this.folderName(name)}/${this.fileName(name)}.component.ts`), this.fileName(name), //path
            Util_1.Util.nameFromPath(name) //text
            );
        }
        //3) add an import of the component class from its file location.
        //4) populate the declarations portion of the @NgModule with the component class name.
        const mainModulePath = path.join(projectPath, `src/app/${modulePath}`);
        const mainModule = new TsUpdate(mainModulePath);
        mainModule.addDeclaration(path.join(projectPath, `src/app/${this.folderName(name)}/${this.fileName(name)}.component.ts`), modulePath !== "app.module.ts");
        // import IgxModules and other dependencies
        for (const dep of this.dependencies) {
            if (dep.from && dep.from.startsWith(".")) {
                // relative file dependency
                const copy = Object.assign({}, dep);
                copy.from = TypeScriptUtils_1.TypeScriptUtils.relativePath(mainModulePath, path.join(projectPath, copy.from), true, true);
                mainModule.addNgModuleMeta(copy, this.getBaseVariables(name));
            }
            else {
                mainModule.addNgModuleMeta(dep, this.getBaseVariables(name));
            }
        }
        mainModule.finalize();
        // make sure DV file is added to project if needed:
        this.ensureSourceFiles();
    }
}
exports.IgniteUIForAngularTemplate = IgniteUIForAngularTemplate;
