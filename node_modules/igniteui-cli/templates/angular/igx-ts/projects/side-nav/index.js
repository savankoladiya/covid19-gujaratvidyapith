"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Util_1 = require("../../../../../lib/Util");
const _base_1 = require("../_base");
class SideNavProject extends _base_1.BaseIgxProject {
    constructor() {
        super(...arguments);
        this.id = "side-nav";
        this.name = "Default side navigation";
        this.description = "Project structure with side navigation drawer";
        this.dependencies = [];
        this.framework = "angular";
        this.projectType = "igx-ts";
        this.hasExtraConfiguration = false;
    }
    generateFiles(outputPath, name, theme, ...options) {
        const _super = Object.create(null, {
            generateFiles: { get: () => super.generateFiles }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const config = {
                "$(cliVersion)": Util_1.Util.version(),
                "$(CustomTheme)": "",
                "$(dash-name)": Util_1.Util.lowerDashed(name),
                "$(DefaultTheme)": "",
                "$(name)": name,
                "$(projectTemplate)": this.id,
                "$(theme)": theme,
                "__path__": name
            };
            const pathsConfig = {};
            if (!(yield _super.generateFiles.call(this, outputPath, name, theme, ...options))) {
                return false;
            }
            return Util_1.Util.processTemplates(path.join(__dirname, "./files"), path.join(outputPath, name), config, pathsConfig);
        });
    }
}
exports.SideNavProject = SideNavProject;
exports.default = new SideNavProject();
