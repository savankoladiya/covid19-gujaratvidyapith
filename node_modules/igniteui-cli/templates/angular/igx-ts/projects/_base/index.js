"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Util_1 = require("../../../../../lib/Util");
class BaseIgxProject {
    constructor() {
        this.id = "base";
        this.name = "base";
        this.description = "Empty project layout structure for Ignite UI for Angular";
        this.dependencies = [];
        this.framework = "angular";
        this.projectType = "igx-ts";
        this.hasExtraConfiguration = false;
        this.CUSTOM_THEME = `/* See: https://www.infragistics.com/products/ignite-ui-angular/angular/components/themes.html */
@import "~igniteui-angular/lib/core/styles/themes/index";

$primary: #731963 !default;
$secondary: #ce5712 !default;

$app-palette: igx-palette($primary, $secondary);

/* autoprefixer grid: on */

@include igx-core();
@include igx-theme($app-palette);
`;
        this.DEFAULT_THEME = `,
              "node_modules/igniteui-angular/styles/igniteui-angular.css"`;
    }
    installModules() {
        throw new Error("Method not implemented.");
    }
    upgradeIgniteUIPackage(projectPath, packagePath) {
        // noop
    }
    getExtraConfiguration() {
        return [];
    }
    setExtraConfiguration(extraConfigKeys) { }
    generateFiles(outputPath, name, theme, ...options) {
        const config = {
            "$(cliVersion)": Util_1.Util.version(),
            "$(CustomTheme)": "",
            "$(dash-name)": Util_1.Util.lowerDashed(name),
            "$(DefaultTheme)": "",
            "$(name)": name,
            "$(projectTemplate)": this.id,
            "$(theme)": theme,
            "__path__": name
        };
        switch (theme) {
            case "Custom":
                config["$(CustomTheme)"] = this.CUSTOM_THEME;
                break;
            case "Default":
            default:
                config["$(DefaultTheme)"] = this.DEFAULT_THEME;
                break;
        }
        const pathsConfig = {};
        return Util_1.Util.processTemplates(path.join(__dirname, "./files"), path.join(outputPath, name), config, pathsConfig);
    }
}
exports.BaseIgxProject = BaseIgxProject;
