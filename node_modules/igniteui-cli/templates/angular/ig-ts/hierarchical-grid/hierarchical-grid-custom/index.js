"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GridHelper_1 = require("../../../../../lib/project-utility/GridHelper");
const AngularTemplate_1 = require("../../../../../lib/templates/AngularTemplate");
class HierarchicalGridCustomTemplate extends AngularTemplate_1.AngularTemplate {
    constructor() {
        super(__dirname);
        this.userExtraConfiguration = {};
        this.id = "hierarchical-grid-custom";
        this.name = "Custom Hierarchical Grid";
        this.widget = "igHierarchicalGrid";
        this.controlGroup = "Data Grids";
        this.description = "igHierarchicalGrid default template for Angular";
        this.dependencies = ["igHierarchicalGrid"];
        this.projectType = "ig-ts";
        this.extraConfigurations = [];
        this.hasExtraConfiguration = true;
        this.listInComponentTemplates = true;
        this.gridHelper = new GridHelper_1.GridHelper();
        this.gridHelper.hierarchical = true;
        const featureConfiguration = {
            choices: [
                "Sorting", "Selection", "Updating", "Filtering", "ColumnMoving",
                "Resizing", "Hiding", "Paging", "Summaries"
            ],
            default: "",
            key: "features",
            message: "Select features for the igHierarchicalGrid",
            type: 1 /* MultiChoice */
        };
        this.extraConfigurations.push(featureConfiguration);
    }
    setExtraConfiguration(extraConfigKeys) {
        this.userExtraConfiguration = extraConfigKeys;
    }
    generateFiles(projectPath, name, ...options) {
        const features = this.gridHelper.generateFeatures(this.userExtraConfiguration["features"], 3);
        const config = { "$(gridFeatures)": features };
        return super.generateFiles(projectPath, name, { extraConfig: config });
    }
    getExtraConfiguration() {
        return this.extraConfigurations;
    }
}
module.exports = new HierarchicalGridCustomTemplate();
