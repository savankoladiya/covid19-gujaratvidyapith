"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Util_1 = require("../../../../../lib/Util");
const ProjectConfig_1 = require("./../../../../../lib/ProjectConfig");
class EmptyAngularProject {
    constructor() {
        this.id = "angular";
        this.name = "empty";
        this.description = "Ignite UI CLI Default empty project structure for Angular";
        this.dependencies = [];
        this.framework = "angular";
        this.projectType = "ig-ts";
        this.hasExtraConfiguration = false;
    }
    installModules() {
        throw new Error("Method not implemented.");
    }
    upgradeIgniteUIPackage(projectPath, packagePath) {
        const config = ProjectConfig_1.ProjectConfig.getConfig();
        const files = config.project.sourceFiles;
        config.project.sourceFiles = files.map(x => {
            if (x === "infragistics.core-lite.js") {
                return "infragistics.core.js";
            }
            else if (x === "infragistics.lob-lite.js") {
                return "infragistics.lob.js";
            }
            return x;
        });
        ProjectConfig_1.ProjectConfig.setConfig(config);
    }
    getExtraConfiguration() {
        return [];
    }
    setExtraConfiguration(extraConfigKeys) { }
    generateFiles(outputPath, name, theme, ...options) {
        const config = {
            "$(cliVersion)": Util_1.Util.version(),
            "$(dash-name)": Util_1.Util.lowerDashed(name),
            "$(name)": name,
            "$(theme)": theme,
            "__path__": name
        };
        config["$(description)"] = this.description;
        const pathsConfig = {};
        return Util_1.Util.processTemplates(path.join(__dirname, "./files"), path.join(outputPath, name), config, pathsConfig);
    }
}
module.exports = new EmptyAngularProject();
