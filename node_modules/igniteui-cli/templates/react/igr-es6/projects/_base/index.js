"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const Util_1 = require("../../../../../lib/Util");
class BaseIgrProject {
    constructor() {
        this.id = "base";
        this.name = "base";
        this.description = "Ignite UI CLI project for React";
        this.framework = "react";
        this.projectType = "jsx";
        this.hasExtraConfiguration = false;
    }
    generateFiles(outputPath, name, theme, ...options) {
        return __awaiter(this, void 0, void 0, function* () {
            const config = this.getVariablesConfig(name, theme);
            const pathsConfig = {};
            return Util_1.Util.processTemplates(path.join(__dirname, "./files"), path.join(outputPath, name), config, pathsConfig);
        });
    }
    installModules() {
        throw new Error("Method not implemented.");
    }
    upgradeIgniteUIPackage(projectPath, packagePath) {
        throw new Error("Method not implemented.");
    }
    getExtraConfiguration() {
        throw new Error("Method not implemented.");
    }
    setExtraConfiguration(extraConfigKeys) {
        throw new Error("Method not implemented.");
    }
    getVariablesConfig(name, theme) {
        return {
            "$(cliVersion)": Util_1.Util.version(),
            "$(dash-name)": Util_1.Util.lowerDashed(name),
            "$(description)": this.description,
            "$(name)": name,
            "$(projectTemplate)": this.id,
            "$(theme)": theme,
            "__path__": name
        };
    }
}
exports.BaseIgrProject = BaseIgrProject;
