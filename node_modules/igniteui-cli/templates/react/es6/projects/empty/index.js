"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const Util_1 = require("../../../../../lib/Util");
class EmptyProject {
    constructor() {
        this._updateFile = "webpack.config.js";
        this.id = "react";
        this.name = "empty";
        this.description = "Ignite UI CLI project for React";
        this.framework = "react";
        this.projectType = "jsx";
        this.hasExtraConfiguration = false;
    }
    installModules() {
        throw new Error("Method not implemented.");
    }
    upgradeIgniteUIPackage(projectPath, packagePath) {
        const filePath = path.join(projectPath, this._updateFile);
        let configFile = fs.readFileSync(filePath, "utf8");
        //comment out core + lob redirects
        configFile = configFile.replace(`"ignite-ui/js/infragistics.core.js$"`, `//$&`);
        configFile = configFile.replace(`"ignite-ui/js/infragistics.lob.js$"`, `//$&`);
        fs.writeFileSync(filePath, configFile);
    }
    generateFiles(outputPath, name, theme, ...options) {
        return __awaiter(this, void 0, void 0, function* () {
            //TODO update the config with [{key: "keyname", "value"}]
            const config = {
                "$(cliVersion)": Util_1.Util.version(),
                "$(dash-name)": Util_1.Util.lowerDashed(name),
                "$(name)": name,
                "$(theme)": theme,
                "__path__": name
            };
            config["$(description)"] = this.description;
            const pathsConfig = {};
            return Util_1.Util.processTemplates(path.join(__dirname, "./files"), path.join(outputPath, name), config, pathsConfig);
        });
    }
    getExtraConfiguration() {
        throw new Error("Method not implemented.");
    }
    setExtraConfiguration(extraConfigKeys) {
        throw new Error("Method not implemented.");
    }
}
module.exports = new EmptyProject();
