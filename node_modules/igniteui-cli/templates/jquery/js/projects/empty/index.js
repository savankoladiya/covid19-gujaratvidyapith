"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const Util_1 = require("../../../../../lib/Util");
class EmptyProject {
    constructor() {
        this.id = "jquery";
        this.name = "jquery with Javascript";
        this.description = "Ignite UI CLI project for jQuery";
        this.framework = "jquery";
        this.projectType = "js";
        this.hasExtraConfiguration = false;
        this.routesFile = "bs-routes.json";
    }
    upgradeIgniteUIPackage(projectPath, packagePath) {
        const filePath = path.join(projectPath, this.routesFile);
        const routes = fs.readFileSync(path.join(projectPath, this.routesFile), "utf8");
        const config = JSON.parse(routes);
        delete config.routes["/ignite-ui/js/infragistics.core.js"];
        delete config.routes["/ignite-ui/js/infragistics.lob.js"];
        config.routes["/ignite-ui"] = packagePath;
        fs.writeFileSync(filePath, JSON.stringify(config, null, 4));
    }
    generateFiles(outputPath, name, theme, ...options) {
        const outDir = path.join(outputPath, name);
        let themePath = "";
        if (theme.indexOf(".less") !== -1 || theme.indexOf(".scss") !== -1) {
            themePath = ".themes/" + theme.split(".")[0] + "/infragistics.theme.css";
        }
        else {
            themePath = "$(igniteuiSource)/css/themes/" + theme + "/infragistics.theme.css";
        }
        const variables = {
            "$(cliVersion)": Util_1.Util.version(),
            "$(dash-name)": Util_1.Util.lowerDashed(name),
            "$(description)": this.description,
            "$(igniteuiSource)": "./node_modules/ignite-ui",
            "$(name)": name,
            "$(theme)": theme,
            "$(themePath)": themePath
        };
        //TODO
        const pathsConfig = {};
        return Util_1.Util.processTemplates(path.join(__dirname, "./files"), outDir, variables, pathsConfig);
    }
    installModules() {
        throw new Error("Method not implemented.");
    }
    getExtraConfiguration() {
        return [];
    }
    setExtraConfiguration(extraConfigKeys) { }
}
module.exports = new EmptyProject();
