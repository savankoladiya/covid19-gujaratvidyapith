"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GridHelper_1 = require("../../../../../lib/project-utility/GridHelper");
const jQueryTemplate_1 = require("../../../../../lib/templates/jQueryTemplate");
class GridEditingTemplate extends jQueryTemplate_1.jQueryTemplate {
    /**
     *
     */
    constructor() {
        super(__dirname);
        this.userExtraConfiguration = {};
        this.id = "grid-editing";
        this.name = "Grid Editing";
        this.description = "igGrid editing template";
        this.projectType = "js";
        this.components = ["Grid"];
        this.controlGroup = "Data Grids";
        this.dependencies = ["igGrid"];
        this.gridHelper = new GridHelper_1.GridHelper();
        this.hasExtraConfiguration = true;
        this.extraConfigurations = [];
        this.gridHelper.space = "    ";
        const featureConfiguration = {
            choices: ["Sorting", "Paging", "Filtering"],
            default: "",
            key: "features",
            message: "Select features for the igGrid",
            type: 1 /* MultiChoice */
        };
        this.extraConfigurations.push(featureConfiguration);
    }
    setExtraConfiguration(extraConfigKeys) {
        this.userExtraConfiguration = extraConfigKeys;
    }
    generateFiles(projectPath, name, ...options) {
        this.gridHelper.addFeature("Updating");
        const features = this.gridHelper.generateFeatures(this.userExtraConfiguration["features"], 4);
        const config = { "$(gridfeatures)": features };
        return super.generateFiles(projectPath, name, { extraConfig: config });
    }
    getExtraConfiguration() {
        return this.extraConfigurations;
    }
}
module.exports = new GridEditingTemplate();
