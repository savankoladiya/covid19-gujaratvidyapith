"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const schematics_1 = require("@angular-devkit/schematics");
// tslint:disable-next-line:no-submodule-imports
const testing_1 = require("@angular-devkit/schematics/testing");
describe("Update 3.0.0", () => {
    let appTree;
    const schematicRunner = new testing_1.SchematicTestRunner("ig-migrate", path.join(__dirname, "../migration-collection.json"));
    beforeEach(() => {
        appTree = new testing_1.UnitTestTree(new schematics_1.EmptyTree());
    });
    it("should add igx-typography class to body if needed", done => {
        const indexFile = "/src/index.html";
        appTree.create(indexFile, `<body>
<app-root></app-root>
</body>`);
        schematicRunner.runSchematic("migration-02", {}, appTree);
        expect(appTree.readContent(indexFile))
            .toEqual(`<body class="igx-typography">
<app-root></app-root>
</body>`);
        appTree.overwrite(indexFile, `<body class="">`);
        schematicRunner.runSchematic("migration-02", {}, appTree);
        expect(appTree.readContent(indexFile)).toEqual(`<body class="igx-typography">`);
        appTree.overwrite(indexFile, `<body class="test class">`);
        schematicRunner.runSchematic("migration-02", {}, appTree);
        expect(appTree.readContent(indexFile)).toEqual(`<body class="test class igx-typography">`);
        appTree.overwrite(indexFile, `<body class="test igx-typography">`);
        schematicRunner.runSchematic("migration-02", {}, appTree);
        expect(appTree.readContent(indexFile)).toEqual(`<body class="test igx-typography">`);
        done();
    });
    it("should add additional header styles to home css", done => {
        const cssFile = "/src/app/home/home.component.css";
        appTree.create(cssFile, `body {
  height: 100%;
}
`);
        schematicRunner.runSchematic("migration-02", {}, appTree);
        expect(appTree.readContent(cssFile))
            .toEqual(`body {
  height: 100%;
}

h1 {
  font-size: 3rem;
  font-weight: 600;
  color: rgba(0, 0, 0, .74);
}

h3 {
  font-size: 1.75rem;
  font-weight: 600;
}
`);
        done();
    });
    it("should remove forRoot() from IgxGridModule", done => {
        const indexFile = "/src/app/app.module.ts";
        appTree.create(indexFile, `@NgModule({
  imports: [
   IgxGridModule.forRoot(),
   IgxRippleModule
  ]
})`);
        schematicRunner.runSchematic("migration-02", {}, appTree);
        expect(appTree.readContent(indexFile))
            .toEqual(`@NgModule({
  imports: [
   IgxGridModule,
   IgxRippleModule
  ]
})`);
        done();
    });
    it("should update config", done => {
        const indexFile = "ignite-ui-cli.json";
        appTree.create(indexFile, `{
    "version": "",
    "project": {
        "framework": "angular",
        "projectType": "igx-ts",
        "projectTemplate": ""
    },
    "packagesInstalled": true
}`);
        schematicRunner.runSchematic("migration-02", {}, appTree);
        expect(appTree.readContent(indexFile))
            .toEqual(`{
    "version": "3.0.0",
    "project": {
        "framework": "angular",
        "projectType": "igx-ts",
        "projectTemplate": "side-nav"
    },
    "packagesInstalled": true
}
`);
        done();
    });
});
