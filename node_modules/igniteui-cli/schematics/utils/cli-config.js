"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const config_1 = require("@schematics/angular/utility/config");
const chalk_1 = require("chalk");
const Util_1 = require("../../lib/Util");
function createCliConfig() {
    return (tree, context) => {
        context.logger.info(``);
        context.logger.warn(`Ignite UI CLI installed`);
        context.logger.info(`- try it out in this project by running 'npx ig'`);
        context.logger.info(`- to run 'ig' everywhere and create new projects run 'npm install -g igniteui-cli'`);
        context.logger.info(`Learn more: ` + chalk_1.default.whiteBright(`https://github.com/IgniteUI/igniteui-cli#ignite-ui-cli`));
        context.logger.info(``);
        tree.create("ignite-ui-cli.json", JSON.stringify(GetCliConfig(tree), null, 2) + "\n");
        return tree;
    };
}
exports.createCliConfig = createCliConfig;
function GetCliConfig(tree) {
    let workspace;
    try {
        workspace = config_1.getWorkspace(tree);
    }
    catch (e) {
        if (e.toString().includes("Could not find (undefined)")) {
            throw new schematics_1.SchematicsException("angular.json was not found in the project's root");
        }
        throw new Error(e.message);
    }
    const cliConfig = require("../cli-config/files/ignite-ui-cli.json");
    cliConfig.version = Util_1.Util.version();
    const userPort = getPort(workspace);
    if (userPort) {
        cliConfig.project.defaultPort = userPort;
    }
    return cliConfig;
}
function getPort(workspace) {
    const targetProjectName = workspace.defaultProject;
    const projectServe = targetProjectName
        ? workspace.projects[targetProjectName].architect.serve.options
        : null;
    if (projectServe) {
        return projectServe.port;
    }
}
function getProjectType(workspace) {
    const targetProjectName = workspace.defaultProject;
    if (targetProjectName) {
        return workspace.projects[targetProjectName].projectType;
    }
}
