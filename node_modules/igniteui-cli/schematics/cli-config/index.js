"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
// tslint:disable-next-line:ordered-imports
const terminal_1 = require("@angular-devkit/core/src/terminal");
// tslint:disable-next-line:no-implicit-dependencies
const schematics_1 = require("@angular-devkit/schematics");
const TypeScriptFileUpdate_1 = require("../../lib/project-utility/TypeScriptFileUpdate");
const TypeScriptUtils_1 = require("../../lib/project-utility/TypeScriptUtils");
const index_1 = require("../../migrations/update-3/index");
const cli_config_1 = require("../utils/cli-config");
const theme_import_1 = require("../utils/theme-import");
function getDependencyVersion(pkg, tree) {
    const targetFile = "/package.json";
    if (tree.exists(targetFile)) {
        const sourceText = tree.read(targetFile).toString();
        const json = JSON.parse(sourceText);
        let targetDep;
        if (json.dependencies[pkg]) {
            targetDep = json.dependencies[pkg];
        }
        else if (json.devDependencies[pkg]) {
            targetDep = json.devDependencies[pkg];
        }
        else {
            targetDep = json.peerDependencies[pkg];
        }
        if (!targetDep) {
            throw new core_1.DependencyNotFoundException();
        }
        return targetDep;
    }
    throw new schematics_1.FileDoesNotExistException(`${tree.root.path}/${targetFile}`);
}
function displayVersionMismatch() {
    return (tree) => {
        const pkgJson = JSON.parse(tree.read("/node_modules/igniteui-angular/package.json").toString());
        const ngKey = "@angular/core";
        const ngCommonKey = "@angular/common";
        const ngCoreProjVer = getDependencyVersion(ngKey, tree);
        const ngCommonProjVer = getDependencyVersion(ngCommonKey, tree);
        const ngCoreVer = pkgJson.peerDependencies[ngKey];
        const ngCommonVer = pkgJson.peerDependencies[ngCommonKey];
        if (ngCoreProjVer < ngCoreVer || ngCommonProjVer < ngCommonVer) {
            // tslint:disable-next-line:no-console
            console.warn(terminal_1.yellow(`
WARNING Version mismatch detected - igniteui-angular is built against a newer version of @angular/core (${ngCoreVer}).
Running 'ng update' will prevent potential version conflicts.\n`));
        }
    };
}
function addTypographyToProj() {
    return (tree) => {
        index_1.addTypography(tree);
    };
}
function importBrowserAnimations() {
    return (tree) => {
        const moduleFile = `${theme_import_1.getDefaultProject(tree).sourceRoot}/app/app.module.ts`;
        if (tree.exists(moduleFile)) {
            const mainModule = new TypeScriptFileUpdate_1.TypeScriptFileUpdate(moduleFile, new TypeScriptUtils_1.NgTreeFileSystem(tree));
            mainModule.addNgModuleMeta({ import: "BrowserAnimationsModule", from: "@angular/platform-browser/animations" });
            mainModule.finalize();
        }
    };
}
function importStyles() {
    return (tree) => {
        theme_import_1.addFontsToIndexHtml(tree);
        theme_import_1.importDefaultTheme(tree);
    };
}
// tslint:disable-next-line:space-before-function-paren
function default_1() {
    return schematics_1.chain([
        importStyles(),
        addTypographyToProj(),
        importBrowserAnimations(),
        cli_config_1.createCliConfig(),
        displayVersionMismatch()
    ]);
}
exports.default = default_1;
