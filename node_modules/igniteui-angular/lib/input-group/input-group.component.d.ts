import { ElementRef, QueryList } from '@angular/core';
import { IgxHintDirective } from '../directives/hint/hint.directive';
import { IgxInputDirective } from '../directives/input/input.directive';
import { IDisplayDensityOptions, DisplayDensityBase } from '../core/displayDensity';
import { IgxInputGroupBase } from './input-group.common';
export declare class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase {
    private _element;
    private _displayDensityOptions;
    private _type;
    private _filled;
    private _supressInputAutofocus;
    /**
     * An ElementRef property of the `IgxInputGroupComponent`.
     */
    element: ElementRef;
    /**
     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.
     * ```html
     * <igx-input-group [id]="'igx-input-group-55'"></igx-input-group>
     * ```
     */
    id: string;
    /**
     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.
     * By default applied the class is applied.
     *```typescript
     *@ViewChild("MyInputGroup")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *this.inputGroup.defaultClass = false;
     *```
     *}
     */
    defaultClass: boolean;
    /**
     * @hidden
     */
    hasPlaceholder: boolean;
    /**
     * @hidden
     */
    isRequired: boolean;
    /**
     * @hidden
     */
    isFocused: boolean;
    /**
     * @hidden
     */
    isBox: boolean;
    /**
     * @hidden
     */
    isBorder: boolean;
    /**
     * @hidden
     */
    isSearch: boolean;
    /**
     * @hidden
     */
    isFluentSearch: boolean;
    /**
     * @hidden
     */
    isFluent: boolean;
    /**
     * An @Input property that disables the `IgxInputGroupComponent`.
     * ```html
     * <igx-input-group [disabled]="'true'"></igx-input-group>
     * ```
     */
    disabled: boolean;
    /**
     * @hidden
     */
    readonly validClass: boolean;
    /**
     * @hidden
     */
    readonly invalidClass: boolean;
    /**
     * @hidden
     */
    hasWarning: boolean;
    /**
     * @hidden
     */
    protected hints: QueryList<IgxHintDirective>;
    /**
     * @hidden
     */
    protected input: IgxInputDirective;
    /**
     *@hidden
     */
    onClick(event: any): void;
    /**
     * An @Input property that sets how the input will be styled.
     * The allowed values are `line`, `box`, `border`, `fluent`, `search` and `fluentSearch`. The default is `line`.
     * ```html
     *<igx-input-group [type]="'search'">
     * ```
     */
    /**
    * Returns the type of the `IgxInputGroupComponent`. How the input is styled.
    * Values are `line` - 0, `box` - 1, `border` - 2,  `fluent` - 3 `fluentSearch` - 4 and `search` - 5. The default is `line`.
    * ```typescript
    *@ViewChild("MyInputGroup")
    *public inputGroup: IgxInputGroupComponent;
    *ngAfterViewInit(){
    *    let inputType = this.inputGroup.type;
    *}
    * ```
    */
    type: string;
    /**
     * Returns whether the input element of the input group will be automatically focused on click.
     * ```typescript
     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;
     * ```
     */
    /**
    * Sets whether the input element of the input group will be automatically focused on click.
    * ```html
    * <igx-input-group [supressInputAutofocus]="true"></igx-input-group>
    * ```
    */
    supressInputAutofocus: boolean;
    /**
     *@hidden
     */
    readonly isFilled: any;
    /**
     *@hidden
     */
    readonly isDisplayDensityCosy: boolean;
    /**
     *@hidden
     */
    readonly isDisplayDensityComfortable: boolean;
    /**
     *@hidden
     */
    readonly isDisplayDensityCompact: boolean;
    constructor(_element: ElementRef, _displayDensityOptions: IDisplayDensityOptions);
    /**
     * Returns whether the `IgxInputGroupComponent` has hints.
     * ```typescript
     *@ViewChild("MyInputGroup")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let inputHints = this.inputGroup.hasHints;
     *}
     * ```
     */
    readonly hasHints: boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` has border.
     * ```typescript
     *@ViewChild("MyInputGroup")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let inputBroder = this.inputGroup.hasBorder;
     *}
     * ```
     */
    readonly hasBorder: boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is line.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeLine = this.inputGroup.isTypeLine;
     *}
     * ```
     */
    readonly isTypeLine: boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is box.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeBox = this.inputGroup.isTypeBox;
     *}
     *```
     */
    readonly isTypeBox: boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is border.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeBorder = this.inputGroup.isTypeBorder;
     *}
     * ```
     */
    readonly isTypeBorder: boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is Fluent.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeFluent = this.inputGroup.isTypeFluent;
     *}
     * ```
     */
    readonly isTypeFluent: boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is search.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeSearch = this.inputGroup.isTypeSearch;
     *}
     * ```
     */
    readonly isTypeSearch: boolean;
    /**
     * Returns whether the `IgxInputGroupComponent` type is fluentSearch.
     * ```typescript
     *@ViewChild("MyInputGroup1")
     *public inputGroup: IgxInputGroupComponent;
     *ngAfterViewInit(){
     *    let isTypeFluentSearch = this.inputGroup.isTypeFluentSearch;
     *}
     * ```
     */
    readonly isTypeFluentSearch: boolean;
    filled: boolean;
}
/**
 * @hidden
 */
export declare class IgxInputGroupModule {
}
