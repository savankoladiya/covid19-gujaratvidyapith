/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { animate, animation, style } from '@angular/animations';
import { EaseIn, EaseOut } from '../easings';
/** @type {?} */
const base = [
    style({
        opacity: `{{startOpacity}}`,
        transform: `{{fromPosition}}`
    }),
    animate(`{{duration}} {{delay}} {{easing}}`, style({
        opacity: `{{endOpacity}}`,
        transform: `{{toPosition}}`
    }))
];
/** @type {?} */
const baseInParams = {
    delay: '0s',
    duration: '350ms',
    easing: EaseOut.quad,
    endOpacity: 1,
    fromPosition: 'translateY(-500px)',
    startOpacity: 0,
    toPosition: 'translateY(0)'
};
/** @type {?} */
const baseOutParams = {
    delay: '0s',
    duration: '350ms',
    easing: EaseIn.quad,
    endOpacity: 0,
    fromPosition: 'translateY(0)',
    startOpacity: 1,
    toPosition: 'translateY(-500px)'
};
/** @type {?} */
const slideInTop = animation(base, { params: baseInParams });
/** @type {?} */
const slideInLeft = animation(base, {
    params: {
        delay: '0s',
        duration: '350ms',
        easing: EaseOut.quad,
        endOpacity: 1,
        fromPosition: 'translateX(-500px)',
        startOpacity: 0,
        toPosition: 'translateY(0)'
    }
});
/** @type {?} */
const slideInRight = animation(base, {
    params: {
        delay: '0s',
        duration: '350ms',
        easing: EaseOut.quad,
        endOpacity: 1,
        fromPosition: 'translateX(500px)',
        startOpacity: 0,
        toPosition: 'translateY(0)'
    }
});
/** @type {?} */
const slideInBottom = animation(base, {
    params: {
        delay: '0s',
        duration: '350ms',
        easing: EaseOut.quad,
        endOpacity: 1,
        fromPosition: 'translateY(500px)',
        startOpacity: 0,
        toPosition: 'translateY(0)'
    }
});
/** @type {?} */
const slideInTr = animation(base, {
    params: Object.assign({}, baseInParams, { fromPosition: 'translateY(-500px) translateX(500px)', toPosition: 'translateY(0) translateX(0)' })
});
/** @type {?} */
const slideInTl = animation(base, {
    params: Object.assign({}, baseInParams, { fromPosition: 'translateY(-500px) translateX(-500px)', toPosition: 'translateY(0) translateX(0)' })
});
/** @type {?} */
const slideInBr = animation(base, {
    params: Object.assign({}, baseInParams, { fromPosition: 'translateY(500px) translateX(500px)', toPosition: 'translateY(0) translateX(0)' })
});
/** @type {?} */
const slideInBl = animation(base, {
    params: Object.assign({}, baseInParams, { fromPosition: 'translateY(500px) translateX(-500px)', toPosition: 'translateY(0) translateX(0)' })
});
/** @type {?} */
const slideOutTop = animation(base, { params: baseOutParams });
/** @type {?} */
const slideOutRight = animation(base, {
    params: Object.assign({}, baseOutParams, { toPosition: 'translateX(500px)' })
});
/** @type {?} */
const slideOutBottom = animation(base, {
    params: {
        delay: '0s',
        duration: '350ms',
        easing: EaseIn.quad,
        endOpacity: 0,
        fromPosition: 'translateY(0)',
        startOpacity: 1,
        toPosition: 'translateY(500px)'
    }
});
/** @type {?} */
const slideOutLeft = animation(base, {
    params: Object.assign({}, baseOutParams, { toPosition: 'translateX(-500px)' })
});
/** @type {?} */
const slideOutTr = animation(base, {
    params: Object.assign({}, baseOutParams, { fromPosition: 'translateY(0) translateX(0)', toPosition: 'translateY(-500px) translateX(500px)' })
});
/** @type {?} */
const slideOutBr = animation(base, {
    params: Object.assign({}, baseOutParams, { fromPosition: 'translateY(0) translateX(0)', toPosition: 'translateY(500px) translateX(500px)' })
});
/** @type {?} */
const slideOutBl = animation(base, {
    params: Object.assign({}, baseOutParams, { fromPosition: 'translateY(0) translateX(0)', toPosition: 'translateY(500px) translateX(-500px)' })
});
/** @type {?} */
const slideOutTl = animation(base, {
    params: Object.assign({}, baseOutParams, { fromPosition: 'translateY(0) translateX(0)', toPosition: 'translateY(-500px) translateX(-500px)' })
});
export { slideInTop, slideInRight, slideInBottom, slideInLeft, slideInTr, slideInBr, slideInBl, slideInTl, slideOutTop, slideOutBottom, slideOutRight, slideOutLeft, slideOutTr, slideOutBr, slideOutBl, slideOutTl };
//# sourceMappingURL=data:application/json;base64,