/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ConnectedPositioningStrategy } from './connected-positioning-strategy';
import { Util } from '../utilities';
/**
 * @abstract
 */
export class BaseFitPositionStrategy extends ConnectedPositioningStrategy {
    /**
     * \@inheritdoc
     * @param {?} contentElement
     * @param {?} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    position(contentElement, size, document, initialCall) {
        /** @type {?} */
        const targetRect = Util.getTargetRect(this.settings);
        /** @type {?} */
        const contentElementRect = contentElement.getBoundingClientRect();
        if (initialCall) {
            /** @type {?} */
            const connectedFit = {};
            connectedFit.targetRect = targetRect;
            connectedFit.contentElementRect = contentElementRect;
            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);
            this.settings = Object.assign({}, this._initialSettings);
            connectedFit.viewPortRect = Util.getViewportRect(document);
            this.updateViewPortFit(connectedFit);
            if (!connectedFit.fitHorizontal || !connectedFit.fitVertical) {
                this.fitInViewport(contentElement, connectedFit);
            }
        }
        this.setStyle(contentElement, targetRect, contentElementRect);
    }
    /**
     * Checks if element can fit in viewport and updates provided connectedFit
     * with the result
     * @protected
     * @param {?} connectedFit connectedFit to update
     * @return {?}
     */
    updateViewPortFit(connectedFit) {
        connectedFit.left = this.calculateLeft(connectedFit.targetRect, connectedFit.contentElementRect, this.settings.horizontalStartPoint, this.settings.horizontalDirection);
        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;
        connectedFit.fitHorizontal =
            0 < connectedFit.left && connectedFit.right < connectedFit.viewPortRect.width;
        connectedFit.top = this.calculateTop(connectedFit.targetRect, connectedFit.contentElementRect, this.settings.verticalStartPoint, this.settings.verticalDirection);
        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;
        connectedFit.fitVertical =
            0 < connectedFit.top && connectedFit.bottom < connectedFit.viewPortRect.height;
    }
    /**
     * Calculates the position of the left border of the element if it gets positioned
     * with provided start point and direction
     * @protected
     * @param {?} targetRect Rectangle of the target where element is attached
     * @param {?} elementRect Rectangle of the element
     * @param {?} startPoint Start point of the target
     * @param {?} direction Direction in which to show the element
     * @return {?}
     */
    calculateLeft(targetRect, elementRect, startPoint, direction) {
        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction;
    }
    /**
     * Calculates the position of the top border of the element if it gets positioned
     * with provided position settings related to the target
     * @protected
     * @param {?} targetRect Rectangle of the target where element is attached
     * @param {?} elementRect Rectangle of the element
     * @param {?} startPoint Start point of the target
     * @param {?} direction Direction in which to show the element
     * @return {?}
     */
    calculateTop(targetRect, elementRect, startPoint, direction) {
        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction;
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseFitPositionStrategy.prototype._initialSize;
    /**
     * @type {?}
     * @protected
     */
    BaseFitPositionStrategy.prototype._initialSettings;
    /**
     * Fits the element into viewport according to the position settings
     * @abstract
     * @protected
     * @param {?} element element to fit in viewport
     * @param {?} connectedFit connectedFit object containing all necessary parameters
     * @return {?}
     */
    BaseFitPositionStrategy.prototype.fitInViewport = function (element, connectedFit) { };
}
/**
 * @record
 */
export function ConnectedFit() { }
if (false) {
    /** @type {?|undefined} */
    ConnectedFit.prototype.contentElementRect;
    /** @type {?|undefined} */
    ConnectedFit.prototype.targetRect;
    /** @type {?|undefined} */
    ConnectedFit.prototype.viewPortRect;
    /** @type {?|undefined} */
    ConnectedFit.prototype.fitHorizontal;
    /** @type {?|undefined} */
    ConnectedFit.prototype.fitVertical;
    /** @type {?|undefined} */
    ConnectedFit.prototype.left;
    /** @type {?|undefined} */
    ConnectedFit.prototype.right;
    /** @type {?|undefined} */
    ConnectedFit.prototype.top;
    /** @type {?|undefined} */
    ConnectedFit.prototype.bottom;
}
//# sourceMappingURL=data:application/json;base64,