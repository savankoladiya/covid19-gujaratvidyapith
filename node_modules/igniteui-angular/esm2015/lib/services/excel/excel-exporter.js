/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as JSZip from 'jszip/dist/jszip';
import { EventEmitter, Injectable, Output } from '@angular/core';
import { ExcelElementsFactory } from './excel-elements-factory';
import { ExcelFolderTypes } from './excel-enums';
import { IgxBaseExporter } from '../exporter-common/base-export-service';
import { ExportUtilities } from '../exporter-common/export-utilities';
import { WorksheetData } from './worksheet-data';
/**
 * @record
 */
export function IExcelExportEndedEventArgs() { }
if (false) {
    /** @type {?} */
    IExcelExportEndedEventArgs.prototype.xlsx;
}
/**
 * **Ignite UI for Angular Excel Exporter Service** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)
 *
 * The Ignite UI for Angular Excel Exporter service can export data in Microsoft® Excel® format from both raw data
 * (array) or from an `IgxGrid`.
 *
 * Example:
 * ```typescript
 * public localData = [
 *   { Name: "Eric Ridley", Age: "26" },
 *   { Name: "Alanis Brook", Age: "22" },
 *   { Name: "Jonathan Morris", Age: "23" }
 * ];
 *
 * constructor(private excelExportService: IgxExcelExporterService) {
 * }
 *
 * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions("FileName"));
 * ```
 */
export class IgxExcelExporterService extends IgxBaseExporter {
    constructor() {
        super(...arguments);
        /**
         * This event is emitted when the export process finishes.
         * ```typescript
         * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {
         * // put event handler code here
         * });
         * ```
         * \@memberof IgxExcelExporterService
         */
        this.onExportEnded = new EventEmitter();
    }
    /**
     * @private
     * @param {?} folder
     * @param {?} zip
     * @param {?} worksheetData
     * @return {?}
     */
    static populateFolder(folder, zip, worksheetData) {
        for (const childFolder of folder.childFolders(worksheetData)) {
            /** @type {?} */
            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);
            /** @type {?} */
            const zipFolder = zip.folder(folderIntance.folderName);
            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);
        }
        for (const childFile of folder.childFiles(worksheetData)) {
            /** @type {?} */
            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);
            fileInstance.writeElement(zip, worksheetData);
        }
    }
    /**
     * @protected
     * @param {?} data
     * @param {?} options
     * @return {?}
     */
    exportDataImplementation(data, options) {
        if (this._isTreeGrid) {
            /** @type {?} */
            let maxLevel = 0;
            data.forEach((r) => {
                maxLevel = Math.max(maxLevel, r.originalRowData.level);
            });
            if (maxLevel > 7) {
                throw Error('Can create an outline of up to eight levels!');
            }
        }
        /** @type {?} */
        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);
        this._xlsx = new JSZip();
        /** @type {?} */
        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);
        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);
        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {
            this.saveFile(result, options.fileName);
            this.onExportEnded.emit({ xlsx: this._xlsx });
        });
    }
    /**
     * @private
     * @param {?} data
     * @param {?} fileName
     * @return {?}
     */
    saveFile(data, fileName) {
        /** @type {?} */
        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {
            type: ''
        });
        ExportUtilities.saveBlobToFile(blob, fileName);
    }
}
IgxExcelExporterService.ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };
IgxExcelExporterService.decorators = [
    { type: Injectable }
];
IgxExcelExporterService.propDecorators = {
    onExportEnded: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxExcelExporterService.ZIP_OPTIONS;
    /**
     * @type {?}
     * @private
     */
    IgxExcelExporterService.prototype._xlsx;
    /**
     * This event is emitted when the export process finishes.
     * ```typescript
     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {
     * // put event handler code here
     * });
     * ```
     * \@memberof IgxExcelExporterService
     * @type {?}
     */
    IgxExcelExporterService.prototype.onExportEnded;
}
//# sourceMappingURL=data:application/json;base64,