/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';
import { isDateInRanges } from '../calendar';
import { CalendarSelection } from '../calendar-base';
/**
 * @hidden
 */
export class IgxDayItemComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.hideOutsideDays = false;
        this.isLastInRange = false;
        this.isFirstInRange = false;
        this.isWithinRange = false;
        this.onDateSelection = new EventEmitter();
        this._selected = false;
    }
    /**
     * Returns boolean indicating if the day is selected
     *
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * Selects the day
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = value;
    }
    /**
     * @return {?}
     */
    get isCurrentMonth() {
        return this.date.isCurrentMonth;
    }
    /**
     * @return {?}
     */
    get isPreviousMonth() {
        return this.date.isPrevMonth;
    }
    /**
     * @return {?}
     */
    get isNextMonth() {
        return this.date.isNextMonth;
    }
    /**
     * @return {?}
     */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get isSelectedCSS() {
        return (!this.isDisabled && this.selected);
    }
    /**
     * @return {?}
     */
    get isInactive() {
        return this.date.isNextMonth || this.date.isPrevMonth;
    }
    /**
     * @return {?}
     */
    get isHidden() {
        return this.hideOutsideDays && this.isInactive;
    }
    /**
     * @return {?}
     */
    get isToday() {
        /** @type {?} */
        const today = new Date(Date.now());
        /** @type {?} */
        const date = this.date.date;
        return (date.getFullYear() === today.getFullYear() &&
            date.getMonth() === today.getMonth() &&
            date.getDate() === today.getDate());
    }
    /**
     * @return {?}
     */
    get isWeekend() {
        /** @type {?} */
        const day = this.date.date.getDay();
        return day === 0 || day === 6;
    }
    /**
     * @return {?}
     */
    get isDisabled() {
        if (this.disabledDates === null) {
            return false;
        }
        return isDateInRanges(this.date.date, this.disabledDates);
    }
    /**
     * @return {?}
     */
    get isOutOfRange() {
        if (!this.outOfRangeDates) {
            return false;
        }
        return isDateInRanges(this.date.date, this.outOfRangeDates);
    }
    /**
     * @return {?}
     */
    get isFocusable() {
        return this.isCurrentMonth && !this.isHidden && !this.isDisabled && !this.isOutOfRange;
    }
    /**
     * @return {?}
     */
    get isWithinRangeCSS() {
        return !this.isSingleSelection && this.isWithinRange;
    }
    /**
     * @return {?}
     */
    get isSpecial() {
        if (this.specialDates === null) {
            return false;
        }
        return isDateInRanges(this.date.date, this.specialDates);
    }
    /**
     * @return {?}
     */
    get defaultCSS() {
        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);
    }
    /**
     * @return {?}
     */
    get isDisabledCSS() {
        return this.isHidden || this.isDisabled || this.isOutOfRange;
    }
    /**
     * @return {?}
     */
    get isSingleSelection() {
        return this.selection !== CalendarSelection.RANGE;
    }
    /**
     * @return {?}
     */
    get tabindex() {
        return this.isDisabled || this.isHidden ? -1 : 0;
    }
    /**
     * @return {?}
     */
    onSelect() {
        this.onDateSelection.emit(this.date);
    }
}
IgxDayItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-day-item',
                template: "<span class=\"igx-calendar__date-content\">\n    <ng-content></ng-content>\n</span>\n"
            }] }
];
/** @nocollapse */
IgxDayItemComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxDayItemComponent.propDecorators = {
    date: [{ type: Input }],
    selection: [{ type: Input }],
    selected: [{ type: Input }],
    disabledDates: [{ type: Input }],
    outOfRangeDates: [{ type: Input }],
    specialDates: [{ type: Input }],
    hideOutsideDays: [{ type: Input }],
    isLastInRange: [{ type: Input }, { type: HostBinding, args: ['class.igx-calendar__date--last',] }],
    isFirstInRange: [{ type: Input }, { type: HostBinding, args: ['class.igx-calendar__date--first',] }],
    isWithinRange: [{ type: Input }],
    onDateSelection: [{ type: Output }],
    isSelectedCSS: [{ type: HostBinding, args: ['class.igx-calendar__date--selected',] }],
    isInactive: [{ type: HostBinding, args: ['class.igx-calendar__date--inactive',] }],
    isHidden: [{ type: HostBinding, args: ['class.igx-calendar__date--hidden',] }],
    isToday: [{ type: HostBinding, args: ['class.igx-calendar__date--current',] }],
    isWeekend: [{ type: HostBinding, args: ['class.igx-calendar__date--weekend',] }],
    isWithinRangeCSS: [{ type: HostBinding, args: ['class.igx-calendar__date--range',] }],
    isSpecial: [{ type: HostBinding, args: ['class.igx-calendar__date--special',] }],
    defaultCSS: [{ type: HostBinding, args: ['class.igx-calendar__date',] }],
    isDisabledCSS: [{ type: HostBinding, args: ['class.igx-calendar__date--disabled',] }],
    isSingleSelection: [{ type: HostBinding, args: ['class.igx-calendar__date--single',] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    onSelect: [{ type: HostListener, args: ['click',] }, { type: HostListener, args: ['keydown.enter',] }]
};
if (false) {
    /** @type {?} */
    IgxDayItemComponent.prototype.date;
    /** @type {?} */
    IgxDayItemComponent.prototype.selection;
    /** @type {?} */
    IgxDayItemComponent.prototype.disabledDates;
    /** @type {?} */
    IgxDayItemComponent.prototype.outOfRangeDates;
    /** @type {?} */
    IgxDayItemComponent.prototype.specialDates;
    /** @type {?} */
    IgxDayItemComponent.prototype.hideOutsideDays;
    /** @type {?} */
    IgxDayItemComponent.prototype.isLastInRange;
    /** @type {?} */
    IgxDayItemComponent.prototype.isFirstInRange;
    /** @type {?} */
    IgxDayItemComponent.prototype.isWithinRange;
    /** @type {?} */
    IgxDayItemComponent.prototype.onDateSelection;
    /**
     * @type {?}
     * @private
     */
    IgxDayItemComponent.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    IgxDayItemComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,