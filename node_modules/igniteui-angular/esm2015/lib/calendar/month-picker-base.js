/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { IgxCalendarBase } from './calendar-base';
import { HostBinding, ViewChildren, QueryList } from '@angular/core';
/** @enum {number} */
const CalendarView = {
    DEFAULT: 0,
    YEAR: 1,
    DECADE: 2,
};
export { CalendarView };
CalendarView[CalendarView.DEFAULT] = 'DEFAULT';
CalendarView[CalendarView.YEAR] = 'YEAR';
CalendarView[CalendarView.DECADE] = 'DECADE';
export class IgxMonthPickerBase extends IgxCalendarBase {
    constructor() {
        super(...arguments);
        /**
         * Holds month view index we are operating on.
         */
        this.activeViewIdx = 0;
        /**
         * The default `tabindex` attribute for the component.
         *
         * @hidden
         */
        this.tabindex = 0;
        /**
         * @hidden
         */
        this._activeView = CalendarView.DEFAULT;
    }
    /**
     * Gets the current active view.
     * @return {?}
     */
    get activeView() {
        return this._activeView;
    }
    /**
     * Sets the current active view.
     * @param {?} val
     * @return {?}
     */
    set activeView(val) {
        this._activeView = val;
    }
    /**
     * @hidden
     * @return {?}
     */
    get isDefaultView() {
        return this._activeView === CalendarView.DEFAULT;
    }
    /**
     * @hidden
     * @return {?}
     */
    get isDecadeView() {
        return this._activeView === CalendarView.DECADE;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    changeYear(event) {
        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);
        this.activeView = CalendarView.DEFAULT;
        requestAnimationFrame(() => {
            if (this.yearsBtns && this.yearsBtns.length) {
                this.yearsBtns.find((e, idx) => idx === this.activeViewIdx).nativeElement.focus();
            }
        });
    }
    /**
     * @hidden
     * @param {?=} activeViewIdx
     * @return {?}
     */
    activeViewDecade(activeViewIdx = 0) {
        this._activeView = CalendarView.DECADE;
        this.activeViewIdx = activeViewIdx;
    }
    /**
     * @hidden
     * @param {?} event
     * @param {?=} activeViewIdx
     * @return {?}
     */
    activeViewDecadeKB(event, activeViewIdx = 0) {
        if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
            event.preventDefault();
            this.activeViewDecade(activeViewIdx);
        }
    }
    /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    formattedYear(value) {
        if (this.formatViews.year) {
            return this.formatterYear.format(value);
        }
        return `${value.getFullYear()}`;
    }
}
IgxMonthPickerBase.propDecorators = {
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    yearsBtns: [{ type: ViewChildren, args: ['yearsBtn',] }]
};
if (false) {
    /**
     * Holds month view index we are operating on.
     * @type {?}
     * @protected
     */
    IgxMonthPickerBase.prototype.activeViewIdx;
    /**
     * The default `tabindex` attribute for the component.
     *
     * @hidden
     * @type {?}
     */
    IgxMonthPickerBase.prototype.tabindex;
    /**
     * @hidden
     * @type {?}
     */
    IgxMonthPickerBase.prototype.yearsBtns;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMonthPickerBase.prototype._activeView;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGgtcGlja2VyLWJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2NhbGVuZGFyL21vbnRoLXBpY2tlci1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQWMsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7SUFPN0UsVUFBTztJQUNQLE9BQUk7SUFDSixTQUFNOzs7Ozs7QUFFVixNQUFNLE9BQU8sa0JBQW1CLFNBQVEsZUFBZTtJQUF2RDs7Ozs7UUFLYyxrQkFBYSxHQUFHLENBQUMsQ0FBQzs7Ozs7O1FBUXJCLGFBQVEsR0FBRyxDQUFDLENBQUM7Ozs7UUF3Q1osZ0JBQVcsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO0lBOEMvQyxDQUFDOzs7OztJQTFFRyxJQUFXLFVBQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVCLENBQUM7Ozs7OztJQUtELElBQVcsVUFBVSxDQUFDLEdBQWlCO1FBQ25DLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBS0QsSUFBVyxhQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxZQUFZLENBQUMsT0FBTyxDQUFDO0lBQ3JELENBQUM7Ozs7O0lBS0QsSUFBVyxZQUFZO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQ3BELENBQUM7Ozs7OztJQVVNLFVBQVUsQ0FBQyxLQUFXO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN4RixJQUFJLENBQUMsVUFBVSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFFdkMscUJBQXFCLENBQUMsR0FBRyxFQUFFO1lBQ3ZCLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDekMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFhLEVBQUUsR0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUN6RztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7O0lBS00sZ0JBQWdCLENBQUMsYUFBYSxHQUFHLENBQUM7UUFDckMsSUFBSSxDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ3ZDLENBQUM7Ozs7Ozs7SUFLTSxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsYUFBYSxHQUFHLENBQUM7UUFDOUMsSUFBSSxLQUFLLENBQUMsR0FBRyxvQkFBZSxJQUFJLEtBQUssQ0FBQyxHQUFHLDhCQUFrQixJQUFJLEtBQUssQ0FBQyxHQUFHLHdCQUFlLEVBQUU7WUFDckYsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUN4QztJQUNMLENBQUM7Ozs7Ozs7OztJQVFNLGFBQWEsQ0FBQyxLQUFXO1FBQzVCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUU7WUFDdkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQztRQUNELE9BQU8sR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztJQUNwQyxDQUFDOzs7dUJBdEZBLFdBQVcsU0FBQyxlQUFlO3dCQU0zQixZQUFZLFNBQUMsVUFBVTs7Ozs7Ozs7SUFieEIsMkNBQTRCOzs7Ozs7O0lBTzVCLHNDQUNvQjs7Ozs7SUFLcEIsdUNBQ3dDOzs7Ozs7SUFrQ3hDLHlDQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElneENhbGVuZGFyQmFzZSB9IGZyb20gJy4vY2FsZW5kYXItYmFzZSc7XG5pbXBvcnQgeyBIb3N0QmluZGluZywgVmlld0NoaWxkcmVuLCBFbGVtZW50UmVmLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEtFWVMgfSBmcm9tICcuLi9jb3JlL3V0aWxzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBjYWxlbmRlciB2aWV3IC0gZGF5cywgbW9udGhzIG9yIHllYXJzLlxuICovXG5leHBvcnQgZW51bSBDYWxlbmRhclZpZXcge1xuICAgIERFRkFVTFQsXG4gICAgWUVBUixcbiAgICBERUNBREVcbn1cbmV4cG9ydCBjbGFzcyBJZ3hNb250aFBpY2tlckJhc2UgZXh0ZW5kcyBJZ3hDYWxlbmRhckJhc2Uge1xuXG4gICAgLyoqXG4gICAgICogSG9sZHMgbW9udGggdmlldyBpbmRleCB3ZSBhcmUgb3BlcmF0aW5nIG9uLlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBhY3RpdmVWaWV3SWR4ID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IGB0YWJpbmRleGAgYXR0cmlidXRlIGZvciB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnYXR0ci50YWJpbmRleCcpXG4gICAgcHVibGljIHRhYmluZGV4ID0gMDtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBAVmlld0NoaWxkcmVuKCd5ZWFyc0J0bicpXG4gICAgcHVibGljIHllYXJzQnRuczogUXVlcnlMaXN0PEVsZW1lbnRSZWY+O1xuXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IGFjdGl2ZSB2aWV3LlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgYWN0aXZlVmlldygpOiBDYWxlbmRhclZpZXcge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlVmlldztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IGFjdGl2ZSB2aWV3LlxuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgYWN0aXZlVmlldyh2YWw6IENhbGVuZGFyVmlldykge1xuICAgICAgICB0aGlzLl9hY3RpdmVWaWV3ID0gdmFsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGlzRGVmYXVsdFZpZXcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVWaWV3ID09PSBDYWxlbmRhclZpZXcuREVGQVVMVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGdldCBpc0RlY2FkZVZpZXcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVWaWV3ID09PSBDYWxlbmRhclZpZXcuREVDQURFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgX2FjdGl2ZVZpZXcgPSBDYWxlbmRhclZpZXcuREVGQVVMVDtcblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2hhbmdlWWVhcihldmVudDogRGF0ZSkge1xuICAgICAgICB0aGlzLnZpZXdEYXRlID0gdGhpcy5jYWxlbmRhck1vZGVsLmdldEZpcnN0Vmlld0RhdGUoZXZlbnQsICdtb250aCcsIHRoaXMuYWN0aXZlVmlld0lkeCk7XG4gICAgICAgIHRoaXMuYWN0aXZlVmlldyA9IENhbGVuZGFyVmlldy5ERUZBVUxUO1xuXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy55ZWFyc0J0bnMgJiYgdGhpcy55ZWFyc0J0bnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy55ZWFyc0J0bnMuZmluZCgoZTogRWxlbWVudFJlZiwgaWR4OiBudW1iZXIpID0+IGlkeCA9PT0gdGhpcy5hY3RpdmVWaWV3SWR4KS5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aXZlVmlld0RlY2FkZShhY3RpdmVWaWV3SWR4ID0gMCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9hY3RpdmVWaWV3ID0gQ2FsZW5kYXJWaWV3LkRFQ0FERTtcbiAgICAgICAgdGhpcy5hY3RpdmVWaWV3SWR4ID0gYWN0aXZlVmlld0lkeDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIGFjdGl2ZVZpZXdEZWNhZGVLQihldmVudCwgYWN0aXZlVmlld0lkeCA9IDApIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gS0VZUy5TUEFDRSB8fCBldmVudC5rZXkgPT09IEtFWVMuU1BBQ0VfSUUgfHwgZXZlbnQua2V5ID09PSBLRVlTLkVOVEVSKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVWaWV3RGVjYWRlKGFjdGl2ZVZpZXdJZHgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbG9jYWxlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB5ZWFyIGluIHRoZSB5ZWFyIHZpZXcgaWYgZW5hYmxlZCxcbiAgICAgKiBvdGhlcndpc2UgcmV0dXJucyB0aGUgZGVmYXVsdCBgRGF0ZS5nZXRGdWxsWWVhcigpYCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZm9ybWF0dGVkWWVhcih2YWx1ZTogRGF0ZSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdFZpZXdzLnllYXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlclllYXIuZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dmFsdWUuZ2V0RnVsbFllYXIoKX1gO1xuICAgIH1cbn1cbiJdfQ==