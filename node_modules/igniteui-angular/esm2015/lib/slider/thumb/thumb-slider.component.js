/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostListener, ElementRef, HostBinding, Output, EventEmitter, TemplateRef } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { SliderHandle } from '../slider.common';
import { Subject } from 'rxjs';
/**
 * @hidden
 */
export class IgxSliderThumbComponent {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._isActive = false;
        this._isPressed = false;
        this._destroy$ = new Subject();
        this.isActive = false;
        this.onThumbValueChange = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onHoverChange = new EventEmitter();
        this.tabindex = 0;
        this.zIndex = 0;
    }
    /**
     * @private
     * @return {?}
     */
    get thumbPositionX() {
        /** @type {?} */
        const thumbBounderies = this.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;
        return thumbBounderies.left + thumbCenter;
    }
    /**
     * @return {?}
     */
    get thumbFromClass() {
        return this.type === SliderHandle.FROM;
    }
    /**
     * @return {?}
     */
    get thumbToClass() {
        return this.type === SliderHandle.TO;
    }
    /**
     * @return {?}
     */
    get thumbFromActiveClass() {
        return this.type === SliderHandle.FROM && this._isActive;
    }
    /**
     * @return {?}
     */
    get thumbToActiveClass() {
        return this.type === SliderHandle.TO && this._isActive;
    }
    /**
     * @return {?}
     */
    get thumbPressedClass() {
        return this.isActive && this._isPressed;
    }
    /**
     * @return {?}
     */
    get nativeElement() {
        return this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get destroy() {
        return this._destroy$;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        this.onPan
            .pipe(takeUntil(this._destroy$))
            .subscribe(mouseX => this.updateThumbValue(mouseX));
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy$.next(true);
        this._destroy$.complete();
    }
    /**
     * @return {?}
     */
    onPinterEnter() {
        this.onHoverChange.emit(true);
    }
    /**
     * @return {?}
     */
    onPointerLeave() {
        this.onHoverChange.emit(false);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        if (this.disabled) {
            return;
        }
        /** @type {?} */
        let increment = 0;
        if (event.key.endsWith('Left')) {
            increment = this.step * -1;
        }
        else if (event.key.endsWith('Right')) {
            increment = this.step;
        }
        else {
            return;
        }
        this.onChange.emit();
        this.onThumbValueChange.emit(increment);
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isActive = false;
        this.zIndex = 0;
    }
    /**
     * @return {?}
     */
    onFocusListener() {
        this.isActive = true;
        this.zIndex = 1;
    }
    /**
     * Show thumb label and ripple.
     * @return {?}
     */
    showThumbIndicators() {
        this.toggleThumbIndicators(true);
    }
    /**
     * Hide thumb label and ripple.
     * @return {?}
     */
    hideThumbIndicators() {
        this.toggleThumbIndicators(false);
    }
    /**
     * @private
     * @param {?} mouseX
     * @return {?}
     */
    updateThumbValue(mouseX) {
        /** @type {?} */
        const updateValue = this.calculateTrackUpdate(mouseX);
        if (this.isActive && updateValue !== 0) {
            this.onThumbValueChange.emit(updateValue);
        }
    }
    /**
     * @private
     * @param {?} mouseX
     * @return {?}
     */
    calculateTrackUpdate(mouseX) {
        /** @type {?} */
        const scaleX = mouseX - this.thumbPositionX;
        /** @type {?} */
        const stepDistanceCenter = this.stepDistance / 2;
        // If the thumb scale range (slider update) is less th√†n a half step,
        // the position stays the same.
        /** @type {?} */
        const scaleXPositive = Math.abs(scaleX);
        if (scaleXPositive < stepDistanceCenter) {
            return 0;
        }
        return this.stepToProceed(scaleX, this.stepDistance);
    }
    /**
     * @private
     * @param {?} scaleX
     * @param {?} stepDist
     * @return {?}
     */
    stepToProceed(scaleX, stepDist) {
        return Math.round(scaleX / stepDist) * this.step;
    }
    /**
     * @private
     * @param {?} visible
     * @return {?}
     */
    toggleThumbIndicators(visible) {
        this._isPressed = visible;
        if (!this.continuous) {
            this._isActive = visible;
        }
    }
}
IgxSliderThumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-thumb',
                template: "<div class=\"dot\"></div>\n"
            }] }
];
/** @nocollapse */
IgxSliderThumbComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxSliderThumbComponent.propDecorators = {
    value: [{ type: Input }],
    continuous: [{ type: Input }],
    thumbLabelVisibilityDuration: [{ type: Input }],
    disabled: [{ type: Input }],
    onPan: [{ type: Input }],
    stepDistance: [{ type: Input }],
    step: [{ type: Input }],
    templateRef: [{ type: Input }],
    context: [{ type: Input }],
    type: [{ type: Input }],
    onThumbValueChange: [{ type: Output }],
    onChange: [{ type: Output }],
    onHoverChange: [{ type: Output }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    zIndex: [{ type: HostBinding, args: ['attr.z-index',] }],
    thumbFromClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-from',] }],
    thumbToClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-to',] }],
    thumbFromActiveClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-from--active',] }],
    thumbToActiveClass: [{ type: HostBinding, args: ['class.igx-slider__thumb-to--active',] }],
    thumbPressedClass: [{ type: HostBinding, args: ['class.igx-slider__thumb--pressed',] }],
    onPinterEnter: [{ type: HostListener, args: ['pointerenter',] }],
    onPointerLeave: [{ type: HostListener, args: ['pointerleave',] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onBlur: [{ type: HostListener, args: ['blur',] }],
    onFocusListener: [{ type: HostListener, args: ['focus',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxSliderThumbComponent.prototype._isActive;
    /**
     * @type {?}
     * @private
     */
    IgxSliderThumbComponent.prototype._isPressed;
    /**
     * @type {?}
     * @private
     */
    IgxSliderThumbComponent.prototype._destroy$;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.isActive;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.value;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.continuous;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.thumbLabelVisibilityDuration;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.disabled;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.onPan;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.stepDistance;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.step;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.templateRef;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.context;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.type;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.onThumbValueChange;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.onChange;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.onHoverChange;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.tabindex;
    /** @type {?} */
    IgxSliderThumbComponent.prototype.zIndex;
    /**
     * @type {?}
     * @private
     */
    IgxSliderThumbComponent.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,