/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, HostBinding, ElementRef } from '@angular/core';
import { SliderHandle } from '../slider.common';
export class IgxThumbLabelComponent {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
    /**
     * @return {?}
     */
    get thumbFromClass() {
        return this.type === SliderHandle.FROM;
    }
    /**
     * @return {?}
     */
    get thumbToClass() {
        return this.type === SliderHandle.TO;
    }
    /**
     * @return {?}
     */
    get thumbFromActiveClass() {
        return this.type === SliderHandle.FROM && this.active;
    }
    /**
     * @return {?}
     */
    get thumbToActiveClass() {
        return this.type === SliderHandle.TO && this.active;
    }
    /**
     * @return {?}
     */
    get nativeElement() {
        return this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set active(val) {
        if (this.continuous) {
            return;
        }
        this._active = val;
    }
}
IgxThumbLabelComponent.decorators = [
    { type: Component, args: [{
                selector: 'igx-thumb-label',
                template: "<div class=\"label\">\n    <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : thumbFromDefaultTemplate; context: context\"></ng-container>\n</div>\n\n<ng-template #thumbFromDefaultTemplate>\n    {{ value }}\n</ng-template>\n"
            }] }
];
/** @nocollapse */
IgxThumbLabelComponent.ctorParameters = () => [
    { type: ElementRef }
];
IgxThumbLabelComponent.propDecorators = {
    value: [{ type: Input }],
    templateRef: [{ type: Input }],
    context: [{ type: Input }],
    type: [{ type: Input }],
    continuous: [{ type: Input }],
    thumbFromClass: [{ type: HostBinding, args: ['class.igx-slider__label-from',] }],
    thumbToClass: [{ type: HostBinding, args: ['class.igx-slider__label-to',] }],
    thumbFromActiveClass: [{ type: HostBinding, args: ['class.igx-slider__label-from--active',] }],
    thumbToActiveClass: [{ type: HostBinding, args: ['class.igx-slider__label-to--active',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxThumbLabelComponent.prototype._active;
    /** @type {?} */
    IgxThumbLabelComponent.prototype.value;
    /** @type {?} */
    IgxThumbLabelComponent.prototype.templateRef;
    /** @type {?} */
    IgxThumbLabelComponent.prototype.context;
    /** @type {?} */
    IgxThumbLabelComponent.prototype.type;
    /** @type {?} */
    IgxThumbLabelComponent.prototype.continuous;
    /**
     * @type {?}
     * @private
     */
    IgxThumbLabelComponent.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWItbGFiZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zbGlkZXIvbGFiZWwvdGh1bWItbGFiZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFZLEtBQUssRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFNaEQsTUFBTSxPQUFPLHNCQUFzQjs7OztJQXNDL0IsWUFBb0IsV0FBdUI7UUFBdkIsZ0JBQVcsR0FBWCxXQUFXLENBQVk7SUFBSSxDQUFDOzs7O0lBcEJoRCxJQUNXLGNBQWM7UUFDckIsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQyxJQUFJLENBQUM7SUFDM0MsQ0FBQzs7OztJQUVELElBQ1csWUFBWTtRQUNuQixPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDLEVBQUUsQ0FBQztJQUN6QyxDQUFDOzs7O0lBRUQsSUFDVyxvQkFBb0I7UUFDM0IsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMxRCxDQUFDOzs7O0lBRUQsSUFDVyxrQkFBa0I7UUFDekIsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN4RCxDQUFDOzs7O0lBSUQsSUFBVyxhQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFDMUMsQ0FBQzs7OztJQUVELElBQVcsTUFBTTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDOzs7OztJQUVELElBQVcsTUFBTSxDQUFDLEdBQVk7UUFDMUIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2pCLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO0lBQ3ZCLENBQUM7OztZQTFESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsdVBBQXlDO2FBQzVDOzs7O1lBTjhELFVBQVU7OztvQkFVcEUsS0FBSzswQkFHTCxLQUFLO3NCQUdMLEtBQUs7bUJBR0wsS0FBSzt5QkFHTCxLQUFLOzZCQUdMLFdBQVcsU0FBQyw4QkFBOEI7MkJBSzFDLFdBQVcsU0FBQyw0QkFBNEI7bUNBS3hDLFdBQVcsU0FBQyxzQ0FBc0M7aUNBS2xELFdBQVcsU0FBQyxvQ0FBb0M7Ozs7Ozs7SUFoQ2pELHlDQUF5Qjs7SUFFekIsdUNBQ3FCOztJQUVyQiw2Q0FDcUM7O0lBRXJDLHlDQUNvQjs7SUFFcEIsc0NBQzBCOztJQUUxQiw0Q0FDMkI7Ozs7O0lBc0JmLDZDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgTmdNb2R1bGUsIElucHV0LCBUZW1wbGF0ZVJlZiwgSG9zdEJpbmRpbmcsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNsaWRlckhhbmRsZSB9IGZyb20gJy4uL3NsaWRlci5jb21tb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC10aHVtYi1sYWJlbCcsXG4gICAgdGVtcGxhdGVVcmw6ICd0aHVtYi1sYWJlbC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4VGh1bWJMYWJlbENvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBfYWN0aXZlOiBib29sZWFuO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdmFsdWU6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgY29udGV4dDogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgdHlwZTogU2xpZGVySGFuZGxlO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgY29udGludW91czogYm9vbGVhbjtcblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuaWd4LXNsaWRlcl9fbGFiZWwtZnJvbScpXG4gICAgcHVibGljIGdldCB0aHVtYkZyb21DbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gU2xpZGVySGFuZGxlLkZST007XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc2xpZGVyX19sYWJlbC10bycpXG4gICAgcHVibGljIGdldCB0aHVtYlRvQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgPT09IFNsaWRlckhhbmRsZS5UTztcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1zbGlkZXJfX2xhYmVsLWZyb20tLWFjdGl2ZScpXG4gICAgcHVibGljIGdldCB0aHVtYkZyb21BY3RpdmVDbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gU2xpZGVySGFuZGxlLkZST00gJiYgdGhpcy5hY3RpdmU7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtc2xpZGVyX19sYWJlbC10by0tYWN0aXZlJylcbiAgICBwdWJsaWMgZ2V0IHRodW1iVG9BY3RpdmVDbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gU2xpZGVySGFuZGxlLlRPICYmIHRoaXMuYWN0aXZlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHsgfVxuXG4gICAgcHVibGljIGdldCBuYXRpdmVFbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgYWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgYWN0aXZlKHZhbDogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5jb250aW51b3VzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9hY3RpdmUgPSB2YWw7XG4gICAgfVxufVxuIl19