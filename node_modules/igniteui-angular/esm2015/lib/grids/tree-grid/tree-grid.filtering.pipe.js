/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { DataUtil } from '../../data-operations/data-util';
import { GridBaseAPIService } from '../api.service';
import { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
/**
 * @hidden
 */
export class TreeGridFilteringStrategy extends BaseFilteringStrategy {
    /**
     * @param {?} data
     * @param {?} expressionsTree
     * @param {?=} advancedExpressionsTree
     * @return {?}
     */
    filter(data, expressionsTree, advancedExpressionsTree) {
        return this.filterImpl(data, expressionsTree, advancedExpressionsTree, undefined);
    }
    /**
     * @private
     * @param {?} data
     * @param {?} expressionsTree
     * @param {?} advancedExpressionsTree
     * @param {?} parent
     * @return {?}
     */
    filterImpl(data, expressionsTree, advancedExpressionsTree, parent) {
        /** @type {?} */
        let i;
        /** @type {?} */
        let rec;
        /** @type {?} */
        const len = data.length;
        /** @type {?} */
        const res = [];
        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = DataUtil.cloneTreeGridRecord(data[i]);
            rec.parent = parent;
            if (rec.children) {
                /** @type {?} */
                const filteredChildren = this.filterImpl(rec.children, expressionsTree, advancedExpressionsTree, rec);
                rec.children = filteredChildren.length > 0 ? filteredChildren : null;
            }
            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {
                res.push(rec);
            }
            else if (rec.children && rec.children.length > 0) {
                rec.isFilteredOutParent = true;
                res.push(rec);
            }
        }
        return res;
    }
    /**
     * @protected
     * @param {?} rec
     * @param {?} fieldName
     * @return {?}
     */
    getFieldValue(rec, fieldName) {
        /** @type {?} */
        const hierarchicalRecord = (/** @type {?} */ (rec));
        return hierarchicalRecord.data[fieldName];
    }
}
/**
 * @hidden
 */
export class IgxTreeGridFilteringPipe {
    /**
     * @param {?} gridAPI
     */
    constructor(gridAPI) {
        this.gridAPI = (/** @type {?} */ (gridAPI));
    }
    /**
     * @param {?} hierarchyData
     * @param {?} expressionsTree
     * @param {?} filterStrategy
     * @param {?} advancedFilteringExpressionsTree
     * @param {?} id
     * @param {?} pipeTrigger
     * @param {?} filteringPipeTrigger
     * @return {?}
     */
    transform(hierarchyData, expressionsTree, filterStrategy, advancedFilteringExpressionsTree, id, pipeTrigger, filteringPipeTrigger) {
        /** @type {?} */
        const grid = this.gridAPI.grid;
        /** @type {?} */
        const state = {
            expressionsTree: expressionsTree,
            advancedExpressionsTree: advancedFilteringExpressionsTree,
            strategy: new TreeGridFilteringStrategy()
        };
        if (filterStrategy) {
            state.strategy = filterStrategy;
        }
        this.resetFilteredOutProperty(grid.records);
        if (FilteringExpressionsTree.empty(state.expressionsTree) && FilteringExpressionsTree.empty(state.advancedExpressionsTree)) {
            grid.filteredData = null;
            return hierarchyData;
        }
        /** @type {?} */
        const result = this.filter(hierarchyData, state);
        /** @type {?} */
        const filteredData = [];
        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);
        grid.filteredData = filteredData;
        return result;
    }
    /**
     * @private
     * @param {?} map
     * @return {?}
     */
    resetFilteredOutProperty(map) {
        /** @type {?} */
        const keys = Array.from(map.keys());
        for (let i = 0; i < keys.length; i++) {
            map.get(keys[i]).isFilteredOutParent = undefined;
        }
    }
    /**
     * @private
     * @param {?} grid
     * @param {?} data
     * @param {?} expandedStates
     * @param {?} filteredData
     * @return {?}
     */
    expandAllRecursive(grid, data, expandedStates, filteredData) {
        for (let i = 0; i < data.length; i++) {
            /** @type {?} */
            const rec = data[i];
            filteredData.push(rec.data);
            this.updateNonProcessedRecord(grid, rec);
            if (rec.children && rec.children.length > 0) {
                expandedStates.set(rec.rowID, true);
                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);
            }
        }
    }
    /**
     * @private
     * @param {?} grid
     * @param {?} record
     * @return {?}
     */
    updateNonProcessedRecord(grid, record) {
        /** @type {?} */
        const rec = grid.records.get(record.rowID);
        rec.isFilteredOutParent = record.isFilteredOutParent;
    }
    /**
     * @private
     * @param {?} data
     * @param {?} state
     * @return {?}
     */
    filter(data, state) {
        return state.strategy.filter(data, state.expressionsTree, state.advancedExpressionsTree);
    }
}
IgxTreeGridFilteringPipe.decorators = [
    { type: Pipe, args: [{
                name: 'treeGridFiltering',
                pure: true
            },] }
];
/** @nocollapse */
IgxTreeGridFilteringPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxTreeGridFilteringPipe.prototype.gridAPI;
}
//# sourceMappingURL=data:application/json;base64,