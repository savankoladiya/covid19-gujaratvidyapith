/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';
import { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';
import { IgxColumnMovingDragDirective } from '../grid.common';
import { SortingDirection } from '../../data-operations/sorting-expression.interface';
/**
 * @hidden
 */
export class IgxGroupByRowTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
IgxGroupByRowTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxGroupByRow]'
            },] }
];
/** @nocollapse */
IgxGroupByRowTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    IgxGroupByRowTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
export class IgxRowExpandedIndicatorDirective {
}
IgxRowExpandedIndicatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxRowExpandedIndicator]'
            },] }
];
/**
 * @hidden
 */
export class IgxRowCollapsedIndicatorDirective {
}
IgxRowCollapsedIndicatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxRowCollapsedIndicator]'
            },] }
];
/**
 * @hidden
 */
export class IgxHeaderExpandIndicatorDirective {
}
IgxHeaderExpandIndicatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxHeaderExpandedIndicator]'
            },] }
];
/**
 * @hidden
 */
export class IgxHeaderCollapseIndicatorDirective {
}
IgxHeaderCollapseIndicatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxHeaderCollapsedIndicator]'
            },] }
];
/**
 * @hidden
 */
export class IgxGroupAreaDropDirective extends IgxDropDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} zone
     */
    constructor(elementRef, renderer, zone) {
        super(elementRef, renderer, zone);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.zone = zone;
        this.hovered = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragEnter(event) {
        /** @type {?} */
        const drag = event.detail.owner;
        /** @type {?} */
        const column = drag.column;
        if (!this.columnBelongsToGrid(column)) {
            return;
        }
        /** @type {?} */
        const grid = (/** @type {?} */ (column.grid));
        /** @type {?} */
        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;
        if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {
            drag.icon.innerText = 'group_work';
            this.hovered = true;
        }
        else {
            drag.icon.innerText = 'block';
            this.hovered = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragLeave(event) {
        /** @type {?} */
        const drag = event.detail.owner;
        /** @type {?} */
        const column = drag.column;
        if (!this.columnBelongsToGrid(column)) {
            return;
        }
        event.detail.owner.icon.innerText = 'block';
        this.hovered = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragDrop(event) {
        /** @type {?} */
        const drag = event.detail.owner;
        if (drag instanceof IgxColumnMovingDragDirective) {
            /** @type {?} */
            const column = drag.column;
            if (!this.columnBelongsToGrid(column)) {
                return;
            }
            /** @type {?} */
            const grid = (/** @type {?} */ (column.grid));
            /** @type {?} */
            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;
            if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {
                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,
                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });
            }
        }
    }
    /**
     * @private
     * @param {?} elem
     * @param {?} attr
     * @return {?}
     */
    closestParentByAttr(elem, attr) {
        return elem.hasAttribute(attr) ?
            elem :
            this.closestParentByAttr(elem.parentElement, attr);
    }
    /**
     * @private
     * @param {?} column
     * @return {?}
     */
    columnBelongsToGrid(column) {
        /** @type {?} */
        const elem = this.elementRef.nativeElement;
        /** @type {?} */
        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');
        if (!column) {
            return false;
        }
        else {
            /** @type {?} */
            const grid = (/** @type {?} */ (column.grid));
            if (!grid || grid.id !== closestGridID) {
                return false;
            }
            return true;
        }
    }
}
IgxGroupAreaDropDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxGroupAreaDrop]'
            },] }
];
/** @nocollapse */
IgxGroupAreaDropDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
IgxGroupAreaDropDirective.propDecorators = {
    hovered: [{ type: HostBinding, args: ['class.igx-drop-area--hover',] }]
};
if (false) {
    /** @type {?} */
    IgxGroupAreaDropDirective.prototype.hovered;
    /**
     * @type {?}
     * @private
     */
    IgxGroupAreaDropDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    IgxGroupAreaDropDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    IgxGroupAreaDropDirective.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,