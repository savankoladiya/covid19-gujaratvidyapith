/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { GridBaseAPIService } from '../api.service';
import { DataUtil } from '../../data-operations/data-util';
import { cloneArray } from '../../core/utils';
export class IgxGridAPIService extends GridBaseAPIService {
    /**
     * @param {?} expression
     * @return {?}
     */
    groupBy(expression) {
        /** @type {?} */
        const groupingState = cloneArray(this.grid.groupingExpressions);
        /** @type {?} */
        const sortingState = cloneArray(this.grid.sortingExpressions);
        this.prepare_sorting_expression([sortingState, groupingState], expression);
        this.grid.groupingExpressions = groupingState;
        this.arrange_sorting_expressions();
    }
    /**
     * @param {?} expressions
     * @return {?}
     */
    groupBy_multiple(expressions) {
        /** @type {?} */
        const groupingState = cloneArray(this.grid.groupingExpressions);
        /** @type {?} */
        const sortingState = cloneArray(this.grid.sortingExpressions);
        for (const each of expressions) {
            this.prepare_sorting_expression([sortingState, groupingState], each);
        }
        this.grid.groupingExpressions = groupingState;
        this.arrange_sorting_expressions();
    }
    /**
     * @param {?=} name
     * @return {?}
     */
    clear_groupby(name) {
        /** @type {?} */
        const groupingState = cloneArray(this.grid.groupingExpressions);
        /** @type {?} */
        const sortingState = cloneArray(this.grid.sortingExpressions);
        if (name) {
            /** @type {?} */
            const names = typeof name === 'string' ? [name] : name;
            /** @type {?} */
            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);
            /** @type {?} */
            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);
            this.grid.groupingExpressions = groupedCols;
            this.grid.sortingExpressions = newSortingExpr;
            names.forEach((colName) => {
                /** @type {?} */
                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);
                /** @type {?} */
                const grpExpandState = this.grid.groupingExpansionState;
                /* remove expansion states related to the cleared group
                and all with deeper hierarchy than the cleared group */
                this.grid.groupingExpansionState = grpExpandState
                    .filter((val) => {
                    return val.hierarchy && val.hierarchy.length <= grExprIndex;
                });
            });
        }
        else {
            // clear all
            this.grid.groupingExpressions = [];
            this.grid.groupingExpansionState = [];
            for (const grExpr of groupingState) {
                /** @type {?} */
                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);
                if (sortExprIndex > -1) {
                    sortingState.splice(sortExprIndex, 1);
                }
            }
            this.grid.sortingExpressions = sortingState;
        }
    }
    /**
     * @param {?} groupRow
     * @return {?}
     */
    groupBy_get_expanded_for_group(groupRow) {
        /** @type {?} */
        const grState = this.grid.groupingExpansionState;
        /** @type {?} */
        const hierarchy = DataUtil.getHierarchy(groupRow);
        return grState.find((state) => DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));
    }
    /**
     * @param {?} groupRow
     * @param {?} rowID
     * @return {?}
     */
    groupBy_is_row_in_group(groupRow, rowID) {
        /** @type {?} */
        const grid = this.grid;
        /** @type {?} */
        let rowInGroup = false;
        groupRow.records.forEach(row => {
            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {
                rowInGroup = true;
            }
        });
        return rowInGroup;
    }
    /**
     * @param {?} groupRow
     * @return {?}
     */
    groupBy_toggle_group(groupRow) {
        /** @type {?} */
        const grid = this.grid;
        if (grid.crudService.isInEditMode) {
            grid.endEdit(true);
        }
        /** @type {?} */
        const expansionState = grid.groupingExpansionState;
        /** @type {?} */
        const state = this.groupBy_get_expanded_for_group(groupRow);
        if (state) {
            state.expanded = !state.expanded;
        }
        else {
            expansionState.push({
                expanded: !grid.groupsExpanded,
                hierarchy: DataUtil.getHierarchy(groupRow)
            });
        }
        this.grid.groupingExpansionState = [...expansionState];
        if (grid.rowEditable) {
            grid.repositionRowEditingOverlay(grid.rowInEditMode);
        }
    }
    /**
     * @param {?} groupRow
     * @return {?}
     */
    groupBy_fully_expand_group(groupRow) {
        /** @type {?} */
        const state = this.groupBy_get_expanded_for_group(groupRow);
        /** @type {?} */
        const expanded = state ? state.expanded : this.grid.groupsExpanded;
        if (!expanded) {
            this.groupBy_toggle_group(groupRow);
        }
        if (groupRow.groupParent) {
            this.groupBy_fully_expand_group(groupRow.groupParent);
        }
    }
    /**
     * @protected
     * @param {?} fieldName
     * @return {?}
     */
    remove_grouping_expression(fieldName) {
        /** @type {?} */
        const groupingExpressions = this.grid.groupingExpressions;
        /** @type {?} */
        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);
        if (index !== -1) {
            groupingExpressions.splice(index, 1);
        }
    }
    /**
     * @return {?}
     */
    arrange_sorting_expressions() {
        /** @type {?} */
        const groupingState = this.grid.groupingExpressions;
        this.grid.sortingExpressions.sort((a, b) => {
            /** @type {?} */
            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);
            /** @type {?} */
            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);
            if (groupExprA && groupExprB) {
                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;
            }
            else if (groupExprA) {
                return -1;
            }
            else if (groupExprB) {
                return 1;
            }
            else {
                return 0;
            }
        });
    }
    /**
     * @param {?} gRow
     * @return {?}
     */
    get_groupBy_record_id(gRow) {
        /** @type {?} */
        let recordId = '{ ';
        /** @type {?} */
        const hierrarchy = DataUtil.getHierarchy(gRow);
        for (let i = 0; i < hierrarchy.length; i++) {
            /** @type {?} */
            const groupByKey = hierrarchy[i];
            recordId += `'${groupByKey.fieldName}': '${groupByKey.value}'`;
            if (i < hierrarchy.length - 1) {
                recordId += ', ';
            }
        }
        recordId += ' }';
        return recordId;
    }
}
//# sourceMappingURL=data:application/json;base64,