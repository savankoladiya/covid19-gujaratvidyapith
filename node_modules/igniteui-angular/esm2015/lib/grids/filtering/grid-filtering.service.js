/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { IgxIconService } from '../../icon/icon.service';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import icons from './svgIcons';
import { FilteringLogic } from '../../data-operations/filtering-expression.interface';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { IgxDatePipeComponent } from '../grid.common';
import { GridBaseAPIService } from '../api.service';
/** @type {?} */
const FILTERING_ICONS_FONT_SET = 'filtering-icons';
/**
 * @hidden
 */
export class ExpressionUI {
    constructor() {
        this.isSelected = false;
        this.isVisible = true;
    }
}
if (false) {
    /** @type {?} */
    ExpressionUI.prototype.expression;
    /** @type {?} */
    ExpressionUI.prototype.beforeOperator;
    /** @type {?} */
    ExpressionUI.prototype.afterOperator;
    /** @type {?} */
    ExpressionUI.prototype.isSelected;
    /** @type {?} */
    ExpressionUI.prototype.isVisible;
}
/**
 * @hidden
 */
export class IgxFilteringService {
    /**
     * @param {?} gridAPI
     * @param {?} iconService
     */
    constructor(gridAPI, iconService) {
        this.gridAPI = gridAPI;
        this.iconService = iconService;
        this.columnsWithComplexFilter = new Set();
        this.areEventsSubscribed = false;
        this.destroy$ = new Subject();
        this.isFiltering = false;
        this.columnToExpressionsMap = new Map();
        this.columnStartIndex = -1;
        this._filterIconsRegistered = false;
        this.isFilterRowVisible = false;
        this.filteredColumn = null;
        this.selectedExpression = null;
        this.columnToFocus = null;
        this.shouldFocusNext = false;
        this.columnToMoreIconHidden = new Map();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @return {?}
     */
    get displayContainerWidth() {
        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);
    }
    /**
     * @return {?}
     */
    get displayContainerScrollLeft() {
        return this.grid.headerContainer.scrollPosition;
    }
    /**
     * @return {?}
     */
    get areAllColumnsInView() {
        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10) === 0;
    }
    /**
     * @return {?}
     */
    get unpinnedFilterableColumns() {
        return this.grid.unpinnedColumns.filter(col => !col.columnGroup && col.filterable);
    }
    /**
     * @return {?}
     */
    get unpinnedColumns() {
        return this.grid.unpinnedColumns.filter(col => !col.columnGroup);
    }
    /**
     * @return {?}
     */
    get datePipe() {
        if (!this._datePipe) {
            this._datePipe = new IgxDatePipeComponent(this.grid.locale);
        }
        return this._datePipe;
    }
    /**
     * Subscribe to grid's events.
     * @return {?}
     */
    subscribeToEvents() {
        if (!this.areEventsSubscribed) {
            this.areEventsSubscribed = true;
            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs) => {
                this.updateFilteringCell(eventArgs.column);
            });
            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs) => {
                if (eventArgs.startIndex !== this.columnStartIndex) {
                    this.columnStartIndex = eventArgs.startIndex;
                    this.grid.filterCellList.forEach((filterCell) => {
                        filterCell.updateFilterCellArea();
                    });
                }
                if (this.columnToFocus) {
                    this.focusFilterCellChip(this.columnToFocus, false);
                    this.columnToFocus = null;
                }
            });
            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {
                this.grid.filterCellList.forEach((filterCell) => {
                    filterCell.updateFilterCellArea();
                });
            });
            this.grid.onColumnVisibilityChanged.pipe(takeUntil(this.destroy$)).subscribe((eventArgs) => {
                if (this.grid.filteringRow && this.grid.filteringRow.column === eventArgs.column) {
                    this.grid.filteringRow.close();
                }
            });
        }
    }
    /**
     * Internal method to create expressionsTree and filter grid used in both filter modes.
     * @param {?} field
     * @param {?=} expressions
     * @return {?}
     */
    filterInternal(field, expressions = null) {
        this.isFiltering = true;
        /** @type {?} */
        let expressionsTree;
        if (expressions instanceof FilteringExpressionsTree) {
            expressionsTree = expressions;
        }
        else {
            expressionsTree = this.createSimpleFilteringTree(field, expressions);
        }
        if (expressionsTree.filteringOperands.length === 0) {
            this.clearFilter(field);
        }
        else {
            this.filter(field, null, expressionsTree);
        }
        this.isFiltering = false;
    }
    /**
     * Execute filtering on the grid.
     * @param {?} field
     * @param {?} value
     * @param {?=} conditionOrExpressionTree
     * @param {?=} ignoreCase
     * @return {?}
     */
    filter(field, value, conditionOrExpressionTree, ignoreCase) {
        /** @type {?} */
        const col = this.gridAPI.get_column_by_name(field);
        /** @type {?} */
        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);
        if (conditionOrExpressionTree) {
            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);
        }
        else {
            /** @type {?} */
            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);
            if (!expressionsTreeForColumn) {
                throw new Error('Invalid condition or Expression Tree!');
            }
            else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {
                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);
            }
            else {
                /** @type {?} */
                const expressionForColumn = (/** @type {?} */ (expressionsTreeForColumn));
                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);
            }
        }
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(() => this.grid.onFilteringDone.emit(col.filteringExpressionsTree));
    }
    /**
     * Clear the filter of a given column.
     * @param {?} field
     * @return {?}
     */
    clearFilter(field) {
        if (field) {
            /** @type {?} */
            const column = this.gridAPI.get_column_by_name(field);
            if (!column) {
                return;
            }
        }
        this.isFiltering = true;
        this.gridAPI.clear_filter(field);
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(() => this.grid.onFilteringDone.emit(null));
        if (field) {
            /** @type {?} */
            const expressions = this.getExpressions(field);
            expressions.length = 0;
        }
        this.isFiltering = false;
    }
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     * @param {?} value
     * @param {?} condition
     * @param {?=} ignoreCase
     * @return {?}
     */
    filterGlobal(value, condition, ignoreCase) {
        this.gridAPI.filter_global(value, condition, ignoreCase);
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(() => this.grid.onFilteringDone.emit(this.grid.filteringExpressionsTree));
    }
    /**
     * Register filtering SVG icons in the icon service.
     * @return {?}
     */
    registerSVGIcons() {
        if (!this._filterIconsRegistered) {
            for (const icon of icons) {
                if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {
                    this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);
                }
            }
            this._filterIconsRegistered = true;
        }
    }
    /**
     * Returns the ExpressionUI array for a given column.
     * @param {?} columnId
     * @return {?}
     */
    getExpressions(columnId) {
        if (!this.columnToExpressionsMap.has(columnId)) {
            /** @type {?} */
            const column = this.grid.columns.find((col) => col.field === columnId);
            /** @type {?} */
            const expressionUIs = new Array();
            if (column) {
                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);
                this.columnToExpressionsMap.set(columnId, expressionUIs);
            }
            return expressionUIs;
        }
        return this.columnToExpressionsMap.get(columnId);
    }
    /**
     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.
     * @return {?}
     */
    refreshExpressions() {
        if (!this.isFiltering) {
            this.columnsWithComplexFilter.clear();
            this.columnToExpressionsMap.forEach((value, key) => {
                /** @type {?} */
                const column = this.grid.columns.find((col) => col.field === key);
                if (column) {
                    value.length = 0;
                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);
                    /** @type {?} */
                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);
                    if (isComplex) {
                        this.columnsWithComplexFilter.add(key);
                    }
                    this.updateFilteringCell(column);
                }
                else {
                    this.columnToExpressionsMap.delete(key);
                }
            });
        }
    }
    /**
     * Remove an ExpressionUI for a given column.
     * @param {?} columnId
     * @param {?} indexToRemove
     * @return {?}
     */
    removeExpression(columnId, indexToRemove) {
        /** @type {?} */
        const expressionsList = this.getExpressions(columnId);
        if (indexToRemove === 0 && expressionsList.length > 1) {
            expressionsList[1].beforeOperator = null;
        }
        else if (indexToRemove === expressionsList.length - 1) {
            expressionsList[indexToRemove - 1].afterOperator = null;
        }
        else {
            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;
            expressionsList[0].beforeOperator = null;
            expressionsList[expressionsList.length - 1].afterOperator = null;
        }
        expressionsList.splice(indexToRemove, 1);
    }
    /**
     * Generate filtering tree for a given column from existing ExpressionUIs.
     * @param {?} columnId
     * @param {?=} expressionUIList
     * @return {?}
     */
    createSimpleFilteringTree(columnId, expressionUIList = null) {
        /** @type {?} */
        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);
        /** @type {?} */
        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);
        /** @type {?} */
        let currAndBranch;
        /** @type {?} */
        let currExpressionUI;
        for (let i = 0; i < expressionsList.length; i++) {
            currExpressionUI = expressionsList[i];
            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {
                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {
                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);
                    expressionsTree.filteringOperands.push(currAndBranch);
                }
                continue;
            }
            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||
                currExpressionUI.beforeOperator === FilteringLogic.Or) &&
                currExpressionUI.afterOperator === FilteringLogic.And) {
                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);
                expressionsTree.filteringOperands.push(currAndBranch);
                currAndBranch.filteringOperands.push(currExpressionUI.expression);
            }
            else if (currExpressionUI.beforeOperator === FilteringLogic.And) {
                currAndBranch.filteringOperands.push(currExpressionUI.expression);
            }
            else {
                expressionsTree.filteringOperands.push(currExpressionUI.expression);
                currAndBranch = null;
            }
        }
        return expressionsTree;
    }
    /**
     * Returns whether a complex filter is applied to a given column.
     * @param {?} columnId
     * @return {?}
     */
    isFilterComplex(columnId) {
        if (this.columnsWithComplexFilter.has(columnId)) {
            return true;
        }
        /** @type {?} */
        const column = this.grid.columns.find((col) => col.field === columnId);
        /** @type {?} */
        const isComplex = column && this.isFilteringTreeComplex(column.filteringExpressionsTree);
        if (isComplex) {
            this.columnsWithComplexFilter.add(columnId);
        }
        return isComplex;
    }
    /**
     * Returns the string representation of the FilteringLogic operator.
     * @param {?} operator
     * @return {?}
     */
    getOperatorAsString(operator) {
        if (operator === 0) {
            return this.grid.resourceStrings.igx_grid_filter_operator_and;
        }
        else {
            return this.grid.resourceStrings.igx_grid_filter_operator_or;
        }
    }
    /**
     * Generate the label of a chip from a given filtering expression.
     * @param {?} expression
     * @return {?}
     */
    getChipLabel(expression) {
        if (expression.condition.isUnary) {
            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;
        }
        else if (expression.searchVal instanceof Date) {
            return this.datePipe.transform(expression.searchVal, this.grid.locale);
        }
        else {
            return expression.searchVal;
        }
    }
    /**
     * Updates the content of a filterCell.
     * @param {?} column
     * @return {?}
     */
    updateFilteringCell(column) {
        /** @type {?} */
        const filterCell = column.filterCell;
        if (filterCell) {
            filterCell.updateFilterCellArea();
        }
    }
    /**
     * Focus a chip in a filterCell.
     * @param {?} column
     * @param {?} focusFirst
     * @return {?}
     */
    focusFilterCellChip(column, focusFirst) {
        /** @type {?} */
        const filterCell = column.filterCell;
        if (filterCell) {
            filterCell.focusChip(focusFirst);
        }
    }
    /**
     * Focus the close button in the filtering row.
     * @return {?}
     */
    focusFilterRowCloseButton() {
        this.grid.filteringRow.closeButton.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    get filteredData() {
        return this.grid.filteredData;
    }
    /**
     * Scrolls to a filterCell.
     * @param {?} column
     * @param {?} shouldFocusNext
     * @return {?}
     */
    scrollToFilterCell(column, shouldFocusNext) {
        this.grid.nativeElement.focus({ preventScroll: true });
        this.columnToFocus = column;
        this.shouldFocusNext = shouldFocusNext;
        /** @type {?} */
        let currentColumnRight = 0;
        /** @type {?} */
        let currentColumnLeft = 0;
        for (let index = 0; index < this.unpinnedColumns.length; index++) {
            currentColumnRight += parseInt(this.unpinnedColumns[index].width, 10);
            if (this.unpinnedColumns[index] === column) {
                currentColumnLeft = currentColumnRight - parseInt(this.unpinnedColumns[index].width, 10);
                break;
            }
        }
        /** @type {?} */
        const forOfDir = this.grid.headerContainer;
        /** @type {?} */
        const width = this.displayContainerWidth + this.displayContainerScrollLeft;
        if (shouldFocusNext) {
            forOfDir.scrollPosition += currentColumnRight - width;
        }
        else {
            forOfDir.scrollPosition = currentColumnLeft;
        }
    }
    /**
     * @private
     * @param {?} expressions
     * @return {?}
     */
    isFilteringTreeComplex(expressions) {
        if (!expressions) {
            return false;
        }
        if (expressions instanceof FilteringExpressionsTree) {
            /** @type {?} */
            const expressionsTree = (/** @type {?} */ (expressions));
            if (expressionsTree.operator === FilteringLogic.Or) {
                /** @type {?} */
                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);
                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.
                return andOperatorsCount > 1;
            }
            /** @type {?} */
            let isComplex = false;
            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {
                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);
            }
            return isComplex;
        }
        return false;
    }
    /**
     * @private
     * @param {?} expressions
     * @return {?}
     */
    getChildAndOperatorsCount(expressions) {
        /** @type {?} */
        let count = 0;
        /** @type {?} */
        let operand;
        for (let i = 0; i < expressions.filteringOperands.length; i++) {
            operand = expressions[i];
            if (operand instanceof FilteringExpressionsTree) {
                if (operand.operator === FilteringLogic.And) {
                    count++;
                }
                count = count + this.getChildAndOperatorsCount(operand);
            }
        }
        return count;
    }
    /**
     * @param {?} expressions
     * @param {?} operator
     * @param {?} expressionsUIs
     * @return {?}
     */
    generateExpressionsList(expressions, operator, expressionsUIs) {
        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);
        // The beforeOperator of the first expression and the afterOperator of the last expression should be null
        if (expressionsUIs.length) {
            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;
        }
    }
    /**
     * @private
     * @param {?} expressions
     * @param {?} operator
     * @param {?} expressionsUIs
     * @return {?}
     */
    generateExpressionsListRecursive(expressions, operator, expressionsUIs) {
        if (!expressions) {
            return;
        }
        if (expressions instanceof FilteringExpressionsTree) {
            /** @type {?} */
            const expressionsTree = (/** @type {?} */ (expressions));
            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {
                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);
            }
            if (expressionsUIs.length) {
                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;
            }
        }
        else {
            /** @type {?} */
            const exprUI = new ExpressionUI();
            exprUI.expression = (/** @type {?} */ (expressions));
            exprUI.afterOperator = operator;
            /** @type {?} */
            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];
            if (prevExprUI) {
                exprUI.beforeOperator = prevExprUI.afterOperator;
            }
            expressionsUIs.push(exprUI);
        }
    }
    /**
     * @param {?} expressionTree
     * @return {?}
     */
    isFilteringExpressionsTreeEmpty(expressionTree) {
        if (FilteringExpressionsTree.empty(expressionTree)) {
            return true;
        }
        /** @type {?} */
        let expr;
        for (let i = 0; i < expressionTree.filteringOperands.length; i++) {
            expr = expressionTree.filteringOperands[i];
            if ((expr instanceof FilteringExpressionsTree)) {
                /** @type {?} */
                const exprTree = (/** @type {?} */ (expr));
                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        return true;
    }
}
IgxFilteringService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
IgxFilteringService.ctorParameters = () => [
    { type: GridBaseAPIService },
    { type: IgxIconService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.columnsWithComplexFilter;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.areEventsSubscribed;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.isFiltering;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.columnToExpressionsMap;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype._datePipe;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.columnStartIndex;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype._filterIconsRegistered;
    /** @type {?} */
    IgxFilteringService.prototype.gridId;
    /** @type {?} */
    IgxFilteringService.prototype.isFilterRowVisible;
    /** @type {?} */
    IgxFilteringService.prototype.filteredColumn;
    /** @type {?} */
    IgxFilteringService.prototype.selectedExpression;
    /** @type {?} */
    IgxFilteringService.prototype.columnToFocus;
    /** @type {?} */
    IgxFilteringService.prototype.shouldFocusNext;
    /** @type {?} */
    IgxFilteringService.prototype.columnToMoreIconHidden;
    /** @type {?} */
    IgxFilteringService.prototype.grid;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.gridAPI;
    /**
     * @type {?}
     * @private
     */
    IgxFilteringService.prototype.iconService;
}
//# sourceMappingURL=data:application/json;base64,