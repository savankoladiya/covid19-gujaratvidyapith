/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SimpleChange } from '@angular/core';
/**
 * @hidden
 * @return {?}
 */
export function WatchChanges() {
    return (target, key, propDesc) => {
        /** @type {?} */
        const privateKey = '_' + key.toString();
        propDesc = propDesc || {
            configurable: true,
            enumerable: true,
        };
        propDesc.get = propDesc.get || (function () { return this[privateKey]; });
        /** @type {?} */
        const originalSetter = propDesc.set || (function (val) { this[privateKey] = val; });
        propDesc.set = function (val) {
            /** @type {?} */
            const init = this._init;
            /** @type {?} */
            const oldValue = this[key];
            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {
                originalSetter.call(this, val);
                if (this.ngOnChanges && !init) {
                    // in case wacthed prop changes trigger ngOnChanges manually
                    /** @type {?} */
                    const changes = {
                        [key]: new SimpleChange(oldValue, val, false)
                    };
                    this.ngOnChanges(changes);
                }
            }
        };
        return propDesc;
    };
}
/**
 * @return {?}
 */
export function WatchColumnChanges() {
    return (target, key, propDesc) => {
        /** @type {?} */
        const privateKey = '_' + key.toString();
        propDesc = propDesc || {
            configurable: true,
            enumerable: true,
        };
        propDesc.get = propDesc.get || (function () { return this[privateKey]; });
        /** @type {?} */
        const originalSetter = propDesc.set || (function (val) { this[privateKey] = val; });
        propDesc.set = function (val) {
            /** @type {?} */
            const init = this._init;
            /** @type {?} */
            const oldValue = this[key];
            originalSetter.call(this, val);
            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {
                if (this.rowIslandAPI.rowIsland) {
                    this.rowIslandAPI.rowIsland.updateColumnList();
                }
            }
        };
        return propDesc;
    };
}
/**
 * @param {?=} repaint
 * @return {?}
 */
export function notifyChanges(repaint = false) {
    return (_, key, propDesc) => {
        /** @type {?} */
        const privateKey = `__${key}`;
        propDesc = propDesc || {
            enumerable: true,
            configurable: true
        };
        /** @type {?} */
        const originalSetter = propDesc ? propDesc.set : null;
        propDesc.get = propDesc.get || (function () { return this[privateKey]; });
        propDesc.set = function (newValue) {
            if (originalSetter) {
                originalSetter.call(this, newValue);
                if (this.grid) {
                    this.grid.notifyChanges(repaint);
                }
            }
            else {
                if (newValue === this[key]) {
                    return;
                }
                this[privateKey] = newValue;
                if (this.grid) {
                    this.grid.notifyChanges(repaint);
                }
            }
        };
        return (/** @type {?} */ (propDesc));
    };
}
//# sourceMappingURL=data:application/json;base64,