/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { GridBaseAPIService } from './api.service';
import { DataUtil } from '../data-operations/data-util';
import { cloneArray } from '../core/utils';
/**
 * @hidden
 * \@internal
 */
export class IgxGridCellStyleClassesPipe {
    /**
     * @param {?} cssClasses
     * @param {?} value
     * @param {?} data
     * @param {?} field
     * @param {?} index
     * @return {?}
     */
    transform(cssClasses, value, data, field, index) {
        if (!cssClasses) {
            return '';
        }
        /** @type {?} */
        const result = [];
        for (const cssClass of Object.keys(cssClasses)) {
            /** @type {?} */
            const callbackOrValue = cssClasses[cssClass];
            /** @type {?} */
            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field, value, index) : callbackOrValue;
            if (apply) {
                result.push(cssClass);
            }
        }
        return result.join(' ');
    }
}
IgxGridCellStyleClassesPipe.decorators = [
    { type: Pipe, args: [{
                name: 'igxCellStyleClasses'
            },] }
];
/**
 * @hidden
 * \@internal
 */
export class IgxGridCellStylesPipe {
    /**
     * @param {?} styles
     * @param {?} value
     * @param {?} data
     * @param {?} field
     * @param {?} index
     * @return {?}
     */
    transform(styles, value, data, field, index) {
        /** @type {?} */
        const css = {};
        if (!styles) {
            return css;
        }
        for (const prop of Object.keys(styles)) {
            /** @type {?} */
            const res = styles[prop];
            css[prop] = typeof res === 'function' ? res(data, field, value, index) : res;
        }
        return css;
    }
}
IgxGridCellStylesPipe.decorators = [
    { type: Pipe, args: [{
                name: 'igxCellStyles'
            },] }
];
/**
 * @hidden
 * \@internal
 */
export class IgxGridNotGroupedPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return value.filter(item => !item.columnGroup);
    }
}
IgxGridNotGroupedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'igxNotGrouped'
            },] }
];
export class IgxGridTopLevelColumns {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return value.filter(item => item.level === 0);
    }
}
IgxGridTopLevelColumns.decorators = [
    { type: Pipe, args: [{
                name: 'igxTopLevel'
            },] }
];
/**
 * @hidden
 */
export class IgxGridFilterConditionPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return value.split(/(?=[A-Z])/).join(' ');
    }
}
IgxGridFilterConditionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'filterCondition',
                pure: true
            },] }
];
/**
 * @hidden
 */
export class IgxGridTransactionPipe {
    /**
     * @param {?} gridAPI
     */
    constructor(gridAPI) {
        this.gridAPI = gridAPI;
    }
    /**
     * @param {?} collection
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    transform(collection, id, pipeTrigger) {
        /** @type {?} */
        const grid = this.gridAPI.grid;
        if (grid.transactions.enabled) {
            /** @type {?} */
            const result = DataUtil.mergeTransactions(cloneArray(collection), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
            return result;
        }
        return collection;
    }
}
IgxGridTransactionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'gridTransaction',
                pure: true
            },] }
];
/** @nocollapse */
IgxGridTransactionPipe.ctorParameters = () => [
    { type: GridBaseAPIService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridTransactionPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
export class IgxGridPaginatorOptionsPipe {
    /**
     * @param {?} values
     * @return {?}
     */
    transform(values) {
        return Array.from(new Set([...values])).sort((a, b) => a - b);
    }
}
IgxGridPaginatorOptionsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'paginatorOptions',
                pure: true,
            },] }
];
export class IgxHasVisibleColumnsPipe {
    /**
     * @param {?} values
     * @param {?} hasVisibleColumns
     * @return {?}
     */
    transform(values, hasVisibleColumns) {
        if (!(values && values.length)) {
            return values;
        }
        return hasVisibleColumns ? values : [];
    }
}
IgxHasVisibleColumnsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'visibleColumns',
                pure: true
            },] }
];
//# sourceMappingURL=data:application/json;base64,