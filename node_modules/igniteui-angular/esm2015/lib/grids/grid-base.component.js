/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DOCUMENT } from '@angular/common';
import { ChangeDetectorRef, ComponentFactoryResolver, ContentChildren, ContentChild, ElementRef, EventEmitter, HostBinding, Inject, Input, IterableDiffers, NgZone, Output, QueryList, TemplateRef, ViewChild, ViewChildren, ViewContainerRef, InjectionToken, Optional, Injectable } from '@angular/core';
import ResizeObserver from 'resize-observer-polyfill';
import { Subject, combineLatest, pipe } from 'rxjs';
import { takeUntil, first, filter, throttleTime, map } from 'rxjs/operators';
import { cloneArray, isEdge, isNavigationKey, flatten, mergeObjects, isIE } from '../core/utils';
import { DataType } from '../data-operations/data-util';
import { FilteringLogic } from '../data-operations/filtering-expression.interface';
import { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';
import { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';
import { AbsoluteScrollStrategy, HorizontalAlignment, VerticalAlignment, IgxOverlayService, ConnectedPositioningStrategy, ContainerPositionStrategy } from '../services/index';
import { GridBaseAPIService } from './api.service';
import { IgxColumnComponent, IgxColumnGroupComponent } from './column.component';
import { DropPosition, RowEditPositionStrategy, IgxDecimalPipeComponent, IgxDatePipeComponent } from './grid.common';
import { IgxGridToolbarComponent } from './grid-toolbar.component';
import { IgxRowComponent } from './row.component';
import { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { FilteringExpressionsTree, FilteringExpressionsTreeType } from '../data-operations/filtering-expressions-tree';
import { TransactionType } from '../services/index';
import { IgxRowEditTemplateDirective, IgxRowEditTabStopDirective, IgxRowEditTextDirective, IgxRowEditActionsDirective } from './grid.rowEdit.directive';
import { IgxGridNavigationService } from './grid-navigation.service';
import { DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';
import { IgxFilteringService } from './filtering/grid-filtering.service';
import { WatchChanges } from './watch-changes';
import { IgxGridHeaderGroupComponent } from './grid-header-group.component';
import { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { IgxGridSummaryService } from './summaries/grid-summary.service';
import { IgxSummaryRowComponent } from './summaries/summary-row.component';
import { IgxGridSelectionService, IgxGridCRUDService, IgxRow, IgxCell, isChromium } from '../core/grid-selection';
import { DragScrollDirection } from './drag-select.directive';
import { IgxTemplateOutletDirective } from '../directives/template-outlet/template_outlet.directive';
import { IgxExcelStyleLoadingValuesTemplateDirective } from './filtering/excel-style/excel-style-search.component';
import { IgxExcelStyleSortingTemplateDirective, IgxExcelStylePinningTemplateDirective, IgxExcelStyleHidingTemplateDirective, IgxExcelStyleMovingTemplateDirective } from './filtering/excel-style/grid.excel-style-filtering.component';
import { IgxGridColumnResizerComponent } from './grid-column-resizer.component';
import { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';
import { CharSeparatedValueData } from '../services/csv/char-separated-value-data';
import { IgxAdvancedFilteringDialogComponent } from './filtering/advanced-filtering/advanced-filtering-dialog.component';
import { IgxColumnResizingService } from './grid-column-resizing.service';
import { IgxHeadSelectorDirective, IgxRowSelectorDirective } from './igx-row-selectors.module';
import { DeprecateProperty } from '../core/deprecateDecorators';
import { IgxRowExpandedIndicatorDirective, IgxRowCollapsedIndicatorDirective, IgxHeaderExpandIndicatorDirective, IgxHeaderCollapseIndicatorDirective } from './grid/grid.directives';
import { IgxRowDragGhostDirective, IgxDragIndicatorIconDirective } from './row-drag.directive';
import { GridKeydownTargetType, GridSelectionMode, GridSummaryPosition, GridSummaryCalculationMode, FilterMode } from './common/enums';
/** @type {?} */
const MINIMUM_COLUMN_WIDTH = 136;
/** @type {?} */
const FILTER_ROW_HEIGHT = 50;
// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.
// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.
// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.
// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,
// but in the same time we need to set row editing overlay outlet before opening the overlay itself.
/** @type {?} */
const MIN_ROW_EDITING_COUNT_THRESHOLD = 2;
/** @type {?} */
export const IgxGridTransaction = new InjectionToken('IgxGridTransaction');
/**
 * @record
 */
export function IGridClipboardEvent() { }
if (false) {
    /** @type {?} */
    IGridClipboardEvent.prototype.data;
    /** @type {?} */
    IGridClipboardEvent.prototype.cancel;
}
/**
 * @record
 */
export function IGridCellEventArgs() { }
if (false) {
    /** @type {?} */
    IGridCellEventArgs.prototype.cell;
    /** @type {?} */
    IGridCellEventArgs.prototype.event;
}
/**
 * @record
 */
export function IGridEditEventArgs() { }
if (false) {
    /** @type {?} */
    IGridEditEventArgs.prototype.rowID;
    /** @type {?|undefined} */
    IGridEditEventArgs.prototype.cellID;
    /** @type {?} */
    IGridEditEventArgs.prototype.oldValue;
    /** @type {?|undefined} */
    IGridEditEventArgs.prototype.newValue;
    /** @type {?|undefined} */
    IGridEditEventArgs.prototype.event;
}
/**
 * @record
 */
export function IPinColumnEventArgs() { }
if (false) {
    /** @type {?} */
    IPinColumnEventArgs.prototype.column;
    /** @type {?} */
    IPinColumnEventArgs.prototype.insertAtIndex;
    /** @type {?} */
    IPinColumnEventArgs.prototype.isPinned;
}
/**
 * @record
 */
export function IPageEventArgs() { }
if (false) {
    /** @type {?} */
    IPageEventArgs.prototype.previous;
    /** @type {?} */
    IPageEventArgs.prototype.current;
}
/**
 * @record
 */
export function IRowDataEventArgs() { }
if (false) {
    /** @type {?} */
    IRowDataEventArgs.prototype.data;
}
/**
 * @record
 */
export function IColumnResizeEventArgs() { }
if (false) {
    /** @type {?} */
    IColumnResizeEventArgs.prototype.column;
    /** @type {?} */
    IColumnResizeEventArgs.prototype.prevWidth;
    /** @type {?} */
    IColumnResizeEventArgs.prototype.newWidth;
}
/**
 * @record
 */
export function IRowSelectionEventArgs() { }
if (false) {
    /** @type {?} */
    IRowSelectionEventArgs.prototype.oldSelection;
    /** @type {?} */
    IRowSelectionEventArgs.prototype.newSelection;
    /** @type {?} */
    IRowSelectionEventArgs.prototype.added;
    /** @type {?} */
    IRowSelectionEventArgs.prototype.removed;
    /** @type {?|undefined} */
    IRowSelectionEventArgs.prototype.event;
}
/**
 * @record
 */
export function ISearchInfo() { }
if (false) {
    /** @type {?} */
    ISearchInfo.prototype.searchText;
    /** @type {?} */
    ISearchInfo.prototype.caseSensitive;
    /** @type {?} */
    ISearchInfo.prototype.exactMatch;
    /** @type {?} */
    ISearchInfo.prototype.activeMatchIndex;
    /** @type {?} */
    ISearchInfo.prototype.matchInfoCache;
}
/**
 * @record
 */
export function IGridToolbarExportEventArgs() { }
if (false) {
    /** @type {?} */
    IGridToolbarExportEventArgs.prototype.grid;
    /** @type {?} */
    IGridToolbarExportEventArgs.prototype.exporter;
    /** @type {?} */
    IGridToolbarExportEventArgs.prototype.options;
    /** @type {?} */
    IGridToolbarExportEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function IColumnMovingStartEventArgs() { }
if (false) {
    /** @type {?} */
    IColumnMovingStartEventArgs.prototype.source;
}
/**
 * @record
 */
export function IColumnMovingEventArgs() { }
if (false) {
    /** @type {?} */
    IColumnMovingEventArgs.prototype.source;
    /** @type {?} */
    IColumnMovingEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function IColumnMovingEndEventArgs() { }
if (false) {
    /** @type {?} */
    IColumnMovingEndEventArgs.prototype.source;
    /** @type {?} */
    IColumnMovingEndEventArgs.prototype.target;
}
/**
 * @record
 */
export function IGridKeydownEventArgs() { }
if (false) {
    /** @type {?} */
    IGridKeydownEventArgs.prototype.targetType;
    /** @type {?} */
    IGridKeydownEventArgs.prototype.target;
    /** @type {?} */
    IGridKeydownEventArgs.prototype.event;
    /** @type {?} */
    IGridKeydownEventArgs.prototype.cancel;
}
/**
 * @record
 */
export function ICellPosition() { }
if (false) {
    /** @type {?} */
    ICellPosition.prototype.rowIndex;
    /** @type {?} */
    ICellPosition.prototype.visibleColumnIndex;
}
/**
 * @record
 */
export function IGridDataBindable() { }
if (false) {
    /** @type {?} */
    IGridDataBindable.prototype.data;
    /** @type {?} */
    IGridDataBindable.prototype.filteredData;
}
/**
 * @record
 */
export function IRowDragEndEventArgs() { }
if (false) {
    /** @type {?} */
    IRowDragEndEventArgs.prototype.dragDirective;
    /** @type {?} */
    IRowDragEndEventArgs.prototype.dragData;
    /** @type {?} */
    IRowDragEndEventArgs.prototype.animation;
}
/**
 * @record
 */
export function IRowDragStartEventArgs() { }
if (false) {
    /** @type {?} */
    IRowDragStartEventArgs.prototype.dragDirective;
    /** @type {?} */
    IRowDragStartEventArgs.prototype.dragData;
}
/**
 * @abstract
 */
export class IgxGridBaseComponent extends DisplayDensityBase {
    /**
     * @param {?} selectionService
     * @param {?} crudService
     * @param {?} colResizingService
     * @param {?} gridAPI
     * @param {?} _transactions
     * @param {?} elementRef
     * @param {?} zone
     * @param {?} document
     * @param {?} cdr
     * @param {?} resolver
     * @param {?} differs
     * @param {?} viewRef
     * @param {?} navigation
     * @param {?} filteringService
     * @param {?} overlayService
     * @param {?} summaryService
     * @param {?} _displayDensityOptions
     */
    constructor(selectionService, crudService, colResizingService, gridAPI, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation, filteringService, overlayService, summaryService, _displayDensityOptions) {
        super(_displayDensityOptions);
        this.selectionService = selectionService;
        this.crudService = crudService;
        this.colResizingService = colResizingService;
        this.gridAPI = gridAPI;
        this._transactions = _transactions;
        this.elementRef = elementRef;
        this.zone = zone;
        this.document = document;
        this.cdr = cdr;
        this.resolver = resolver;
        this.differs = differs;
        this.viewRef = viewRef;
        this.navigation = navigation;
        this.filteringService = filteringService;
        this.overlayService = overlayService;
        this.summaryService = summaryService;
        this._displayDensityOptions = _displayDensityOptions;
        this._init = true;
        this._cdrRequests = false;
        this._cdrRequestRepaint = false;
        this._resourceStrings = CurrentResourceStrings.GridResStrings;
        this._emptyGridMessage = null;
        this._emptyFilteredGridMessage = null;
        this._isLoading = false;
        this._locale = null;
        this._destroyed = false;
        this.overlayIDs = [];
        this._advancedFilteringPositionSettings = {
            verticalDirection: VerticalAlignment.Middle,
            horizontalDirection: HorizontalAlignment.Center,
            horizontalStartPoint: HorizontalAlignment.Center,
            verticalStartPoint: VerticalAlignment.Middle
        };
        this._advancedFilteringOverlaySettings = {
            closeOnOutsideClick: false,
            modal: false,
            positionStrategy: new ConnectedPositioningStrategy(this._advancedFilteringPositionSettings),
        };
        /**
         * An \@Input property that autogenerates the `IgxGridComponent` columns.
         * The default value is false.
         * \@remarks
         * When set to true, it will override all columns declared through code or in markup.
         * ```html
         * <igx-grid [data]="Data" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.autoGenerate = false;
        /**
         * @hidden
         */
        this.filteringExpressionsTreeChange = new EventEmitter();
        /**
         * Emitted after advanced filtering is performed.
         * Returns the advanced filtering expressions tree.
         * ```typescript
         * advancedFilteringExprTreeChange(event: IFilteringExpressionsTree){
         *     const filteringTree = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true"
         *           (advancedFilteringExpressionsTreeChange)="advancedFilteringExprTreeChange($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.advancedFilteringExpressionsTreeChange = new EventEmitter();
        /**
         * @hidden
         */
        this.pageChange = new EventEmitter();
        /**
         * @hidden
         */
        this.perPageChange = new EventEmitter();
        /**
         * @hidden
         * \@internal
         */
        this.rowDragging = false;
        /**
         * An \@Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.
         * ```html
         * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-even-class'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.evenRowCSS = 'igx-grid__tr--even';
        /**
         * An \@Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.
         * ```html
         * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-odd-class'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.oddRowCSS = 'igx-grid__tr--odd';
        /**
         * An \@Input property that sets the title to be displayed in the built-in column hiding UI.
         * ```html
         * <igx-grid [showToolbar]="true" [columnHiding]="true" columnHidingTitle="Column Hiding"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.columnHidingTitle = '';
        /**
         * An \@Input property that sets the title to be displayed in the UI of the column pinning.
         * ```html
         * <igx-grid #grid [data]="localData" [columnPinning]="'true" [columnPinningTitle]="'Column Hiding'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.columnPinningTitle = '';
        /**
         * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.
         * ```html
         * <igx-grid #grid (onCellClick)="onCellClick($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * public onCellClick(e){
         *     alert("The cell has been clicked!");
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onCellClick = new EventEmitter();
        /**
         * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.
         * ```html
         * <igx-grid #grid (onSelection)="onCellSelect($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * public onCellSelect(e){
         *     alert("The cell has been selected!");
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onSelection = new EventEmitter();
        /**
         *  Emitted when `IgxGridRowComponent` is selected.
         * ```html
         * <igx-grid #grid (onRowSelectionChange)="onCellClickChange($event)" [data]="localData" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * public onCellClickChange(e){
         *     alert("The selected row has been changed!");
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onRowSelectionChange = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` is pinned.
         * The index that the column is inserted at may be changed through the `insertAtIndex` property.
         * ```typescript
         * public columnPinning(event) {
         *     if (event.column.field === "Name") {
         *       event.insertAtIndex = 0;
         *     }
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onColumnPinning = new EventEmitter();
        /**
         * An \@Output property emitting an event when `IgxGridCellComponent`
         * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      cellID: {
         *          columnID: int,
         *          rowID: int,
         *          rowIndex: int
         *      }
         *      newValue: object,
         *      oldValue: object,
         *      rowID: int
         *  }
         *
         * ```typescript
         * editCancel(event: IGridEditEventArgs){
         *    const rowID: IgxColumnComponent = event.rowID;
         * }
         * ```
         * ```html
         * <igx-grid #grid3 (onCellEditCancel)="editCancel($event)" [data]="remote | async" [primaryKey]="'ProductID'">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * \@memberof IgxGridComponent
         */
        this.onCellEditCancel = new EventEmitter();
        /**
         * An \@Output property emitting an event when `IgxGridCellComponent` enters edit mode.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      cellID: {
         *          columnID: int,
         *          rowID: int,
         *          rowIndex: int
         *      }
         *      oldValue: object,
         *      rowID: int
         *  }
         *
         * ```typescript
         * editStart(event: IGridEditEventArgs){
         *    const value: IgxColumnComponent = event.newValue;
         * }
         * ```
         * ```html
         * <igx-grid #grid3 (onCellEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * \@memberof IgxGridComponent
         */
        this.onCellEditEnter = new EventEmitter();
        /**
         * An \@Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.
         * Event is fired after editing is completed, when the cell is exiting edit mode.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      cellID: {
         *          columnID: int,
         *          rowID: int,
         *          rowIndex: int
         *      }
         *      newValue: object,
         *      oldValue: object,
         *      rowID: int
         *  }
         *
         * ```typescript
         * editDone(event: IGridEditEventArgs){
         *    const value: IgxColumnComponent = event.newValue;
         * }
         * ```
         * ```html
         * <igx-grid #grid3 (onCellEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onCellEdit = new EventEmitter();
        /**
         * An \@Output property emitting an event when [rowEditable]="true" a row enters edit mode.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      oldValue: <rowObj>,
         *      rowID: int
         *  }
         *
         * Bind to the event in markup as follows:
         * ```html
         * <igx-grid #grid3 (onRowEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowEditable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * ```typescript
         *      editStart(event: IGridEditEventArgs) {
         *          const editedRowObj = event.oldValue;
         *          const cancelValue = event.cancel;
         *          const rowID = event.rowID;
         *      }
         * ```
         * \@memberof IgxGridComponent
         */
        this.onRowEditEnter = new EventEmitter();
        /**
         * An \@Output property emitting an event when [rowEditable]="true" & `endEdit(true)` is called.
         * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,
         * performing paging operation, column resizing, pinning, moving or hitting  `Done`
         * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      newValue: <rowObj>,
         *      oldValue: <rowObj>,
         *      rowID: int
         *  }
         *
         * Bind to the event in markup as follows:
         * ```html
         * <igx-grid #grid3 (onRowEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowEditable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         *
         * ```typescript
         *      editDone(event: IGridEditEventArgs) {
         *          const originalRowObj = event.oldValue;
         *          const updatedRowObj = event.newValue;
         *          const cancelValue = event.cancel;
         *          const rowID = event.rowID;
         *      }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onRowEdit = new EventEmitter();
        /**
         * An \@Output property emitting an event when [rowEditable]="true" & `endEdit(false)` is called.
         * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button
         * in the row editing overlay.
         * This event is cancelable.
         *
         * args: IGridEditEventArgs = {
         *      cancel: bool,
         *      newValue: <rowObj>,
         *      oldValue: <rowObj>,
         *      rowID: int
         *  }
         *
         * Bind to the event in markup as follows:
         * ```html
         * <igx-grid #grid3 (onRowEditCancel)="editCancel($event)" [data]="remote | async" (onSortingDone)="process($event)"
         *          [primaryKey]="'ProductID'" [rowEditable]="true">
         *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
         *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
         *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
         * </igx-grid>
         * ```
         * ```typescript
         *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {
         *          const originalRowObj = event.oldValue;
         *          const updatedRowObj = event.newValue;
         *          const cancelValue = event.cancel;
         *          const rowID = event.rowID;
         *      }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onRowEditCancel = new EventEmitter();
        /**
         * Emitted when a grid column is initialized. Returns the column object.
         * ```html
         * <igx-grid #grid [data]="localData" [onColumnInit]="initColumns($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * ```typescript
         * initColumns(event: IgxColumnComponent) {
         * const column: IgxColumnComponent = event;
         *       column.filterable = true;
         *       column.sortable = true;
         *       column.editable = true;
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onColumnInit = new EventEmitter();
        /**
         * Emitted when sorting is performed through the UI. Returns the sorting expression.
         * ```html
         * <igx-grid #grid [data]="localData" [autoGenerate]="true" (onSortingDone)="sortingDone($event)"></igx-grid>
         * ```
         * ```typescript
         * sortingDone(event: SortingDirection){
         *     const sortingDirection = event;
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onSortingDone = new EventEmitter();
        /**
         * Emitted when filtering is performed through the UI.
         * Returns the filtering expressions tree of the column for which filtering was performed.
         * ```typescript
         * filteringDone(event: IFilteringExpressionsTree){
         *     const filteringTree = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onFilteringDone)="filteringDone($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onFilteringDone = new EventEmitter();
        /**
         * Emitted when paging is performed. Returns an object consisting of the previous and next pages.
         * ```typescript
         * pagingDone(event: IPageEventArgs){
         *     const paging = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onPagingDone)="pagingDone($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onPagingDone = new EventEmitter();
        /**
         * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.
         * Returns the data for the new `IgxGridRowComponent` object.
         * ```typescript
         * rowAdded(event: IRowDataEventArgs){
         *    const rowInfo = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onRowAdded)="rowAdded($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onRowAdded = new EventEmitter();
        /**
         * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.
         * Returns an `IRowDataEventArgs` object.
         * ```typescript
         * rowDeleted(event: IRowDataEventArgs){
         *    const rowInfo = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onRowDeleted)="rowDeleted($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onRowDeleted = new EventEmitter();
        /**
         * Emitted when a new chunk of data is loaded from virtualization.
         * ```typescript
         *  <igx-grid #grid [data]="localData" [autoGenerate]="true" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onDataPreLoad = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` is resized.
         * Returns the `IgxColumnComponent` object's old and new width.
         * ```typescript
         * resizing(event: IColumnResizeEventArgs){
         *     const grouping = event;
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onColumnResized)="resizing($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onColumnResized = new EventEmitter();
        /**
         * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.
         * ```typescript
         * contextMenu(event: IGridCellEventArgs){
         *     const resizing = event;
         *     console.log(resizing);
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onContextMenu)="contextMenu($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onContextMenu = new EventEmitter();
        /**
         * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.
         * ```typescript
         * dblClick(event: IGridCellEventArgs){
         *     const dblClick = event;
         *     console.log(dblClick);
         * }
         * ```
         * ```html
         * <igx-grid #grid [data]="localData" (onDoubleClick)="dblClick($event)" [autoGenerate]="true"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onDoubleClick = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }
         * ```typescript
         * visibilityChanged(event: IColumnVisibilityChangedEventArgs){
         *    const visiblity = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnVisibilityChanged)="visibilityChanged($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onColumnVisibilityChanged = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.
         * ```typescript
         * movingStart(event: IColumnMovingStartEventArgs){
         *     const movingStarts = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingStart)="movingStart($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onColumnMovingStart = new EventEmitter();
        /**
         * Emitted throughout the `IgxColumnComponent` moving operation.
         * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.
         * ```typescript
         * moving(event: IColumnMovingEventArgs){
         *     const moving = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMoving)="moving($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onColumnMoving = new EventEmitter();
        /**
         * Emitted when `IgxColumnComponent` moving ends.
         * Returns the source and target `IgxColumnComponent` objects.
         * ```typescript
         * movingEnds(event: IColumnMovingEndEventArgs){
         *     const movingEnds = event;
         * }
         * ```
         * ```html
         * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingEnd)="movingEnds($event)"></igx-grid>
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onColumnMovingEnd = new EventEmitter();
        /**
         * Emitted when keydown is triggered over element inside grid's body.
         * This event is fired only if the key combination is supported in the grid.
         * Return the target type, target object and the original event. This event is cancelable.
         * ```typescript
         * customKeydown(args: IGridKeydownEventArgs) {
         *  const keydownEvent = args.event;
         * }
         * ```
         * ```html
         *  <igx-grid (onGridKeydown)="customKeydown($event)"></igx-grid>
         * ```
         */
        this.onGridKeydown = new EventEmitter();
        /**
         * Emitted when start dragging a row.
         * Return the dragged row.
         */
        this.onRowDragStart = new EventEmitter();
        /**
         * Emitted when dropping a row.
         * Return the dropped row.
         */
        this.onRowDragEnd = new EventEmitter();
        /**
         * Emitted when a copy operation is executed.
         * Fired only if copy behavior is enabled through the [`clipboardOptions`]{\@link IgxGridBaseComponent#clipboardOptions}.
         */
        this.onGridCopy = new EventEmitter();
        /**
         * @hidden
         */
        this.columnList = new QueryList();
        /**
         * @hidden
         */
        this.tmpOutlets = new QueryList();
        /**
         * The custom template, if any, that should be used when rendering a row expand indicator.
         */
        this.rowExpandedIndicatorTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering a row collapse indicator.
         */
        this.rowCollapsedIndicatorTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering a header expand indicator.
         */
        this.headerExpandIndicatorTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering a header collapse indicator.
         */
        this.headerCollapseIndicatorTemplate = null;
        /**
         * @hidden
         */
        this.tabindex = 0;
        /**
         * @hidden
         */
        this.hostRole = 'grid';
        /**
         * @hidden
         */
        this.sortingExpressionsChange = new EventEmitter();
        /**
         * @hidden
         */
        this.columnsWithNoSetWidths = null;
        /* Toolbar related definitions */
        this._showToolbar = false;
        this._exportExcel = false;
        this._exportCsv = false;
        this._toolbarTitle = null;
        this._exportText = null;
        this._exportExcelText = null;
        this._exportCsvText = null;
        this._rowEditable = false;
        this._filteredSortedData = null;
        /**
         * Provides access to the `IgxToolbarComponent`.
         * ```typescript
         * const gridToolbar = this.grid.toolbar;
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.toolbar = null;
        this.toolbarHtml = null;
        /**
         * Controls the copy behavior of the grid.
         */
        this.clipboardOptions = {
            /**
             * Enables/disables the copy behavior
             */
            enabled: true,
            /**
             * Include the columns headers in the clipboard output.
             */
            copyHeaders: true,
            /**
             * Apply the columns formatters (if any) on the data in the clipboard output.
             */
            copyFormatters: true,
            /**
             * The separator used for formatting the copy output. Defaults to `\t`.
             */
            separator: '\t'
        };
        /**
         * Emitted when an export process is initiated by the user.
         * ```typescript
         * toolbarExporting(event: IGridToolbarExportEventArgs){
         *     const toolbarExporting = event;
         * }
         * ```
         * \@memberof IgxGridBaseComponent
         */
        this.onToolbarExporting = new EventEmitter();
        /* End of toolbar related definitions */
        /**
         * Emitted when making a range selection either through
         * drag selection or through keyboard selection.
         */
        this.onRangeSelection = new EventEmitter();
        /**
         * @hidden
         */
        this.calcHeight = 0;
        /**
         * @hidden
         */
        this.chipsGoupingExpressions = [];
        /**
         * @hidden
         */
        this.disableTransitions = false;
        /**
         * @hidden
         */
        this.lastSearchInfo = {
            searchText: '',
            caseSensitive: false,
            exactMatch: false,
            activeMatchIndex: 0,
            matchInfoCache: []
        };
        /**
         * @hidden
         */
        this.columnWidthSetByUser = false;
        /**
         * @hidden
         */
        this.destroy$ = new Subject();
        /**
         * @hidden
         */
        this._perPage = 15;
        /**
         * @hidden
         */
        this._page = 0;
        /**
         * @hidden
         */
        this._paging = false;
        /**
         * @hidden
         */
        this._hideRowSelectors = false;
        /**
         * @hidden
         */
        this._rowDrag = false;
        /**
         * @hidden
         */
        this._pipeTrigger = 0;
        /**
         * @hidden
         */
        this._filteringPipeTrigger = 0;
        /**
         * @hidden
         */
        this._summaryPipeTrigger = 0;
        /**
         * @hidden
         */
        this._columns = [];
        /**
         * @hidden
         */
        this._pinnedColumns = [];
        /**
         * @hidden
         */
        this._unpinnedColumns = [];
        /**
         * @hidden
         */
        this._filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);
        /**
         * @hidden
         */
        this._sortingExpressions = [];
        /**
         * @hidden
         */
        this._maxLevelHeaderDepth = null;
        /**
         * @hidden
         */
        this._columnHiding = false;
        /**
         * @hidden
         */
        this._columnPinning = false;
        this._allowFiltering = false;
        this._allowAdvancedFiltering = false;
        this._filterMode = FilterMode.quickFilter;
        this.observer = new ResizeObserver(() => { });
        this.resizeNotify = new Subject();
        this._hiddenColumnsText = '';
        this._pinnedColumnsText = '';
        this._height = '100%';
        this._width = '100%';
        this._horizontalForOfs = [];
        this._multiRowLayoutRowSize = 1;
        // Caches
        this._totalWidth = NaN;
        this._pinnedVisible = [];
        this._unpinnedVisible = [];
        this._pinnedWidth = NaN;
        this._unpinnedWidth = NaN;
        this._visibleColumns = [];
        this._columnGroups = false;
        this._defaultTargetRecordNumber = 10;
        this._summaryPosition = GridSummaryPosition.bottom;
        this._summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;
        this._cellSelectionMode = GridSelectionMode.multiple;
        this._rowSelectionMode = GridSelectionMode.none;
        this.rowEditPositioningStrategy = new RowEditPositionStrategy({
            horizontalDirection: HorizontalAlignment.Right,
            verticalDirection: VerticalAlignment.Bottom,
            horizontalStartPoint: HorizontalAlignment.Left,
            verticalStartPoint: VerticalAlignment.Bottom,
            closeAnimation: null
        });
        this.rowEditSettings = {
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: false,
            outlet: this.rowOutletDirective,
            positionStrategy: this.rowEditPositioningStrategy
        };
        this.verticalScrollHandler = (event) => {
            this.verticalScrollContainer.onScroll(event);
            if (isEdge()) {
                this.wheelHandler(false);
            }
            this.disableTransitions = true;
            this.zone.run(() => {
                this.zone.onStable.pipe(first()).subscribe(() => {
                    this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);
                });
                if (this.rowEditable) {
                    this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);
                }
                this.disableTransitions = false;
            });
            this.hideOverlays();
        };
        this.horizontalScrollHandler = (event) => {
            /** @type {?} */
            const scrollLeft = event.target.scrollLeft;
            if (isEdge()) {
                this.wheelHandler(true);
            }
            this.headerContainer.onHScroll(scrollLeft);
            this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));
            this.cdr.markForCheck();
            this.zone.run(() => {
                this.zone.onStable.pipe(first()).subscribe(() => {
                    this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);
                });
            });
            this.hideOverlays();
        };
        this.keydownHandler = (event) => {
            /** @type {?} */
            const key = event.key.toLowerCase();
            if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {
                event.preventDefault();
                if (key === 'pagedown') {
                    this.verticalScrollContainer.scrollNextPage();
                    this.nativeElement.focus();
                }
                else if (key === 'pageup') {
                    this.verticalScrollContainer.scrollPrevPage();
                    this.nativeElement.focus();
                }
            }
        };
        /**
         * @hidden
         */
        this.scrollHandler = (event) => {
            this.headerContainer.scrollPosition += event.target.scrollLeft;
            this.verticalScrollContainer.scrollPosition += event.target.scrollTop;
            event.target.scrollLeft = 0;
            event.target.scrollTop = 0;
        };
        /**
         * @hidden
         */
        this.wheelHandler = (isScroll = false) => {
            if (this.document.activeElement &&
                // tslint:disable-next-line:no-bitwise
                (this.document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||
                    // tslint:disable-next-line:no-bitwise
                    (this.document.activeElement.
                        compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {
                ((/** @type {?} */ (this.document.activeElement))).blur();
            }
        };
        /**
         * @hidden
         */
        this.rowEditingWheelHandler = (event) => {
            if (event.deltaY > 0) {
                this.verticalScrollContainer.scrollNext();
            }
            else {
                this.verticalScrollContainer.scrollPrev();
            }
        };
        this.cdr.detach();
    }
    /**
     * @return {?}
     */
    get scrollWidth() {
        return this._scrollWidth;
    }
    /**
     * An accessor that sets the resource strings.
     * By default it uses EN resources.
     * @param {?} value
     * @return {?}
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /**
     * An accessor that returns the resource strings.
     * @return {?}
     */
    get resourceStrings() {
        return this._resourceStrings;
    }
    /**
     * @return {?}
     */
    get filteringLogic() {
        return this._filteringExpressionsTree.operator;
    }
    /**
     * Sets the filtering logic of the `IgxGridComponent`.
     * The default is AND.
     * ```html
     * <igx-grid [data]="Data" [autoGenerate]="true" [filteringLogic]="filtering"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set filteringLogic(value) {
        this._filteringExpressionsTree.operator = value;
    }
    /**
     * Returns the filtering state of `IgxGridComponent`.
     * ```typescript
     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get filteringExpressionsTree() {
        return this._filteringExpressionsTree;
    }
    /**
     * Sets the filtering state of the `IgxGridComponent`.
     * ```typescript
     * const logic = new FilteringExpressionsTree(FilteringLogic.And, "ID");
     * logic.filteringOperands = [
     *     {
     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),
     *          fieldName: 'ID',
     *          searchVal: 1
     *     }
     * ];
     * this.grid.filteringExpressionsTree = (logic);
     * ```
     * Two-way data binding.
     * ```html
     * <igx-grid #grid [data]="Data" [autoGenerate]="true" [(filteringExpressionsTree)]="model.filteringExpressions"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set filteringExpressionsTree(value) {
        if (value && value instanceof FilteringExpressionsTree) {
            /** @type {?} */
            const val = ((/** @type {?} */ (value)));
            for (let index = 0; index < val.filteringOperands.length; index++) {
                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {
                    /** @type {?} */
                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);
                    newExpressionsTree.filteringOperands.push((/** @type {?} */ (val.filteringOperands[index])));
                    val.filteringOperands[index] = newExpressionsTree;
                }
            }
            value.type = FilteringExpressionsTreeType.Regular;
            this._filteringExpressionsTree = value;
            this._filteringPipeTrigger++;
            this.filteringExpressionsTreeChange.emit(this._filteringExpressionsTree);
            if (this.filteringService.isFilteringExpressionsTreeEmpty(this._filteringExpressionsTree) &&
                !this.advancedFilteringExpressionsTree) {
                this.filteredData = null;
            }
            this.filteringService.refreshExpressions();
            this.selectionService.clearHeaderCBState();
            this.summaryService.clearSummaryCache();
            this.notifyChanges();
        }
    }
    /**
     * Returns the advanced filtering state of `IgxGridComponent`.
     * ```typescript
     * let advancedFilteringExpressionsTree = this.grid.advancedFilteringExpressionsTree;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get advancedFilteringExpressionsTree() {
        return this._advancedFilteringExpressionsTree;
    }
    /**
     * Sets the advanced filtering state of the `IgxGridComponent`.
     * ```typescript
     * const logic = new FilteringExpressionsTree(FilteringLogic.And);
     * logic.filteringOperands = [
     *     {
     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),
     *          fieldName: 'ID',
     *          searchVal: 1
     *     },
     *     {
     *          condition: IgxStringFilteringOperand.instance().condition('contains'),
     *          fieldName: 'CompanyName',
     *          searchVal: 'a'
     *     }
     * ];
     * this.grid.advancedFilteringExpressionsTree = logic;
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set advancedFilteringExpressionsTree(value) {
        if (value && value instanceof FilteringExpressionsTree) {
            value.type = FilteringExpressionsTreeType.Advanced;
            this._advancedFilteringExpressionsTree = value;
            this._filteringPipeTrigger++;
        }
        else {
            this._advancedFilteringExpressionsTree = null;
        }
        this.advancedFilteringExpressionsTreeChange.emit(this._advancedFilteringExpressionsTree);
        if (this.filteringService.isFilteringExpressionsTreeEmpty(this._advancedFilteringExpressionsTree) &&
            !this.advancedFilteringExpressionsTree) {
            this.filteredData = null;
        }
        this.selectionService.clearHeaderCBState();
        this.summaryService.clearSummaryCache();
        this.notifyChanges();
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(() => this.onFilteringDone.emit(this._advancedFilteringExpressionsTree));
    }
    /**
     * Returns the locale of the grid.
     * If not set, returns browser's language.
     * @return {?}
     */
    get locale() {
        if (this._locale) {
            return this._locale;
        }
        else {
            return 'en';
        }
    }
    /**
     * Sets the locale of the grid.
     * @param {?} value
     * @return {?}
     */
    set locale(value) {
        this._locale = value;
    }
    /**
     * Returns whether the paging feature is enabled/disabled.
     * The default state is disabled (false).
     * ```
     * const paging = this.grid.paging;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get paging() {
        return this._paging;
    }
    /**
     * Enables/Disables the paging feature.
     * ```html
     * <igx-grid #grid [data]="Data" [autoGenerate]="true" [paging]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set paging(value) {
        this._paging = value;
        this._pipeTrigger++;
        this.notifyChanges(true);
    }
    /**
     * Returns the current page index.
     * ```html
     * let gridPage = this.grid.page;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get page() {
        return this._page;
    }
    /**
     * Sets the current page index.
     * ```html
     * <igx-grid #grid [data]="Data" [paging]="true" [page]="5" [autoGenerate]="true"></igx-grid>
     * ```
     * Two-way data binding.
     * ```html
     * <igx-grid #grid [data]="Data" [paging]="true" [(page)]="model.page" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} val
     * @return {?}
     */
    set page(val) {
        if (val === this._page || val < 0 || val > this.totalPages - 1) {
            return;
        }
        this.selectionService.clear(true);
        this.onPagingDone.emit({ previous: this._page, current: val });
        this._page = val;
        this.pageChange.emit(this._page);
        this.navigateTo(0);
        this.notifyChanges();
    }
    /**
     * Returns the number of visible items per page of the `IgxGridComponent`.
     * The default is 15.
     * ```html
     * let itemsPerPage = this.grid.perPage;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get perPage() {
        return this._perPage;
    }
    /**
     * Sets the number of visible items per page of the `IgxGridComponent`.
     * ```html
     * <igx-grid #grid [data]="Data" [paging]="true" [perPage]="5" [autoGenerate]="true"></igx-grid>
     * ```
     *
     * Two-way data binding.
     * ```html
     * <igx-grid #grid [data]="Data" [paging]="true" [(perPage)]="model.perPage" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} val
     * @return {?}
     */
    set perPage(val) {
        if (val < 0) {
            return;
        }
        this.selectionService.clear(true);
        this._perPage = val;
        this.perPageChange.emit(this._perPage);
        this.page = 0;
        this.endEdit(true);
        this.notifyChanges();
    }
    /**
     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.
     * By default it is disabled (false).
     * ```typescript
     * let gridColHiding = this.grid.columnHiding;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get columnHiding() {
        return this._columnHiding;
    }
    /**
     * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.
     * In order for the UI to work, you need to enable the toolbar as shown in the example below.
     * ```html
     * <igx-grid [data]="Data" [autoGenerate]="true" [showToolbar]="true" [columnHiding]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set columnHiding(value) {
        if (this._columnHiding !== value) {
            this._columnHiding = value;
            if (!this._init) {
                this.notifyChanges(true);
            }
        }
    }
    /**
     * @return {?}
     */
    get rowSelectable() {
        return this.isRowSelectable;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set rowSelectable(val) {
        this.rowSelection = val ? GridSelectionMode.multiple : GridSelectionMode.none;
    }
    /**
     * Returns if the row selectors are hidden
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get hideRowSelectors() {
        return this._hideRowSelectors;
    }
    /**
     * Allows you to change the visibility of the row selectors
     * By default row selectors are shown
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set hideRowSelectors(value) {
        this._hideRowSelectors = value;
        this.notifyChanges(true);
    }
    /**
     * @return {?}
     */
    get rowDraggable() {
        return this._rowDrag && this.hasVisibleColumns;
    }
    /**
     * Sets whether rows can be moved.
     * ```html
     * <igx-grid #grid [rowDraggable]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} val
     * @return {?}
     */
    set rowDraggable(val) {
        this._rowDrag = val;
        this.notifyChanges(true);
    }
    /**
     * Sets whether the `IgxGridRowComponent` is editable.
     * By default it is set to false.
     * ```typescript
     * let rowEditable = this.grid.rowEditable;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get rowEditable() {
        return this._rowEditable;
    }
    /**
     * Sets whether rows can be edited.
     * ```html
     * <igx-grid #grid [showToolbar]="true" [rowEditable]="true" [primaryKey]="'ProductID'" [columnHiding]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} val
     * @return {?}
     */
    set rowEditable(val) {
        if (!this._init) {
            this.refreshGridState();
        }
        this._rowEditable = val;
        this.notifyChanges();
    }
    /**
     * Returns the height of the `IgxGridComponent`.
     * ```typescript
     * let gridHeight = this.grid.height;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * Sets the height of the `IgxGridComponent`.
     * ```html
     * <igx-grid #grid [data]="Data" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        if (this._height !== value) {
            this._height = value;
            this.nativeElement.style.height = value;
            this.notifyChanges(true);
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    get hostWidth() {
        return this._width || this._hostWidth;
    }
    /**
     * Returns the width of the `IgxGridComponent`.
     * ```typescript
     * let gridWidth = this.grid.width;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get width() {
        return this._width;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set width(value) {
        if (this._width !== value) {
            this._width = value;
            this.nativeElement.style.width = value;
            this.notifyChanges(true);
        }
    }
    /**
     * Returns the width of the header of the `IgxGridComponent`.
     * ```html
     * let gridHeaderWidth = this.grid.headerWidth;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get headerWidth() {
        return parseInt(this.width, 10) - 17;
    }
    /**
     * Returns the row height.
     * ```typescript
     * const rowHeight = this.grid.rowHeight;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get rowHeight() {
        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;
    }
    /**
     * Sets the row height.
     * ```html
     * <igx-grid #grid [data]="localData" [showToolbar]="true" [rowHeight]="100" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set rowHeight(value) {
        this._rowHeight = parseInt(value, 10);
    }
    /**
     * An \@Input property that sets the default width of the `IgxGridComponent`'s columns.
     * ```html
     * <igx-grid #grid [data]="localData" [showToolbar]="true" [columnWidth]="100" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get columnWidth() {
        return this._columnWidth;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set columnWidth(value) {
        this._columnWidth = value;
        this.columnWidthSetByUser = true;
        this.notifyChanges(true);
    }
    /**
     * An \@Input property that sets the message displayed when there are no records.
     * ```html
     * <igx-grid #grid [data]="Data" [emptyGridMessage]="'The grid is empty'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set emptyGridMessage(value) {
        this._emptyGridMessage = value;
    }
    /**
     * An accessor that returns the message displayed when there are no records.
     * @return {?}
     */
    get emptyGridMessage() {
        return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;
    }
    /**
     * An \@Input property that sets whether the grid is going to show loading indicator.
     * ```html
     * <igx-grid #grid [data]="Data" [isLoading]="true" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set isLoading(value) {
        if (this._isLoading !== value) {
            this._isLoading = value;
            this.evaluateLoadingState();
        }
        Promise.resolve().then(() => {
            // wait for the current detection cycle to end before triggering a new one.
            this.notifyChanges();
        });
    }
    /**
     * An accessor that returns whether the grid is showing loading indicator.
     * @return {?}
     */
    get isLoading() {
        return this._isLoading;
    }
    /**
     * An \@Input property that sets the message displayed when there are no records and the grid is filtered.
     * ```html
     * <igx-grid #grid [data]="Data" [emptyGridMessage]="'The grid is empty'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set emptyFilteredGridMessage(value) {
        this._emptyFilteredGridMessage = value;
    }
    /**
     * An accessor that returns the message displayed when there are no records and the grid is filtered.
     * @return {?}
     */
    get emptyFilteredGridMessage() {
        return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;
    }
    /**
     * Returns if the built-in column pinning UI should be shown in the toolbar.
     * ```typescript
     *  let colPinning = this.grid.columnPinning;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get columnPinning() {
        return this._columnPinning;
    }
    /**
     * Sets if the built-in column pinning UI should be shown in the toolbar.
     * By default it's disabled.
     * ```html
     * <igx-grid #grid [data]="localData" [columnPinning]="'true" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set columnPinning(value) {
        if (this._columnPinning !== value) {
            this._columnPinning = value;
            if (!this._init) {
                this.notifyChanges(true);
            }
        }
    }
    /**
     * Returns if the filtering is enabled.
     * ```typescript
     *  let filtering = this.grid.allowFiltering;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get allowFiltering() {
        return this._allowFiltering;
    }
    /**
     * Sets if the filtering is enabled.
     * By default it's disabled.
     * ```html
     * <igx-grid #grid [data]="localData" [allowFiltering]="true" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set allowFiltering(value) {
        if (this._allowFiltering !== value) {
            this._allowFiltering = value;
            this.filteringService.registerSVGIcons();
            if (!this._init) {
                this.calcGridHeadRow();
            }
            this.filteringService.isFilterRowVisible = false;
            this.filteringService.filteredColumn = null;
            this.notifyChanges(true);
        }
    }
    /**
     * Returns a value indicating whether the advanced filtering is enabled.
     * ```typescript
     *  let filtering = this.grid.allowAdvancedFiltering;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get allowAdvancedFiltering() {
        return this._allowAdvancedFiltering;
    }
    /**
     * Sets a value indicating whether the advanced filtering is enabled.
     * By default it's disabled.
     * ```html
     * <igx-grid #grid [data]="localData" [allowAdvancedFiltering]="true" [showToolbar]="true" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set allowAdvancedFiltering(value) {
        if (this._allowAdvancedFiltering !== value) {
            this._allowAdvancedFiltering = value;
            this.filteringService.registerSVGIcons();
            if (!this._init) {
                this.notifyChanges(true);
            }
        }
    }
    /**
     * Returns the filter mode.
     * ```typescript
     *  let filtering = this.grid.filterMode;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get filterMode() {
        return this._filterMode;
    }
    /**
     * Sets filter mode.
     * By default it's set to FilterMode.quickFilter.
     * ```html
     * <igx-grid #grid [data]="localData" [filterMode]="'quickFilter'" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set filterMode(value) {
        this._filterMode = value;
        if (this.filteringService.isFilterRowVisible) {
            this.filteringRow.close();
        }
        this.notifyChanges(true);
    }
    /**
     * Returns the summary position.
     * ```typescript
     *  let summaryPosition = this.grid.summaryPosition;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get summaryPosition() {
        return this._summaryPosition;
    }
    /**
     * Sets summary position.
     * By default it is bottom.
     * ```html
     * <igx-grid #grid [data]="localData" summaryPosition="top" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set summaryPosition(value) {
        this._summaryPosition = value;
        this.notifyChanges();
    }
    /**
     * Returns the summary calculation mode.
     * ```typescript
     *  let summaryCalculationMode = this.grid.summaryCalculationMode;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get summaryCalculationMode() {
        return this._summaryCalculationMode;
    }
    /**
     * Sets summary calculation mode.
     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.
     * ```html
     * <igx-grid #grid [data]="localData" summaryCalculationMode="rootLevelOnly" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set summaryCalculationMode(value) {
        this._summaryCalculationMode = value;
        if (!this._init) {
            this.endEdit(true);
            this.summaryService.resetSummaryHeight();
            this.notifyChanges(true);
        }
    }
    /**
     * Gets the filtering strategy of the grid.
     * ```typescript
     *  let filterStrategy = this.grid.filterStrategy
     * ```
     * @return {?}
     */
    get filterStrategy() {
        return this._filteringStrategy;
    }
    /**
     * Sets the filtering strategy of the grid.
     * ```html
     *  <igx-grid #grid [data]="localData" [filterStrategy]="filterStrategy"></igx-grid>
     * ```
     * @param {?} classRef
     * @return {?}
     */
    set filterStrategy(classRef) {
        this._filteringStrategy = classRef;
    }
    /**
     * Returns the state of the grid virtualization, including the start index and how many records are rendered.
     * ```typescript
     * const gridVirtState = this.grid1.virtualizationState;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get virtualizationState() {
        return this.verticalScrollContainer.state;
    }
    /**
     * @hidden
     * @param {?} state
     * @return {?}
     */
    set virtualizationState(state) {
        this.verticalScrollContainer.state = state;
    }
    /**
     * A list of all `IgxGridHeaderGroupComponent`.
     * ```typescript
     * const headerGroupsList = this.grid.headerGroupsList;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get headerGroupsList() {
        return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];
    }
    /**
     * A list of all `IgxGridHeaderComponent`.
     * ```typescript
     * const headers = this.grid.headerCellList;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get headerCellList() {
        return this.headerGroupsList.map((headerGroup) => headerGroup.headerCell).filter((headerCell) => headerCell);
    }
    /**
     * A list of all `IgxGridFilteringCellComponent`.
     * ```typescript
     * const filterCells = this.grid.filterCellList;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get filterCellList() {
        return this.headerGroupsList.map((headerGroup) => headerGroup.filterCell).filter((filterCell) => filterCell);
    }
    /**
     * @return {?}
     */
    get summariesRowList() {
        /** @type {?} */
        const res = new QueryList();
        if (!this._summaryRowList) {
            return res;
        }
        /** @type {?} */
        const sumList = this._summaryRowList.filter((item) => {
            return item.element.nativeElement.parentElement !== null;
        });
        res.reset(sumList);
        return res;
    }
    /**
     * A list of `IgxGridRowComponent`.
     * ```typescript
     * const rowList = this.grid.rowList;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get rowList() {
        /** @type {?} */
        const res = new QueryList();
        if (!this._rowList) {
            return res;
        }
        /** @type {?} */
        const rList = this._rowList
            .filter((item) => {
            return item.element.nativeElement.parentElement !== null;
        })
            .sort((a, b) => {
            return a.index - b.index;
        });
        res.reset(rList);
        return res;
    }
    /**
     * A list of `IgxGridRowComponent`, currently rendered.
     * ```typescript
     * const dataList = this.grid.dataRowList;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get dataRowList() {
        /** @type {?} */
        const res = new QueryList();
        if (!this._dataRowList) {
            return res;
        }
        /** @type {?} */
        const rList = this._dataRowList.filter((item) => {
            return item.element.nativeElement.parentElement !== null;
        }).sort((a, b) => {
            return a.index - b.index;
        });
        res.reset(rList);
        return res;
    }
    /**
     * Returns the template which will be used by the toolbar to show custom content.
     * ```typescript
     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get toolbarCustomContentTemplate() {
        return this.toolbarCustomContentTemplates.first;
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    get headSelectorTemplate() {
        if (this.headSelectorsTemplates && this.headSelectorsTemplates.first) {
            return this.headSelectorsTemplates.first.templateRef;
        }
        return null;
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    get rowSelectorTemplate() {
        if (this.rowSelectorsTemplates && this.rowSelectorsTemplates.first) {
            return this.rowSelectorsTemplates.first.templateRef;
        }
        return null;
    }
    /**
     * The custom template, if any, that should be used when rendering the row drag indicator icon
     * @return {?}
     */
    get dragIndicatorIconTemplate() {
        return this._customDragIndicatorIconTemplate || this.dragIndicatorIconTemplates.first;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set dragIndicatorIconTemplate(val) {
        this._customDragIndicatorIconTemplate = val;
    }
    /**
     * @hidden
     * @return {?}
     */
    get outletDirective() {
        return this._outletDirective;
    }
    /**
     * @hidden
     * @return {?}
     */
    get rowOutletDirective() {
        return this.rowEditingOutletDirective;
    }
    /**
     * @hidden
     * @return {?}
     */
    get parentRowOutletDirective() {
        return this.outletDirective;
    }
    /**
     * @hidden
     * @return {?}
     */
    get rowEditContainer() {
        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;
    }
    /**
     * @hidden
     * @return {?}
     */
    get rowInEditMode() {
        /** @type {?} */
        const editRowState = this.crudService.row;
        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.id) : null;
    }
    /**
     * @hidden
     * @return {?}
     */
    get firstEditableColumnIndex() {
        /** @type {?} */
        const index = this.navigation.gridOrderedColumns.findIndex(e => e.editable);
        return index !== -1 ? index : null;
    }
    /**
     * @hidden
     * @return {?}
     */
    get lastEditableColumnIndex() {
        /** @type {?} */
        const orderedColumns = this.navigation.gridOrderedColumns;
        /** @type {?} */
        const index = orderedColumns.reverse().findIndex(e => e.editable);
        return index !== -1 ? orderedColumns.length - 1 - index : null;
    }
    /**
     * @hidden
     * TODO: Nav service logic doesn't handle 0 results from this querylist
     * @return {?}
     */
    get rowEditTabs() {
        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;
    }
    /**
     * @hidden
     * @return {?}
     */
    get hostClass() {
        return this.getComponentDensityClass('igx-grid');
    }
    /**
     * @return {?}
     */
    get bannerClass() {
        /** @type {?} */
        const position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';
        return `${this.getComponentDensityClass('igx-banner')} ${position}`;
    }
    /**
     * @hidden
     * @return {?}
     */
    get pipeTrigger() {
        return this._pipeTrigger;
    }
    /**
     * @hidden
     * @return {?}
     */
    get filteringPipeTrigger() {
        return this._filteringPipeTrigger;
    }
    /**
     * @hidden
     * @return {?}
     */
    get summaryPipeTrigger() {
        return this._summaryPipeTrigger;
    }
    /**
     * Returns the sorting state of the `IgxGridComponent`.
     * ```typescript
     * const sortingState = this.grid.sortingExpressions;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get sortingExpressions() {
        return this._sortingExpressions;
    }
    /**
     * Sets the sorting state of the `IgxGridComponent`.
     * ```typescript
     * this.grid.sortingExpressions = [{
     *     fieldName: "ID",
     *     dir: SortingDirection.Desc,
     *     ignoreCase: true
     * }];
     * ```
     *
     * Two-way data binding.
     * ```html
     * <igx-grid #grid [data]="Data" [autoGenerate]="true" [(sortingExpressions)]="model.sortingExpressions"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set sortingExpressions(value) {
        this._sortingExpressions = cloneArray(value);
        this.sortingExpressionsChange.emit(this._sortingExpressions);
        this.notifyChanges();
    }
    /**
     * @hidden
     * @return {?}
     */
    get maxLevelHeaderDepth() {
        if (this._maxLevelHeaderDepth === null) {
            this._maxLevelHeaderDepth = this.hasColumnLayouts ?
                this.columnList.reduce((acc, col) => Math.max(acc, col.rowStart), 0) :
                this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);
        }
        return this._maxLevelHeaderDepth;
    }
    /**
     * Returns the number of hidden `IgxColumnComponent`.
     * ```typescript
     * const hiddenCol = this.grid.hiddenColumnsCount;
     * ``
     * @return {?}
     */
    get hiddenColumnsCount() {
        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;
    }
    /**
     * Returns the text to be displayed inside the toggle button
     * for the built-in column hiding UI of the`IgxColumnComponent`.
     * ```typescript
     * const hiddenColText = this.grid.hiddenColumnsText;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get hiddenColumnsText() {
        return this._hiddenColumnsText;
    }
    /**
     * Sets the text to be displayed inside the toggle button
     * for the built-in column hiding UI of the`IgxColumnComponent`.
     * ```typescript
     * <igx-grid [columnHiding]="true" [showToolbar]="true" [hiddenColumnsText]="'Hidden Columns'"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set hiddenColumnsText(value) {
        this._hiddenColumnsText = value;
    }
    /**
     * Returns the text to be displayed inside the toggle button
     * for the built-in column pinning UI of the`IgxColumnComponent`.
     * ```typescript
     * const pinnedText = this.grid.pinnedColumnsText;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get pinnedColumnsText() {
        return this._pinnedColumnsText;
    }
    /**
     * Sets the text to be displayed inside the toggle button
     * for the built-in column pinning UI of the`IgxColumnComponent`.
     * ```html
     * <igx-grid [pinnedColumnsText]="'PinnedCols Text" [data]="data" [width]="'100%'" [height]="'500px'"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @return {?}
     */
    set pinnedColumnsText(value) {
        this._pinnedColumnsText = value;
    }
    /**
     * Get transactions service for the grid.
     * @return {?}
     */
    get transactions() {
        return this._transactions;
    }
    /**
     * @hidden
     * @return {?}
     */
    get currentRowState() {
        return this._currentRowState;
    }
    /**
     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.
     * ```typescript
     * const toolbarGrid = this.grid.showToolbar;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get showToolbar() {
        return this._showToolbar;
    }
    /**
     * Shows or hides the `IgxGridComponent`'s toolbar.
     * ```html
     * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" ></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} newValue
     * @return {?}
     */
    set showToolbar(newValue) {
        if (this._showToolbar !== newValue) {
            this._showToolbar = newValue;
            if (!this._init) {
                this.notifyChanges(true);
            }
        }
    }
    /**
     * Returns the toolbar's title.
     * ```typescript
     * const toolbarTitle  = this.grid.toolbarTitle;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get toolbarTitle() {
        return this._toolbarTitle;
    }
    /**
     * Sets the toolbar's title.
     * ```html
     * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [toolbarTitle]="'My Grid'"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} newValue
     * @return {?}
     */
    set toolbarTitle(newValue) {
        if (this._toolbarTitle !== newValue) {
            this._toolbarTitle = newValue;
            if (!this._init) {
                this.notifyChanges(true);
            }
        }
    }
    /**
     * Returns whether the option for exporting to MS Excel is enabled or disabled.
     * ```typescript
     * cosnt excelExporter = this.grid.exportExcel;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get exportExcel() {
        return this.getExportExcel();
    }
    /**
     * Enable or disable the option for exporting to MS Excel.
     * ```html
     * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [exportExcel]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} newValue
     * @return {?}
     */
    set exportExcel(newValue) {
        if (this._exportExcel !== newValue) {
            this._exportExcel = newValue;
            if (!this._init) {
                this.notifyChanges(true);
            }
        }
    }
    /**
     * Returns whether the option for exporting to CSV is enabled or disabled.
     * ```typescript
     * const exportCsv = this.grid.exportCsv;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get exportCsv() {
        return this.getExportCsv();
    }
    /**
     * Enable or disable the option for exporting to CSV.
     * ```html
     * <igx-grid [data]="localData" [showToolbar]="true" [autoGenerate]="true" [exportCsv]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} newValue
     * @return {?}
     */
    set exportCsv(newValue) {
        if (this._exportCsv !== newValue) {
            this._exportCsv = newValue;
            if (!this._init) {
                this.notifyChanges(true);
            }
        }
    }
    /**
     * Returns the textual content for the main export button.
     * ```typescript
     * const exportText = this.grid.exportText;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get exportText() {
        return this._exportText;
    }
    /**
     * Sets the textual content for the main export button.
     * ```html
     * <igx-grid [data]="localData" [showToolbar]="true" [exportText]="'My Exporter'" [exportCsv]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} newValue
     * @return {?}
     */
    set exportText(newValue) {
        if (this._exportText !== newValue) {
            this._exportText = newValue;
            if (!this._init) {
                this.notifyChanges(true);
            }
        }
    }
    /**
     * Returns the textual content for the MS Excel export button.
     * ```typescript
     * const excelText = this.grid.exportExcelText;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get exportExcelText() {
        return this._exportExcelText;
    }
    /**
     * Sets the textual content for the MS Excel export button.
     * ```html
     * <igx-grid [exportExcelText]="'My Excel Exporter" [showToolbar]="true" [exportText]="'My Exporter'" [exportCsv]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} newValue
     * @return {?}
     */
    set exportExcelText(newValue) {
        if (this._exportExcelText !== newValue) {
            this._exportExcelText = newValue;
            if (!this._init) {
                this.notifyChanges(true);
            }
        }
    }
    /**
     * Returns the textual content for the CSV export button.
     * ```typescript
     * const csvText = this.grid.exportCsvText;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get exportCsvText() {
        return this._exportCsvText;
    }
    /**
     * Sets the textual content for the CSV export button.
     * ```html
     * <igx-grid [exportCsvText]="'My Csv Exporter" [showToolbar]="true" [exportText]="'My Exporter'" [exportExcel]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} newValue
     * @return {?}
     */
    set exportCsvText(newValue) {
        if (this._exportCsvText !== newValue) {
            this._exportCsvText = newValue;
            if (!this._init) {
                this.notifyChanges(true);
            }
        }
    }
    /**
     * Returns the current cell selection state, which can be none, single or multiple
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get cellSelection() {
        return this._cellSelectionMode;
    }
    /**
     * Allows you to set cell selection mode
     * By default the cell selection mode is multiple
     * \@memberof IgxGridBaseComponent
     * @param {?} selectionMode
     * @return {?}
     */
    set cellSelection(selectionMode) {
        this._cellSelectionMode = selectionMode;
        if (this.gridAPI.grid) {
            this.selectionService.clear(true);
            this.notifyChanges();
        }
    }
    /**
     * Returns the current row selection state, which can be none, single or multiple
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get rowSelection() {
        return this._rowSelectionMode;
    }
    /**
     * Allows you to set row selection mode
     * By default the row selection mode is none
     * \@memberof IgxGridBaseComponent
     * @param {?} selectionMode
     * @return {?}
     */
    set rowSelection(selectionMode) {
        this._rowSelectionMode = selectionMode;
        if (this.gridAPI.grid && this.columnList) {
            this.selectionService.clearAllSelectedRows();
            this.notifyChanges(true);
        }
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    hideOverlays() {
        this.overlayIDs.forEach(overlayID => {
            this.overlayService.hide(overlayID);
            this.overlayService.onClosed.pipe(filter(o => o.id === overlayID), takeUntil(this.destroy$)).subscribe(() => {
                this.nativeElement.focus();
            });
        });
    }
    /**
     * @return {?}
     */
    _setupServices() {
        this.gridAPI.grid = this;
        this.crudService.grid = this;
        this.selectionService.grid = this;
        this.navigation.grid = this;
        this.filteringService.grid = this;
        this.summaryService.grid = this;
    }
    /**
     * @return {?}
     */
    _setupListeners() {
        /** @type {?} */
        const destructor = takeUntil(this.destroy$);
        this.onRowAdded.pipe(destructor).subscribe(args => this.refreshGridState(args));
        this.onRowDeleted.pipe(destructor).subscribe(args => {
            this.summaryService.deleteOperation = true;
            this.summaryService.clearSummaryCache(args);
        });
        this.transactions.onStateUpdate.pipe(destructor).subscribe(() => {
            this.selectionService.clearHeaderCBState();
            this.summaryService.clearSummaryCache();
            this._pipeTrigger++;
            this.notifyChanges();
            if (this.transactions.getAggregatedChanges(false).length === 0) {
                // Needs better check, calling 'transactions.clear()' will also trigger this
                if (this.gridAPI.atInexistingPage()) {
                    this.page--;
                }
            }
        });
        this.resizeNotify.pipe(destructor, filter(() => !this._init), throttleTime(100))
            .subscribe(() => {
            this.zone.run(() => {
                this.notifyChanges(true);
            });
        });
        this.onPagingDone.pipe(destructor).subscribe(() => {
            this.endEdit(true);
            this.selectionService.clear(true);
        });
        this.onColumnMoving.pipe(destructor).subscribe(() => this.endEdit(true));
        this.onColumnResized.pipe(destructor).subscribe(() => this.endEdit(true));
        this.overlayService.onOpening.pipe(destructor).subscribe((event) => {
            if (this._advancedFilteringOverlayId === event.id) {
                /** @type {?} */
                const instance = (/** @type {?} */ (event.componentRef.instance));
                if (instance) {
                    instance.initialize(this.filteringService, this.overlayService, event.id);
                }
            }
        });
        this.overlayService.onOpened.pipe(destructor).subscribe((event) => {
            // do not hide the advanced filtering overlay on scroll
            if (this._advancedFilteringOverlayId === event.id) {
                /** @type {?} */
                const instance = (/** @type {?} */ (event.componentRef.instance));
                if (instance) {
                    instance.setAddButtonFocus();
                }
                return;
            }
            if (this.overlayService.getOverlayById(event.id).settings.outlet === this.outletDirective &&
                this.overlayIDs.indexOf(event.id) < 0) {
                this.overlayIDs.push(event.id);
            }
        });
        this.overlayService.onClosed.pipe(destructor, filter(() => !this._init)).subscribe((event) => {
            if (this._advancedFilteringOverlayId === event.id) {
                this._advancedFilteringOverlayId = null;
                return;
            }
            /** @type {?} */
            const ind = this.overlayIDs.indexOf(event.id);
            if (ind !== -1) {
                this.overlayIDs.splice(ind, 1);
            }
        });
        this.verticalScrollContainer.onDataChanging.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {
            /** @type {?} */
            const shouldRecalcSize = this.isPercentHeight &&
                (!this.calcHeight || this.calcHeight === this.getDataBasedBodyHeight() ||
                    this.calcHeight === this.renderedRowHeight * this._defaultTargetRecordNumber);
            if (shouldRecalcSize) {
                this.calculateGridHeight();
                $event.containerSize = this.calcHeight;
            }
            this.evaluateLoadingState();
        });
        this.verticalScrollContainer.onScrollbarVisibilityChanged.pipe(destructor, filter(() => !this._init)).subscribe(() => {
            // called to recalc all widths that may have changes as a result of
            // the vert. scrollbar showing/hiding
            this.notifyChanges(true);
        });
        this.verticalScrollContainer.onContentSizeChange.pipe(destructor, filter(() => !this._init)).subscribe(($event) => {
            this.calculateGridSizes();
        });
        this.onDensityChanged.pipe(destructor).subscribe(() => {
            this.summaryService.summaryHeight = 0;
            this.endEdit(true);
            this.cdr.markForCheck();
        });
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this._setupServices();
        this._setupListeners();
        this.columnListDiffer = this.differs.find([]).create(null);
        this.calcWidth = this.width && this.width.indexOf('%') === -1 ? parseInt(this.width, 10) : 0;
        this.shouldGenerate = this.autoGenerate;
        this._scrollWidth = this.getScrollWidth();
    }
    /**
     * @protected
     * @return {?}
     */
    setupColumns() {
        if (this.autoGenerate) {
            this.autogenerateColumns();
        }
        this.initColumns(this.columnList, (col) => this.onColumnInit.emit(col));
        this.columnListDiffer.diff(this.columnList);
        this.columnList.changes
            .pipe(takeUntil(this.destroy$))
            .subscribe((change) => { this.onColumnsChanged(change); });
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    resetColumnsCaches() {
        this.columnList.forEach(column => column.resetCaches());
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    resetForOfCache() {
        /** @type {?} */
        const firstVirtRow = this.dataRowList.first;
        if (firstVirtRow) {
            if (this._cdrRequests) {
                firstVirtRow.virtDirRow.cdr.detectChanges();
            }
            firstVirtRow.virtDirRow.assumeMaster();
        }
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    resetColumnCollections() {
        this._visibleColumns.length = 0;
        this._pinnedVisible.length = 0;
        this._unpinnedVisible.length = 0;
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    resetCachedWidths() {
        this._unpinnedWidth = NaN;
        this._pinnedWidth = NaN;
        this._totalWidth = NaN;
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    resetCaches() {
        this.resetForOfCache();
        this.resetColumnsCaches();
        this.resetColumnCollections();
        this.resetCachedWidths();
        this.hasVisibleColumns = undefined;
        this._columnGroups = this.columnList.some(col => col.columnGroup);
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterContentInit() {
        this.setupColumns();
    }
    /**
     * @return {?}
     */
    _setupRowObservers() {
        /** @type {?} */
        const elementFilter = (item) => this.isDefined(item.nativeElement.parentElement);
        /** @type {?} */
        const extractForOfs = pipe(map((collection) => collection.filter(elementFilter).map(item => item.virtDirRow)));
        /** @type {?} */
        const rowListObserver = extractForOfs(this._dataRowList.changes);
        /** @type {?} */
        const summaryRowObserver = extractForOfs(this._summaryRowList.changes);
        combineLatest([rowListObserver, summaryRowObserver]).pipe(takeUntil(this.destroy$))
            .subscribe(([row, summary]) => this._horizontalForOfs = [...row, ...summary]);
        this._horizontalForOfs = [
            ...this._dataRowList.filter(elementFilter).map(item => item.virtDirRow),
            ...this._summaryRowList.filter(elementFilter).map(item => item.virtDirRow)
        ];
    }
    /**
     * @return {?}
     */
    _zoneBegoneListeners() {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.addEventListener('keydown', this.keydownHandler);
            this.verticalScrollContainer.getScroll().addEventListener('scroll', this.verticalScrollHandler);
            this.headerContainer.getScroll().addEventListener('scroll', this.horizontalScrollHandler);
            this.observer = new ResizeObserver(() => this.resizeNotify.next());
            this.observer.observe(this.nativeElement);
        });
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterViewInit() {
        this.initPinning();
        this.calculateGridSizes();
        this._init = false;
        this.cdr.reattach();
        this._setupRowObservers();
        this._zoneBegoneListeners();
        /** @type {?} */
        const vertScrDC = this.verticalScrollContainer.displayContainer;
        vertScrDC.addEventListener('scroll', this.scrollHandler);
        vertScrDC.addEventListener('wheel', () => this.wheelHandler());
    }
    /**
     * @param {?=} repaint
     * @return {?}
     */
    notifyChanges(repaint = false) {
        this._cdrRequests = true;
        this._cdrRequestRepaint = repaint;
        this.cdr.markForCheck();
    }
    /**
     * @protected
     * @return {?}
     */
    resetNotifyChanges() {
        this._cdrRequestRepaint = false;
        this._cdrRequests = false;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        super.ngDoCheck();
        if (this._init) {
            return;
        }
        if (this._cdrRequestRepaint) {
            this.resetNotifyChanges();
            this.calculateGridSizes();
            this.refreshSearch(true);
            return;
        }
        if (this._cdrRequests) {
            this.resetNotifyChanges();
            this.cdr.detectChanges();
        }
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    getDragGhostCustomTemplate() {
        if (this.dragGhostCustomTemplates && this.dragGhostCustomTemplates.first) {
            return this.dragGhostCustomTemplates.first;
        }
        return null;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        this.tmpOutlets.forEach((tmplOutlet) => {
            tmplOutlet.cleanCache();
        });
        this.destroy$.next(true);
        this.destroy$.complete();
        this._destroyed = true;
        if (this._advancedFilteringOverlayId) {
            this.overlayService.hide(this._advancedFilteringOverlayId);
        }
        this.zone.runOutsideAngular(() => {
            this.observer.disconnect();
            this.nativeElement.removeEventListener('keydown', this.keydownHandler);
            this.verticalScrollContainer.getScroll().removeEventListener('scroll', this.verticalScrollHandler);
            this.headerContainer.getScroll().removeEventListener('scroll', this.horizontalScrollHandler);
            /** @type {?} */
            const vertScrDC = this.verticalScrollContainer.displayContainer;
            vertScrDC.removeEventListener('scroll', this.scrollHandler);
            vertScrDC.removeEventListener('wheel', () => this.wheelHandler());
        });
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    dataLoading(event) {
        this.onDataPreLoad.emit(event);
    }
    /**
     * Toggles the specified column's visibility.
     * ```typescript
     * this.grid1.toggleColumnVisibility({
     *       column: this.grid1.columns[0],
     *       newValue: true
     * });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} args
     * @return {?}
     */
    toggleColumnVisibility(args) {
        /** @type {?} */
        const col = args.column ? this.columnList.find((c) => c === args.column) : undefined;
        if (!col) {
            return;
        }
        col.hidden = args.newValue;
        this.onColumnVisibilityChanged.emit(args);
    }
    /**
     * Returns the native element of the `IgxGridComponent`.
     * ```typescript
     * const nativeEl = this.grid.nativeElement.
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    get outlet() {
        return this.outletDirective;
    }
    /**
     * Returns the `IgxGridComponent`'s rows height.
     * ```typescript
     * const rowHeigh = this.grid.defaultRowHeight;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get defaultRowHeight() {
        switch (this.displayDensity) {
            case DisplayDensity.cosy:
                return 40;
            case DisplayDensity.compact:
                return 32;
            default:
                return 50;
        }
    }
    /**
     * @return {?}
     */
    get defaultSummaryHeight() {
        switch (this.displayDensity) {
            case DisplayDensity.cosy:
                return 30;
            case DisplayDensity.compact:
                return 24;
            default:
                return 36;
        }
    }
    /**
     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.
     * Used internally for restricting header group component width.
     * The values below depend on the header cell default right/left padding values.
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get defaultHeaderGroupMinWidth() {
        switch (this.displayDensity) {
            case DisplayDensity.cosy:
                return 32;
            case DisplayDensity.compact:
                return 24;
            default:
                return 48;
        }
    }
    /**
     * @return {?}
     */
    paginatorClassName() {
        switch (this.displayDensity) {
            case DisplayDensity.cosy:
                return 'igx-paginator--cosy';
            case DisplayDensity.compact:
                return 'igx-paginator--compact';
            default:
                return 'igx-paginator';
        }
    }
    /**
     * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.
     * The width is 80% of the total grid width.
     * ```typescript
     * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get calcPinnedContainerMaxWidth() {
        return (this.calcWidth * 80) / 100;
    }
    /**
     * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.
     * The width is 20% of the total grid width.
     * ```typescript
     * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get unpinnedAreaMinWidth() {
        return (this.calcWidth * 20) / 100;
    }
    /**
     * Returns the current width of the container for the pinned `IgxColumnComponent`s.
     * ```typescript
     * const pinnedWidth = this.grid.getPinnedWidth;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get pinnedWidth() {
        if (!isNaN(this._pinnedWidth)) {
            return this._pinnedWidth;
        }
        this._pinnedWidth = this.getPinnedWidth();
        return this._pinnedWidth;
    }
    /**
     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.
     * ```typescript
     * const unpinnedWidth = this.grid.getUnpinnedWidth;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get unpinnedWidth() {
        if (!isNaN(this._unpinnedWidth)) {
            return this._unpinnedWidth;
        }
        this._unpinnedWidth = this.getUnpinnedWidth();
        return this._unpinnedWidth;
    }
    /**
     * @return {?}
     */
    get isHorizontalScrollHidden() {
        /** @type {?} */
        const diff = this.unpinnedWidth - this.totalWidth;
        return this.width === null || diff >= 0;
    }
    /**
     * @hidden
     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
     * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.
     * @return {?}
     */
    get featureColumnsWidth() {
        return this.getFeatureColumnsWidth();
    }
    /**
     * @hidden
     * @return {?}
     */
    get summariesMargin() {
        return this.featureColumnsWidth;
    }
    /**
     * Returns an array of `IgxColumnComponent`s.
     * ```typescript
     * const colums = this.grid.columns.
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get columns() {
        return this._columns;
    }
    /**
     * Returns an array of the pinned `IgxColumnComponent`s.
     * ```typescript
     * const pinnedColumns = this.grid.pinnedColumns.
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get pinnedColumns() {
        if (this._pinnedVisible.length) {
            return this._pinnedVisible;
        }
        this._pinnedVisible = this._pinnedColumns.filter(col => !col.hidden);
        return this._pinnedVisible;
    }
    /**
     * Returns an array of unpinned `IgxColumnComponent`s.
     * ```typescript
     * const unpinnedColumns = this.grid.unpinnedColumns.
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get unpinnedColumns() {
        if (this._unpinnedVisible.length) {
            return this._unpinnedVisible;
        }
        this._unpinnedVisible = this._unpinnedColumns.filter((col) => !col.hidden);
        return this._unpinnedVisible;
    }
    /**
     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.
     * \@memberof IgxGridBaseComponent
     * @param {?} column
     * @return {?}
     */
    getHeaderGroupWidth(column) {
        if (this.hasColumnLayouts) {
            return '';
        }
        /** @type {?} */
        const colWidth = column.width;
        /** @type {?} */
        const minWidth = this.defaultHeaderGroupMinWidth;
        /** @type {?} */
        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;
        if (!isPercentageWidth && parseInt(column.width, 10) < minWidth) {
            return minWidth.toString();
        }
        return column.width;
    }
    /**
     * Returns the `IgxColumnComponent` by field name.
     * ```typescript
     * const myCol = this.grid1.getColumnByName("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} name
     * @return {?}
     */
    getColumnByName(name) {
        return this.columnList.find((col) => col.field === name);
    }
    /**
     * Returns the `IgxRowComponent` by index.
     * ```typescript
     * const myRow = this.grid1.getRowByIndex(1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} index
     * @return {?}
     */
    getRowByIndex(index) {
        return this.gridAPI.get_row_by_index(index);
    }
    /**
     * Returns `IgxGridRowComponent` object by the specified primary key .
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * const myRow = this.grid1.getRowByKey("cell5");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} keyValue
     * @return {?}
     */
    getRowByKey(keyValue) {
        return this.gridAPI.get_row_by_key(keyValue);
    }
    /**
     * Returns an array of visible `IgxColumnComponent`s.
     * ```typescript
     * const visibleColumns = this.grid.visibleColumns.
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get visibleColumns() {
        if (this._visibleColumns.length) {
            return this._visibleColumns;
        }
        this._visibleColumns = this.columnList.filter(c => !c.hidden);
        return this._visibleColumns;
    }
    /**
     * Returns the `IgxGridCellComponent` that matches the conditions.
     * ```typescript
     * const myCell = this.grid1.getCellByColumn(2,"UnitPrice");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIndex
     * @param {?} columnField
     * @return {?}
     */
    getCellByColumn(rowIndex, columnField) {
        /** @type {?} */
        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);
        if (columnId !== -1) {
            return this.gridAPI.get_cell_by_index(rowIndex, columnId);
        }
    }
    /**
     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.
     * Requires that the primaryKey property is set.
     * ```typescript
     * grid.getCellByKey(1, 'index');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowSelector match any rowID
     * @param {?} columnField
     * @return {?}
     */
    getCellByKey(rowSelector, columnField) {
        return this.gridAPI.get_cell_by_key(rowSelector, columnField);
    }
    /**
     * Returns the total number of pages.
     * ```typescript
     * const totalPages = this.grid.totalPages;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get totalPages() {
        if (this.pagingState) {
            return this.pagingState.metadata.countPages;
        }
        return -1;
    }
    /**
     * Returns if the current page is the first page.
     * ```typescript
     * const firstPage = this.grid.isFirstPage;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get isFirstPage() {
        return this.page === 0;
    }
    /**
     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.
     * ```typescript
     * this.grid1.nextPage();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    nextPage() {
        if (!this.isLastPage) {
            this.page += 1;
        }
    }
    /**
     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.
     * ```typescript
     * this.grid1.previousPage();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    previousPage() {
        if (!this.isFirstPage) {
            this.page -= 1;
        }
    }
    /**
     * Returns the total number of records.
     * Only functions when paging is enabled.
     * ```typescript
     * const totalRecords = this.grid.totalRecords;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get totalRecords() {
        if (this.pagingState) {
            return this.pagingState.metadata.countRecords;
        }
    }
    /**
     * Returns if the current page is the last page.
     * ```typescript
     * const lastPage = this.grid.isLastPage;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get isLastPage() {
        return this.page + 1 >= this.totalPages;
    }
    /**
     * Returns the total width of the `IgxGridComponent`.
     * ```typescript
     * const gridWidth = this.grid.totalWidth;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get totalWidth() {
        if (!isNaN(this._totalWidth)) {
            return this._totalWidth;
        }
        // Take only top level columns
        /** @type {?} */
        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);
        /** @type {?} */
        let totalWidth = 0;
        /** @type {?} */
        let i = 0;
        for (i; i < cols.length; i++) {
            totalWidth += parseInt(cols[i].calcWidth, 10) || 0;
        }
        this._totalWidth = totalWidth;
        return totalWidth;
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    get showRowSelectors() {
        return this.isRowSelectable && this.hasVisibleColumns && !this.hideRowSelectors;
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    get showDragIcons() {
        return this.rowDraggable && this.columns.length > this.hiddenColumnsCount;
    }
    /**
     * @hidden
     * @protected
     * @param {?} from
     * @param {?} to
     * @param {?} pos
     * @return {?}
     */
    _moveColumns(from, to, pos) {
        /** @type {?} */
        const list = this.columnList.toArray();
        /** @type {?} */
        const fromIndex = list.indexOf(from);
        /** @type {?} */
        let toIndex = list.indexOf(to);
        if (pos === DropPosition.BeforeDropTarget) {
            toIndex--;
            if (toIndex < 0) {
                toIndex = 0;
            }
        }
        if (pos === DropPosition.AfterDropTarget) {
            toIndex++;
        }
        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));
        /** @type {?} */
        const newList = this._resetColumnList(list);
        this.columnList.reset(newList);
        this.columnList.notifyOnChanges();
        this._columns = this.columnList.toArray();
    }
    /**
     * @hidden
     * @protected
     * @param {?=} list
     * @return {?}
     */
    _resetColumnList(list) {
        if (!list) {
            list = this.columnList.toArray();
        }
        /** @type {?} */
        let newList = [];
        list.filter(c => c.level === 0).forEach(p => {
            newList.push(p);
            if (p.columnGroup) {
                newList = newList.concat(p.allChildren);
            }
        });
        return newList;
    }
    /**
     * @hidden
     * @protected
     * @param {?} from
     * @param {?} to
     * @param {?} position
     * @return {?}
     */
    _reorderPinnedColumns(from, to, position) {
        /** @type {?} */
        const pinned = this._pinnedColumns;
        /** @type {?} */
        let dropIndex = pinned.indexOf(to);
        if (to.columnGroup) {
            dropIndex += to.allChildren.length;
        }
        if (position === DropPosition.BeforeDropTarget) {
            dropIndex--;
        }
        if (position === DropPosition.AfterDropTarget) {
            dropIndex++;
        }
        pinned.splice(dropIndex, 0, ...pinned.splice(pinned.indexOf(from), 1));
    }
    /**
     * @hidden
     * @protected
     * @param {?} parent
     * @param {?} from
     * @param {?} to
     * @param {?} pos
     * @return {?}
     */
    _moveChildColumns(parent, from, to, pos) {
        /** @type {?} */
        const buffer = parent.children.toArray();
        /** @type {?} */
        const fromIndex = buffer.indexOf(from);
        /** @type {?} */
        let toIndex = buffer.indexOf(to);
        if (pos === DropPosition.BeforeDropTarget) {
            toIndex--;
        }
        if (pos === DropPosition.AfterDropTarget) {
            toIndex++;
        }
        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));
        parent.children.reset(buffer);
    }
    /**
     * Moves a column to the specified drop target.
     * ```typescript
     * grid.moveColumn(compName, persDetails);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} column
     * @param {?} dropTarget
     * @param {?=} pos
     * @return {?}
     */
    moveColumn(column, dropTarget, pos = DropPosition.None) {
        /** @type {?} */
        let position = pos;
        /** @type {?} */
        const fromIndex = column.visibleIndex;
        /** @type {?} */
        const toIndex = dropTarget.visibleIndex;
        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {
            position = DropPosition.BeforeDropTarget;
        }
        else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {
            position = DropPosition.AfterDropTarget;
        }
        else {
            position = DropPosition.None;
        }
        if ((column.level !== dropTarget.level) ||
            (column.topLevelParent !== dropTarget.topLevelParent)) {
            return;
        }
        this.endEdit(true);
        if (column.level) {
            this._moveChildColumns(column.parent, column, dropTarget, position);
        }
        if (dropTarget.pinned && column.pinned) {
            this._reorderPinnedColumns(column, dropTarget, position);
        }
        if (dropTarget.pinned && !column.pinned) {
            column.pin();
            this._reorderPinnedColumns(column, dropTarget, position);
        }
        if (!dropTarget.pinned && column.pinned) {
            column.unpin();
            /** @type {?} */
            const list = this.columnList.toArray();
            /** @type {?} */
            const fi = list.indexOf(column);
            /** @type {?} */
            const ti = list.indexOf(dropTarget);
            if (pos === DropPosition.BeforeDropTarget && fi < ti) {
                position = DropPosition.BeforeDropTarget;
            }
            else if (pos === DropPosition.AfterDropTarget && fi > ti) {
                position = DropPosition.AfterDropTarget;
            }
            else {
                position = DropPosition.None;
            }
        }
        this._moveColumns(column, dropTarget, position);
        this.notifyChanges();
        if (this.hasColumnLayouts) {
            this.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());
        }
        /** @type {?} */
        const args = {
            source: column,
            target: dropTarget
        };
        this.onColumnMovingEnd.emit(args);
    }
    /**
     * Goes to the desired page index.
     * ```typescript
     * this.grid1.paginate(1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} val
     * @return {?}
     */
    paginate(val) {
        if (val < 0 || val > this.totalPages - 1) {
            return;
        }
        this.page = val;
    }
    /**
     * Manually marks the `IgxGridComponent` for change detection.
     * ```typescript
     * this.grid1.markForCheck();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    markForCheck() {
        this.cdr.detectChanges();
    }
    /**
     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.
     * ```typescript
     * const record = {
     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,
     *     Name: this.newRecord
     * };
     * this.grid1.addRow(record);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} data
     * @return {?}
     */
    addRow(data) {
        // commit pending states prior to adding a row
        this.endEdit(true);
        this.gridAPI.addRowToData(data);
        this.onRowAdded.emit({ data });
        this._pipeTrigger++;
        this.notifyChanges();
    }
    /**
     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * The method accept rowSelector as a parameter, which is the rowID.
     * ```typescript
     * this.grid1.deleteRow(0);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowSelector
     * @return {?}
     */
    deleteRow(rowSelector) {
        if (this.primaryKey !== undefined && this.primaryKey !== null) {
            this.deleteRowById(rowSelector);
        }
    }
    /**
     * @hidden
     * @param {?} rowId
     * @return {?}
     */
    deleteRowById(rowId) {
        this.gridAPI.deleteRowById(rowId);
    }
    /**
     * @hidden
     * @protected
     * @param {?} rowID
     * @param {?} index
     * @return {?}
     */
    deleteRowFromData(rowID, index) {
        //  if there is a row (index !== 0) delete it
        //  if there is a row in ADD or UPDATE state change it's state to DELETE
        if (index !== -1) {
            if (this.transactions.enabled) {
                /** @type {?} */
                const transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };
                this.transactions.add(transaction, this.data[index]);
            }
            else {
                this.data.splice(index, 1);
            }
        }
        else {
            /** @type {?} */
            const state = this.transactions.getState(rowID);
            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);
        }
    }
    /**
     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.
     * Requires that the `primaryKey` property is set.
     * ```typescript
     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value the new value which is to be set.
     * @param {?} rowSelector corresponds to rowID.
     * @param {?} column corresponds to column field.
     * @return {?}
     */
    updateCell(value, rowSelector, column) {
        if (this.isDefined(this.primaryKey)) {
            /** @type {?} */
            const col = this.columnList.toArray().find(c => c.field === column);
            if (col) {
                // Simplify
                /** @type {?} */
                const rowData = this.gridAPI.getRowData(rowSelector);
                /** @type {?} */
                const index = this.gridAPI.get_row_index_in_data(rowSelector);
                // If row passed is invalid
                if (index < 0) {
                    return;
                }
                /** @type {?} */
                const id = {
                    rowID: rowSelector,
                    columnID: col.index,
                    rowIndex: index
                };
                /** @type {?} */
                const cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);
                /** @type {?} */
                const args = this.gridAPI.update_cell(cell, value);
                if (this.crudService.cell && this.crudService.sameCell(cell)) {
                    if (args.cancel) {
                        return;
                    }
                    this.gridAPI.escape_editMode();
                }
                this.cdr.detectChanges();
            }
        }
    }
    /**
     * Updates the `IgxGridRowComponent`, which is specified by
     * rowSelector parameter and the data source record with the passed value.
     * This method will apply requested update only if primary key is specified in the grid.
     * ```typescript
     * grid.updateRow({
     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')
     *   }, 1);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @param {?} rowSelector correspond to rowID
     * @return {?}
     */
    updateRow(value, rowSelector) {
        if (this.isDefined(this.primaryKey)) {
            /** @type {?} */
            const editableCell = this.crudService.cell;
            if (editableCell && editableCell.id.rowID === rowSelector) {
                this.gridAPI.escape_editMode();
            }
            /** @type {?} */
            const row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));
            this.gridAPI.update_row(row, value);
            // TODO: fix for #5934 and probably break for #5763
            // consider adding of third optional boolean parameter in updateRow.
            // If developer set this parameter to true we should call notifyChanges(true), and
            // vise-versa if developer set it to false we should call notifyChanges(false).
            // The parameter should default to false
            this.notifyChanges();
        }
    }
    /**
     * Sort a single `IgxColumnComponent`.
     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.
     * ```typescript
     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} expression
     * @return {?}
     */
    sort(expression) {
        this.endEdit(false);
        if (expression instanceof Array) {
            this.gridAPI.sort_multiple(expression);
        }
        else {
            this.gridAPI.sort(expression);
        }
        this.onSortingDone.emit(expression);
    }
    /**
     * Filters a single `IgxColumnComponent`.
     * ```typescript
     * public filter(term) {
     *      this.grid.filter("ProductName", term, IgxStringFilteringOperand.instance().condition("contains"));
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} name
     * @param {?} value
     * @param {?=} conditionOrExpressionTree
     * @param {?=} ignoreCase
     * @return {?}
     */
    filter(name, value, conditionOrExpressionTree, ignoreCase) {
        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);
    }
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     * ```typescript
     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} value
     * @param {?} condition
     * @param {?=} ignoreCase
     * @return {?}
     */
    filterGlobal(value, condition, ignoreCase) {
        this.filteringService.filterGlobal(value, condition, ignoreCase);
    }
    /**
     * Enables summaries for the specified column and applies your customSummary.
     * If you do not provide the customSummary, then the default summary for the column data type will be applied.
     * ```typescript
     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);
     * ```
     * Enable summaries for the listed columns.
     * ```typescript
     * grid.enableSummaries('ProductName');
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {...?} rest
     * @return {?}
     */
    enableSummaries(...rest) {
        if (rest.length === 1 && Array.isArray(rest[0])) {
            this._multipleSummaries(rest[0], true);
        }
        else {
            this._summaries(rest[0], true, rest[1]);
        }
    }
    /**
     * Disable summaries for the specified column.
     * ```typescript
     * grid.disableSummaries('ProductName');
     * ```
     *
     * Disable summaries for the listed columns.
     * ```typescript
     * grid.disableSummaries([{ fieldName: 'ProductName' }]);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {...?} rest
     * @return {?}
     */
    disableSummaries(...rest) {
        if (rest.length === 1 && Array.isArray(rest[0])) {
            this._disableMultipleSummaries(rest[0]);
        }
        else {
            this._summaries(rest[0], false);
        }
    }
    /**
     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,
     * otherwise clears the filtering state of all `IgxColumnComponent`s.
     * ```typescript
     * this.grid.clearFilter();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} name
     * @return {?}
     */
    clearFilter(name) {
        this.filteringService.clearFilter(name);
    }
    /**
     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,
     * otherwise clears the sorting state of all `IgxColumnComponent`.
     * ```typescript
     * this.grid.clearSort();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} name
     * @return {?}
     */
    clearSort(name) {
        if (!name) {
            this.sortingExpressions = [];
            return;
        }
        if (!this.gridAPI.get_column_by_name(name)) {
            return;
        }
        this.gridAPI.clear_sort(name);
    }
    /**
     * @hidden
     * @param {?=} args
     * @return {?}
     */
    refreshGridState(args) {
        this.endEdit(true);
        this.selectionService.clearHeaderCBState();
        this.summaryService.clearSummaryCache(args);
    }
    // TODO: We have return values here. Move them to event args ??
    /**
     * Pins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} columnName
     * @param {?=} index
     * @return {?}
     */
    pinColumn(columnName, index) {
        /** @type {?} */
        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);
        return col.pin(index);
    }
    /**
     * Unpins a column by field name. Returns whether the operation is successful.
     * ```typescript
     * this.grid.pinColumn("ID");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} columnName
     * @param {?=} index
     * @return {?}
     */
    unpinColumn(columnName, index) {
        /** @type {?} */
        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);
        return col.unpin(index);
    }
    /**
     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.
     * ```typescript
     * this.grid.reflow();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    reflow() {
        this.calculateGridSizes();
    }
    /**
     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findNext("financial");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} text the string to search.
     * @param {?=} caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param {?=} exactMatch optionally, if the text should match the entire value  (defaults to false).
     * @return {?}
     */
    findNext(text, caseSensitive, exactMatch) {
        return this.find(text, 1, caseSensitive, exactMatch);
    }
    /**
     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.
     * Returns how many times the grid contains the string.
     * ```typescript
     * this.grid.findPrev("financial");
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} text the string to search.
     * @param {?=} caseSensitive optionally, if the search should be case sensitive (defaults to false).
     * @param {?=} exactMatch optionally, if the text should match the entire value (defaults to false).
     * @return {?}
     */
    findPrev(text, caseSensitive, exactMatch) {
        return this.find(text, -1, caseSensitive, exactMatch);
    }
    /**
     * Reapplies the existing search.
     * Returns how many times the grid contains the last search.
     * ```typescript
     * this.grid.refreshSearch();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} updateActiveInfo
     * @return {?}
     */
    refreshSearch(updateActiveInfo) {
        if (this.lastSearchInfo.searchText) {
            this.rebuildMatchCache();
            if (updateActiveInfo) {
                /** @type {?} */
                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);
                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {
                    if (match.column === activeInfo.column &&
                        match.row === activeInfo.row &&
                        match.index === activeInfo.index) {
                        this.lastSearchInfo.activeMatchIndex = i;
                    }
                });
            }
            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);
        }
        else {
            return 0;
        }
    }
    /**
     * Removes all the highlights in the cell.
     * ```typescript
     * this.grid.clearSearch();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    clearSearch() {
        this.lastSearchInfo = {
            searchText: '',
            caseSensitive: false,
            exactMatch: false,
            activeMatchIndex: 0,
            matchInfoCache: []
        };
        this.rowList.forEach((row) => {
            if (row.cells) {
                row.cells.forEach((c) => {
                    c.clearHighlight();
                });
            }
        });
    }
    /**
     * Returns if the `IgxGridComponent` has sortable columns.
     * ```typescript
     * const sortableGrid = this.grid.hasSortableColumns;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get hasSortableColumns() {
        return this.columnList.some((col) => col.sortable);
    }
    /**
     * Returns if the `IgxGridComponent` has editable columns.
     * ```typescript
     * const editableGrid = this.grid.hasEditableColumns;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get hasEditableColumns() {
        return this.columnList.some((col) => col.editable);
    }
    /**
     * Returns if the `IgxGridComponent` has fiterable columns.
     * ```typescript
     * const filterableGrid = this.grid.hasFilterableColumns;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get hasFilterableColumns() {
        return this.columnList.some((col) => col.filterable);
    }
    /**
     * Returns if the `IgxGridComponent` has summarized columns.
     * ```typescript
     * const summarizedGrid = this.grid.hasSummarizedColumns;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get hasSummarizedColumns() {
        return this.summaryService.hasSummarizedColumns;
    }
    /**
     * @hidden
     * @return {?}
     */
    get rootSummariesEnabled() {
        return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;
    }
    /**
     * @hidden
     * @return {?}
     */
    get hasVisibleColumns() {
        if (this._hasVisibleColumns === undefined) {
            return this.columnList ? this.columnList.some(c => !c.hidden) : false;
        }
        return this._hasVisibleColumns;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hasVisibleColumns(value) {
        this._hasVisibleColumns = value;
    }
    /**
     * Returns if the `IgxGridComponent` has moveable columns.
     * ```typescript
     * const movableGrid = this.grid.hasMovableColumns;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get hasMovableColumns() {
        return this.columnList && this.columnList.some((col) => col.movable);
    }
    /**
     * Returns if the `IgxGridComponent` has column groups.
     * ```typescript
     * const groupGrid = this.grid.hasColumnGroups;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get hasColumnGroups() {
        return this._columnGroups;
    }
    /**
     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.
     * ```typescript
     * const layoutGrid = this.grid.hasColumnLayouts;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get hasColumnLayouts() {
        return !!this.columnList.some(col => col.columnLayout);
    }
    /**
     * Returns an array of the selected `IgxGridCellComponent`s.
     * ```typescript
     * const selectedCells = this.grid.selectedCells;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get selectedCells() {
        if (this.dataRowList) {
            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))
                .reduce((a, b) => a.concat(b), []);
        }
        return [];
    }
    /**
     * @hidden
     * @return {?}
     */
    get multiRowLayoutRowSize() {
        return this._multiRowLayoutRowSize;
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    get rowBasedHeight() {
        return this.dataLength * this.rowHeight;
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    get isPercentWidth() {
        return this.width && this.width.indexOf('%') !== -1;
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get isPercentHeight() {
        return this._height && this._height.indexOf('%') !== -1;
    }
    /**
     * @hidden
     * Sets columns defaultWidth property
     * @protected
     * @return {?}
     */
    _derivePossibleWidth() {
        if (!this.columnWidthSetByUser) {
            this._columnWidth = this.width !== null ? this.getPossibleColumnWidth() : MINIMUM_COLUMN_WIDTH + 'px';
        }
        this.columnList.forEach((column) => {
            if (this.hasColumnLayouts && parseInt(this._columnWidth, 10)) {
                /** @type {?} */
                const columnWidthCombined = parseInt(this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);
                column.defaultWidth = columnWidthCombined + 'px';
            }
            else {
                column.defaultWidth = this._columnWidth;
                column.resetCaches();
            }
        });
        this.resetCachedWidths();
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    get defaultTargetBodyHeight() {
        /** @type {?} */
        const allItems = this.dataLength;
        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber, this.paging ? Math.min(allItems, this.perPage) : allItems);
    }
    /**
     * @hidden \@internal
     * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases
     * @return {?}
     */
    get renderedRowHeight() {
        return this.rowHeight + 1;
    }
    /**
     * @hidden
     * \@internal
     * @protected
     * @return {?}
     */
    calcGridHeadRow() {
        if (this.maxLevelHeaderDepth) {
            this._baseFontSize = parseFloat(getComputedStyle(this.document.documentElement).getPropertyValue('font-size'));
            /** @type {?} */
            let minSize = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight / this._baseFontSize;
            if (this._allowFiltering && this._filterMode === FilterMode.quickFilter) {
                minSize += (FILTER_ROW_HEIGHT + 1) / this._baseFontSize;
            }
            this.theadRow.nativeElement.style.minHeight = `${minSize}rem`;
        }
    }
    /**
     * @hidden
     * Sets TBODY height i.e. this.calcHeight
     * @protected
     * @return {?}
     */
    calculateGridHeight() {
        this.calcGridHeadRow();
        this.summariesHeight = 0;
        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {
            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();
        }
        this.calcHeight = this._calculateGridBodyHeight();
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    getGroupAreaHeight() {
        return 0;
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    getToolbarHeight() {
        /** @type {?} */
        let toolbarHeight = 0;
        if (this.showToolbar && this.toolbarHtml != null) {
            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?
                this.toolbarHtml.nativeElement.offsetHeight : 0;
        }
        return toolbarHeight;
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    getPagingHeight() {
        /** @type {?} */
        let pagingHeight = 0;
        if (this.paging && this.footer) {
            pagingHeight = this.footer.nativeElement.firstElementChild ?
                this.footer.nativeElement.offsetHeight : 0;
        }
        return pagingHeight;
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    getFilterCellHeight() {
        /** @type {?} */
        const headerGroupNativeEl = (this.headerGroupsList.length !== 0) ?
            this.headerGroupsList[0].element.nativeElement : null;
        /** @type {?} */
        const filterCellNativeEl = (headerGroupNativeEl) ?
            headerGroupNativeEl.querySelector('igx-grid-filtering-cell') : null;
        return (filterCellNativeEl) ? filterCellNativeEl.offsetHeight : 0;
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    _calculateGridBodyHeight() {
        if (!this._height) {
            return null;
        }
        /** @type {?} */
        const actualTheadRow = (!this.allowFiltering || (this.allowFiltering && this.filterMode !== FilterMode.quickFilter)) ?
            this.theadRow.nativeElement.offsetHeight - this.getFilterCellHeight() :
            this.theadRow.nativeElement.offsetHeight;
        /** @type {?} */
        const footerHeight = this.summariesHeight || this.tfoot.nativeElement.offsetHeight - this.tfoot.nativeElement.clientHeight;
        /** @type {?} */
        const toolbarHeight = this.getToolbarHeight();
        /** @type {?} */
        const pagingHeight = this.getPagingHeight();
        /** @type {?} */
        const groupAreaHeight = this.getGroupAreaHeight();
        /** @type {?} */
        const renderedHeight = toolbarHeight + actualTheadRow +
            footerHeight + pagingHeight + groupAreaHeight +
            this.scr.nativeElement.clientHeight;
        /** @type {?} */
        const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('height');
        /** @type {?} */
        let gridHeight = 0;
        if (this.isPercentHeight) {
            /** @type {?} */
            const autoSize = this._shouldAutoSize(renderedHeight);
            if (autoSize || computed.indexOf('%') !== -1) {
                /** @type {?} */
                const bodyHeight = this.getDataBasedBodyHeight();
                return bodyHeight > 0 ? bodyHeight : null;
            }
            gridHeight = parseInt(computed, 10);
        }
        else {
            gridHeight = parseInt(this._height, 10);
        }
        /** @type {?} */
        const height = Math.abs(gridHeight - renderedHeight);
        if (height === 0 || isNaN(gridHeight)) {
            /** @type {?} */
            const bodyHeight = this.defaultTargetBodyHeight;
            return bodyHeight > 0 ? bodyHeight : null;
        }
        return height;
    }
    /**
     * @protected
     * @return {?}
     */
    checkContainerSizeChange() {
        /** @type {?} */
        const origHeight = this.nativeElement.parentElement.offsetHeight;
        this.nativeElement.style.display = 'none';
        /** @type {?} */
        const height = this.nativeElement.parentElement.offsetHeight;
        this.nativeElement.style.display = '';
        return origHeight !== height;
    }
    /**
     * @protected
     * @param {?} renderedHeight
     * @return {?}
     */
    _shouldAutoSize(renderedHeight) {
        this.tbody.nativeElement.style.display = 'none';
        /** @type {?} */
        let res = !this.nativeElement.parentElement ||
            this.nativeElement.parentElement.clientHeight === 0 ||
            this.nativeElement.parentElement.clientHeight === renderedHeight;
        if (!isChromium()) {
            // If grid causes the parent container to extend (for example when container is flex)
            // we should always auto-size since the actual size of the container will continuously change as the grid renders elements.
            res = this.checkContainerSizeChange();
        }
        this.tbody.nativeElement.style.display = '';
        return res;
    }
    /**
     * @return {?}
     */
    get outerWidth() {
        return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;
    }
    /**
     * @hidden
     * Gets the visible content height that includes header + tbody + footer.
     * @return {?}
     */
    getVisibleContentHeight() {
        /** @type {?} */
        let height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;
        if (this.hasSummarizedColumns) {
            height += this.tfoot.nativeElement.clientHeight;
        }
        return height;
    }
    /**
     * @hidden
     * @param {?=} baseWidth
     * @return {?}
     */
    getPossibleColumnWidth(baseWidth = null) {
        /** @type {?} */
        let computedWidth;
        if (baseWidth !== null) {
            computedWidth = baseWidth;
        }
        else {
            computedWidth = this.calcWidth ||
                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);
        }
        computedWidth -= this.getFeatureColumnsWidth();
        if (this.showDragIcons) {
            computedWidth -= this.headerDragContainer ? this.headerDragContainer.nativeElement.offsetWidth : 0;
        }
        /** @type {?} */
        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);
        // Column layouts related
        /** @type {?} */
        let visibleCols = [];
        /** @type {?} */
        const columnBlocks = this.visibleColumns.filter(c => c.columnGroup);
        /** @type {?} */
        const colsPerBlock = columnBlocks.map(block => block.getInitialChildColumnSizes(block.children));
        /** @type {?} */
        const combinedBlocksSize = colsPerBlock.reduce((acc, item) => acc + item.length, 0);
        colsPerBlock.forEach(blockCols => visibleCols = visibleCols.concat(blockCols));
        //
        /** @type {?} */
        const columnsWithSetWidths = this.hasColumnLayouts ?
            visibleCols.filter(c => c.widthSetByUser) :
            visibleChildColumns.filter(c => c.widthSetByUser);
        /** @type {?} */
        const columnsToSize = this.hasColumnLayouts ?
            combinedBlocksSize - columnsWithSetWidths.length :
            visibleChildColumns.length - columnsWithSetWidths.length;
        /** @type {?} */
        const sumExistingWidths = columnsWithSetWidths
            .reduce((prev, curr) => {
            /** @type {?} */
            const colWidth = curr.width;
            /** @type {?} */
            const widthValue = parseInt(colWidth, 10);
            /** @type {?} */
            const currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?
                widthValue / 100 * computedWidth :
                widthValue;
            return prev + currWidth;
        }, 0);
        // When all columns are hidden, return 0px width
        if (!sumExistingWidths && !columnsToSize) {
            return '0px';
        }
        /** @type {?} */
        const columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?
            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :
            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));
        return columnWidth.toString();
    }
    /**
     * @hidden
     * Sets grid width i.e. this.calcWidth
     * @protected
     * @return {?}
     */
    calculateGridWidth() {
        /** @type {?} */
        let width;
        /** @type {?} */
        const computed = this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width');
        if (this.isPercentWidth) {
            /* width in %*/
            width = computed.indexOf('%') === -1 ? parseInt(computed, 10) : null;
        }
        else {
            width = parseInt(this.width, 10);
        }
        if (!width && this.nativeElement) {
            width = this.nativeElement.offsetWidth;
        }
        if (this.width === null || !width) {
            width = this.getColumnWidthSum();
        }
        if (this.hasVerticalSroll() && this.width !== null) {
            width -= this.scrollWidth;
        }
        if ((Number.isFinite(width) || width === null) && width !== this.calcWidth) {
            this.calcWidth = width;
        }
        this._derivePossibleWidth();
    }
    /**
     * @private
     * @return {?}
     */
    getColumnWidthSum() {
        /** @type {?} */
        let colSum = 0;
        /** @type {?} */
        const cols = this.hasColumnLayouts ?
            this.visibleColumns.filter(x => x.columnLayout) : this.visibleColumns.filter(x => !x.columnGroup);
        cols.forEach((item) => {
            /** @type {?} */
            const isWidthInPercent = item.width && typeof item.width === 'string' && item.width.indexOf('%') !== -1;
            if (isWidthInPercent) {
                item.width = item.calcWidth || MINIMUM_COLUMN_WIDTH + 'px';
            }
            colSum += parseInt((item.width || item.defaultWidth), 10) || MINIMUM_COLUMN_WIDTH;
        });
        if (!colSum) {
            return null;
        }
        this.cdr.detectChanges();
        colSum += this.getFeatureColumnsWidth();
        return colSum;
    }
    /**
     * @return {?}
     */
    hasVerticalSroll() {
        if (this._init) {
            return false;
        }
        /** @type {?} */
        const isScrollable = this.verticalScrollContainer ? this.verticalScrollContainer.isScrollable() : false;
        return !!(this.calcWidth && this.dataView &&
            this.dataView.length > 0 &&
            isScrollable);
    }
    /**
     * @hidden \@internal
     * @protected
     * @return {?}
     */
    getDataBasedBodyHeight() {
        return !this.data || (this.data.length < this._defaultTargetRecordNumber) ?
            0 : this.defaultTargetBodyHeight;
    }
    /**
     * @hidden
     * @protected
     * @param {?} change
     * @return {?}
     */
    onColumnsChanged(change) {
        /** @type {?} */
        const diff = this.columnListDiffer.diff(change);
        if (diff) {
            /** @type {?} */
            let added = false;
            /** @type {?} */
            let removed = false;
            this.initColumns(this.columnList);
            diff.forEachAddedItem((record) => {
                this.onColumnInit.emit(record.item);
                added = true;
            });
            diff.forEachRemovedItem((record) => {
                /** @type {?} */
                const isColumnGroup = record.item instanceof IgxColumnGroupComponent;
                if (!isColumnGroup) {
                    // Clear Grouping
                    this.gridAPI.clear_groupby(record.item.field);
                    // Clear Filtering
                    this.gridAPI.clear_filter(record.item.field);
                    // Close filter row
                    if (this.filteringService.isFilterRowVisible
                        && this.filteringService.filteredColumn
                        && this.filteringService.filteredColumn.field === record.item.field) {
                        this.filteringRow.close();
                    }
                    // Clear Sorting
                    this.gridAPI.clear_sort(record.item.field);
                }
                removed = true;
            });
            this.resetCaches();
            if (added || removed) {
                this.summaryService.clearSummaryCache();
                Promise.resolve().then(() => {
                    // `onColumnsChanged` can be executed midway a current detectChange cycle and markForCheck will be ignored then.
                    // This ensures that we will wait for the current cycle to end so we can trigger a new one and ngDoCheck to fire.
                    this.notifyChanges(true);
                });
            }
        }
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    calculateGridSizes() {
        /*
            TODO: (R.K.) This layered lasagne should be refactored
            ASAP. The reason I have to reset the caches so many times is because
            after teach `detectChanges` call they are filled with invalid
            state. Of course all of this happens midway through the grid
            sizing process which of course, uses values from the caches, thus resulting
            in a broken layout.
        */
        this.resetCaches();
        this.cdr.detectChanges();
        /** @type {?} */
        const hasScroll = this.hasVerticalSroll();
        this.calculateGridWidth();
        this.resetCaches();
        this.cdr.detectChanges();
        this.calculateGridHeight();
        if (this.rowEditable) {
            this.repositionRowEditingOverlay(this.rowInEditMode);
        }
        if (this.filteringService.isFilterRowVisible) {
            this.filteringRow.resetChipsArea();
        }
        this.cdr.detectChanges();
        // in case scrollbar has appeared recalc to size correctly.
        if (hasScroll !== this.hasVerticalSroll()) {
            this.calculateGridWidth();
            this.cdr.detectChanges();
        }
        if (this.zone.isStable) {
            this.zone.run(() => {
                this._applyWidthHostBinding();
                this.cdr.detectChanges();
            });
        }
        else {
            this.zone.onStable.pipe(first()).subscribe(() => {
                this.zone.run(() => {
                    this._applyWidthHostBinding();
                });
            });
        }
        this.resetCaches();
    }
    /**
     * @private
     * @return {?}
     */
    _applyWidthHostBinding() {
        /** @type {?} */
        let width = this._width;
        if (width === null) {
            /** @type {?} */
            let currentWidth = this.calcWidth;
            if (this.hasVerticalSroll()) {
                currentWidth += this.scrollWidth;
            }
            width = currentWidth + 'px';
            this.resetCaches();
        }
        this._hostWidth = width;
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.
     * Method used to override the calculations.
     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.
     * @return {?}
     */
    getFeatureColumnsWidth() {
        /** @type {?} */
        let width = 0;
        if (this.isRowSelectable) {
            width += this.headerSelectorContainer ? this.headerSelectorContainer.nativeElement.getBoundingClientRect().width : 0;
        }
        if (this.rowDraggable) {
            width += this.headerDragContainer ? this.headerDragContainer.nativeElement.getBoundingClientRect().width : 0;
        }
        return width;
    }
    /**
     * Gets calculated width of the pinned area.
     * ```typescript
     * const pinnedWidth = this.grid.getPinnedWidth();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} takeHidden If we should take into account the hidden columns in the pinned area.
     * @return {?}
     */
    getPinnedWidth(takeHidden = false) {
        /** @type {?} */
        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;
        /** @type {?} */
        let sum = 0;
        for (const col of fc) {
            if (col.level === 0) {
                sum += parseInt(col.calcWidth, 10);
            }
        }
        sum += this.featureColumnsWidth;
        return sum;
    }
    /**
     * @hidden
     * Gets calculated width of the unpinned area
     * \@memberof IgxGridBaseComponent
     * @protected
     * @param {?=} takeHidden If we should take into account the hidden columns in the pinned area.
     * @return {?}
     */
    getUnpinnedWidth(takeHidden = false) {
        /** @type {?} */
        let width = this.isPercentWidth ?
            this.calcWidth :
            parseInt(this.width, 10) || parseInt(this.hostWidth, 10) || this.calcWidth;
        if (this.hasVerticalSroll() && !this.isPercentWidth) {
            width -= this.scrollWidth;
        }
        return width - this.getPinnedWidth(takeHidden);
    }
    /**
     * @hidden
     * @protected
     * @param {?} fieldName
     * @param {?} hasSummary
     * @param {?=} summaryOperand
     * @return {?}
     */
    _summaries(fieldName, hasSummary, summaryOperand) {
        /** @type {?} */
        const column = this.gridAPI.get_column_by_name(fieldName);
        if (column) {
            column.hasSummary = hasSummary;
            if (summaryOperand) {
                if (this.rootSummariesEnabled) {
                    this.summaryService.retriggerRootPipe++;
                }
                column.summaries = summaryOperand;
            }
        }
    }
    /**
     * @hidden
     * @protected
     * @param {?} expressions
     * @param {?} hasSummary
     * @return {?}
     */
    _multipleSummaries(expressions, hasSummary) {
        expressions.forEach((element) => {
            this._summaries(element.fieldName, hasSummary, element.customSummary);
        });
    }
    /**
     * @hidden
     * @protected
     * @param {?} expressions
     * @return {?}
     */
    _disableMultipleSummaries(expressions) {
        expressions.forEach((column) => {
            /** @type {?} */
            const columnName = column && column.fieldName ? column.fieldName : column;
            this._summaries(columnName, false);
        });
    }
    /**
     * @hidden
     * @protected
     * @param {?} rec
     * @return {?}
     */
    resolveDataTypes(rec) {
        if (typeof rec === 'number') {
            return DataType.Number;
        }
        else if (typeof rec === 'boolean') {
            return DataType.Boolean;
        }
        else if (typeof rec === 'object' && rec instanceof Date) {
            return DataType.Date;
        }
        return DataType.String;
    }
    /**
     * @private
     * @return {?}
     */
    getScrollWidth() {
        /** @type {?} */
        const div = document.createElement('div');
        /** @type {?} */
        const style = div.style;
        style.width = '100px';
        style.height = '100px';
        style.position = 'absolute';
        style.top = '-10000px';
        style.top = '-10000px';
        style.overflow = 'scroll';
        document.body.appendChild(div);
        /** @type {?} */
        const scrollWidth = div.offsetWidth - div.clientWidth;
        document.body.removeChild(div);
        return scrollWidth;
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    autogenerateColumns() {
        /** @type {?} */
        const data = this.gridAPI.get_data();
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);
        /** @type {?} */
        const fields = this.generateDataFields(data);
        /** @type {?} */
        const columns = [];
        fields.forEach((field) => {
            /** @type {?} */
            const ref = factory.create(this.viewRef.injector);
            ref.instance.field = field;
            ref.instance.dataType = this.resolveDataTypes(data[0][field]);
            ref.changeDetectorRef.detectChanges();
            columns.push(ref.instance);
        });
        this.columnList.reset(columns);
        if (data && data.length > 0) {
            this.shouldGenerate = false;
        }
    }
    /**
     * @protected
     * @param {?} data
     * @return {?}
     */
    generateDataFields(data) {
        return Object.keys(data && data.length !== 0 ? data[0] : []);
    }
    /**
     * @hidden
     * @param {?} arr
     * @return {?}
     */
    onlyTopLevel(arr) {
        return arr.filter(c => c.level === 0);
    }
    /**
     * @hidden
     * @protected
     * @param {?} collection
     * @param {?=} cb
     * @return {?}
     */
    initColumns(collection, cb = null) {
        this._columnGroups = this.columnList.some(col => col.columnGroup);
        if (this.hasColumnLayouts) {
            // Set overall row layout size
            this.columnList.forEach((col) => {
                if (col.columnLayout) {
                    /** @type {?} */
                    const layoutSize = col.children ?
                        col.children.reduce((acc, val) => Math.max(val.rowStart + val.gridRowSpan - 1, acc), 1) :
                        1;
                    this._multiRowLayoutRowSize = Math.max(layoutSize, this._multiRowLayoutRowSize);
                }
            });
        }
        if (this.hasColumnLayouts && this.hasColumnGroups) {
            // invalid configuration - multi-row and column groups
            // remove column groups
            /** @type {?} */
            const columnLayoutColumns = this.columnList.filter((col) => col.columnLayout || col.columnLayoutChild);
            this.columnList.reset(columnLayoutColumns);
        }
        this._maxLevelHeaderDepth = null;
        this._columns = this.columnList.toArray();
        collection.forEach((column) => {
            column.defaultWidth = this.columnWidthSetByUser ? this._columnWidth : column.defaultWidth ? column.defaultWidth : '';
            if (cb) {
                cb(column);
            }
        });
        this.reinitPinStates();
        if (this.hasColumnLayouts) {
            collection.forEach((column) => {
                column.populateVisibleIndexes();
            });
        }
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    reinitPinStates() {
        this._pinnedColumns = (this.hasColumnGroups) ? this.columnList.filter((c) => c.pinned) :
            this.columnList.filter((c) => c.pinned).sort((a, b) => this._pinnedColumns.indexOf(a) - this._pinnedColumns.indexOf(b));
        this._unpinnedColumns = this.columnList.filter((c) => !c.pinned);
    }
    /**
     * @hidden
     * @param {?} fieldName
     * @return {?}
     */
    isColumnGrouped(fieldName) {
        return false;
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onHeaderSelectorClick(event) {
        if (!this.isMultiRowSelectionEnabled) {
            return;
        }
        this.selectionService.areAllRowSelected() ?
            this.selectionService.clearRowSelection(event) : this.selectionService.selectAllRows(event);
    }
    /**
     * @hidden
     * \@internal
     * @param {?} rec
     * @return {?}
     */
    isGroupByRecord(rec) {
        return false;
    }
    /**
     * @hidden
     * @return {?}
     */
    get headSelectorBaseAriaLabel() {
        if (this._filteringExpressionsTree.filteringOperands.length > 0) {
            return this.selectionService.areAllRowSelected() ? 'Deselect all filtered' : 'Select all filtered';
        }
        return this.selectionService.areAllRowSelected() ? 'Deselect all' : 'Select all';
    }
    /**
     * @hidden
     * \@internal
     * @return {?}
     */
    get totalRowsCountAfterFilter() {
        if (this.data) {
            return this.selectionService.allData.length;
        }
        return 0;
    }
    /**
     * Returns the currently transformed paged/filtered/sorted/grouped data, displayed in the grid.
     * ```typescript
     *      const dataView = this.grid.dataView;
     * ```
     * \@memberof IgxGridComponent
     * @return {?}
     */
    get dataView() {
        return this.verticalScrollContainer.igxForOf;
    }
    /**
     * Get current selection state.
     * Returns an array with selected rows' IDs (primaryKey or rowData)
     * ```typescript
     * const selectedRows = this.grid.selectedRows();
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    selectedRows() {
        return this.selectionService.getSelectedRows();
    }
    /**
     * Select specified rows by ID.
     * ```typescript
     * this.grid.selectRows([1,2,5], true);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIDs
     * @param {?=} clearCurrentSelection if true clears the current selection
     * @return {?}
     */
    selectRows(rowIDs, clearCurrentSelection) {
        this.selectionService.selectRowsWithNoEvent(rowIDs, clearCurrentSelection);
        this.notifyChanges();
    }
    /**
     * Deselect specified rows by ID.
     * ```typescript
     * this.grid.deselectRows([1,2,5]);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIDs
     * @return {?}
     */
    deselectRows(rowIDs) {
        this.selectionService.deselectRowsWithNoEvent(rowIDs);
        this.notifyChanges();
    }
    /**
     * Selects all rows
     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.
     * ```typescript
     * this.grid.selectAllRows();
     * this.grid.selectAllRows(false);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} onlyFilterData
     * @return {?}
     */
    selectAllRows(onlyFilterData = true) {
        /** @type {?} */
        const data = onlyFilterData && this.filteredData ? this.filteredData : this.gridAPI.get_all_data(true);
        /** @type {?} */
        const rowIDs = this.selectionService.getRowIDs(data).filter(rID => !this.gridAPI.row_deleted_transaction(rID));
        this.selectRows(rowIDs);
    }
    /**
     * Deselects all rows
     * Note: By default if filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.
     * If you set the parameter onlyFilterData to false that will select all rows in the grid exept deleted rows.
     * ```typescript
     * this.grid.deselectAllRows();
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?=} onlyFilterData
     * @return {?}
     */
    deselectAllRows(onlyFilterData = true) {
        if (onlyFilterData && this.filteredData && this.filteredData.length > 0) {
            this.deselectRows(this.selectionService.getRowIDs(this.filteredData));
        }
        else {
            this.selectionService.clearAllSelectedRows();
            this.notifyChanges();
        }
    }
    /**
     * @return {?}
     */
    clearCellSelection() {
        this.selectionService.clear(true);
        this.notifyChanges();
    }
    /**
     * @param {?} dir
     * @return {?}
     */
    dragScroll(dir) {
        /** @type {?} */
        const scrollDelta = 48;
        /** @type {?} */
        const horizontal = this.headerContainer.getScroll();
        /** @type {?} */
        const vertical = this.verticalScrollContainer.getScroll();
        switch (dir) {
            case DragScrollDirection.LEFT:
                horizontal.scrollLeft -= scrollDelta;
                break;
            case DragScrollDirection.RIGHT:
                horizontal.scrollLeft += scrollDelta;
                break;
            case DragScrollDirection.TOP:
                vertical.scrollTop -= scrollDelta;
                break;
            case DragScrollDirection.BOTTOM:
                vertical.scrollTop += scrollDelta;
                break;
            case DragScrollDirection.BOTTOMLEFT:
                horizontal.scrollLeft -= scrollDelta;
                vertical.scrollTop += scrollDelta;
                break;
            case DragScrollDirection.BOTTOMRIGHT:
                horizontal.scrollLeft += scrollDelta;
                vertical.scrollTop += scrollDelta;
                break;
            case DragScrollDirection.TOPLEFT:
                horizontal.scrollLeft -= scrollDelta;
                vertical.scrollTop -= scrollDelta;
                break;
            case DragScrollDirection.TOPRIGHT:
                horizontal.scrollLeft += scrollDelta;
                vertical.scrollTop -= scrollDelta;
                break;
            default:
                return;
        }
        this.wheelHandler();
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    isDefined(arg) {
        return arg !== undefined && arg !== null;
    }
    /**
     * @param {?} arg
     * @return {?}
     */
    selectRange(arg) {
        if (!this.isDefined(arg)) {
            this.clearCellSelection();
            return;
        }
        if (arg instanceof Array) {
            arg.forEach(range => this.setSelection(range));
        }
        else {
            this.setSelection(arg);
        }
        this.notifyChanges();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    columnToVisibleIndex(field) {
        /** @type {?} */
        const visibleColumns = this.visibleColumns;
        if (typeof field === 'number') {
            return field;
        }
        return visibleColumns.find(column => column.field === field).visibleIndex;
    }
    /**
     * @param {?} range
     * @return {?}
     */
    setSelection(range) {
        /** @type {?} */
        const startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };
        /** @type {?} */
        const endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };
        this.selectionService.pointerState.node = startNode;
        this.selectionService.selectRange(endNode, this.selectionService.pointerState);
        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);
        this.selectionService.initPointerState();
    }
    /**
     * @return {?}
     */
    getSelectedRanges() {
        return this.selectionService.ranges;
    }
    /**
     * @protected
     * @param {?} source
     * @param {?=} formatters
     * @param {?=} headers
     * @return {?}
     */
    extractDataFromSelection(source, formatters = false, headers = false) {
        /** @type {?} */
        let columnsArray;
        /** @type {?} */
        let record = {};
        /** @type {?} */
        const selectedData = [];
        /** @type {?} */
        const activeEl = this.selectionService.activeElement;
        /** @type {?} */
        const selectionMap = Array.from(this.selectionService.selection)
            .filter((tuple) => tuple[0] < source.length);
        if (this.cellSelection === GridSelectionMode.single && activeEl) {
            selectionMap.push([activeEl.row, new Set().add(activeEl.column)]);
        }
        for (const [row, set] of selectionMap) {
            if (!source[row]) {
                continue;
            }
            /** @type {?} */
            const temp = Array.from(set);
            for (const each of temp) {
                columnsArray = this.getSelectableColumnsAt(each);
                columnsArray.forEach((col) => {
                    if (col) {
                        /** @type {?} */
                        const key = headers ? col.header || col.field : col.field;
                        record[key] = formatters && col.formatter ? col.formatter(source[row][col.field])
                            : source[row][col.field];
                    }
                });
            }
            if (Object.keys(record).length) {
                selectedData.push(record);
            }
            record = {};
        }
        return selectedData;
    }
    /**
     * @protected
     * @param {?} index
     * @return {?}
     */
    getSelectableColumnsAt(index) {
        if (this.hasColumnLayouts) {
            /** @type {?} */
            const visibleLayoutColumns = this.visibleColumns
                .filter(col => col.columnLayout)
                .sort((a, b) => a.visibleIndex - b.visibleIndex);
            /** @type {?} */
            const colLayout = visibleLayoutColumns[index];
            return colLayout ? colLayout.children.toArray() : [];
        }
        else {
            /** @type {?} */
            const visibleColumns = this.visibleColumns
                .filter(col => !col.columnGroup)
                .sort((a, b) => a.visibleIndex - b.visibleIndex);
            return [visibleColumns[index]];
        }
    }
    /**
     *
     * Returns an array of the current cell selection in the form of `[{ column.field: cell.value }, ...]`.
     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).
     * If `headers` is enabled, it will use the column header (if any) instead of the column field.
     * @param {?=} formatters
     * @param {?=} headers
     * @return {?}
     */
    getSelectedData(formatters = false, headers = false) {
        /** @type {?} */
        const source = this.dataView;
        return this.extractDataFromSelection(source, formatters, headers);
    }
    /**
     * @return {?}
     */
    copyHandlerIE() {
        if (isIE()) {
            this.copyHandler(null, true);
        }
    }
    /**
     * @hidden
     * \@internal
     * @param {?} event
     * @param {?=} ie11
     * @return {?}
     */
    copyHandler(event, ie11 = false) {
        if (!this.clipboardOptions.enabled || this.crudService.inEditMode) {
            return;
        }
        /** @type {?} */
        const data = this.getSelectedData(this.clipboardOptions.copyFormatters, this.clipboardOptions.copyHeaders);
        /** @type {?} */
        const ev = (/** @type {?} */ ({ data, cancel: false }));
        this.onGridCopy.emit(ev);
        if (ev.cancel) {
            return;
        }
        /** @type {?} */
        const transformer = new CharSeparatedValueData(ev.data, this.clipboardOptions.separator);
        /** @type {?} */
        let result = transformer.prepareData();
        if (!this.clipboardOptions.copyHeaders) {
            result = result.substring(result.indexOf('\n') + 1);
        }
        if (ie11) {
            ((/** @type {?} */ (window))).clipboardData.setData('Text', result);
            return;
        }
        event.preventDefault();
        /* Necessary for the hiearachical case but will probably have to
           change how getSelectedData is propagated in the hiearachical grid
        */
        event.stopPropagation();
        event.clipboardData.setData('text/plain', result);
    }
    /**
     * This method allows you to navigate to a position
     * in the grid based on provided `rowindex` and `visibleColumnIndex`,
     * also to execute a custom logic over the target element,
     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }
     * ```typescript
     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} rowIndex
     * @param {?=} visibleColIndex
     * @param {?=} cb
     * @return {?}
     */
    navigateTo(rowIndex, visibleColIndex = -1, cb = null) {
        if (rowIndex < 0 || rowIndex > this.dataView.length - 1
            || (visibleColIndex !== -1 && this.columnList.map(col => col.visibleIndex).indexOf(visibleColIndex) === -1)) {
            return;
        }
        this.wheelHandler();
        if (this.dataView.slice(rowIndex, rowIndex + 1).find(rec => rec.expression || rec.childGridsData)) {
            visibleColIndex = -1;
        }
        /** @type {?} */
        const shouldScrollVertically = this.navigation.shouldPerformVerticalScroll(rowIndex, visibleColIndex);
        /** @type {?} */
        const shouldScrollHorizontally = visibleColIndex !== -1 && !this.navigation.isColumnFullyVisible(visibleColIndex);
        if (shouldScrollVertically) {
            this.navigation.performVerticalScrollToCell(rowIndex, visibleColIndex, () => { this.navigateTo(rowIndex, visibleColIndex, cb); });
        }
        else if (shouldScrollHorizontally) {
            this.navigation.performHorizontalScrollToCell(rowIndex, visibleColIndex, false, () => { this.navigateTo(rowIndex, visibleColIndex, cb); });
        }
        else {
            this.executeCallback(rowIndex, visibleColIndex, cb);
        }
    }
    /**
     * Returns `ICellPosition` which defines the next cell,
     * according to the current position, that match specific criteria.
     * You can pass callback function as a third parameter of `getPreviousCell` method.
     * The callback function accepts IgxColumnComponent as a param
     * ```typescript
     *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} currRowIndex
     * @param {?} curVisibleColIndex
     * @param {?=} callback
     * @return {?}
     */
    getNextCell(currRowIndex, curVisibleColIndex, callback = null) {
        /** @type {?} */
        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);
        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {
            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
        }
        /** @type {?} */
        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => a - b) :
            columns.map(editCol => editCol.visibleIndex).sort((a, b) => a - b);
        /** @type {?} */
        const nextCellIndex = colIndexes.find(index => index > curVisibleColIndex);
        if (this.dataView.slice(currRowIndex, currRowIndex + 1)
            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && nextCellIndex !== undefined) {
            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };
        }
        else {
            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {
                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
            }
            else {
                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };
            }
        }
    }
    /**
     * Returns `ICellPosition` which defines the previous cell,
     * according to the current position, that match specific criteria.
     * You can pass callback function as a third parameter of `getPreviousCell` method.
     * The callback function accepts IgxColumnComponent as a param
     * ```typescript
     *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);
     * ```
     * \@memberof IgxGridBaseComponent
     * @param {?} currRowIndex
     * @param {?} curVisibleColIndex
     * @param {?=} callback
     * @return {?}
     */
    getPreviousCell(currRowIndex, curVisibleColIndex, callback = null) {
        /** @type {?} */
        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);
        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {
            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
        }
        /** @type {?} */
        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => b - a) :
            columns.map(editCol => editCol.visibleIndex).sort((a, b) => b - a);
        /** @type {?} */
        const prevCellIndex = colIndexes.find(index => index < curVisibleColIndex);
        if (this.dataView.slice(currRowIndex, currRowIndex + 1)
            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && prevCellIndex !== undefined) {
            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };
        }
        else {
            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {
                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };
            }
            else {
                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };
            }
        }
    }
    /**
     * @private
     * @param {?} rowIndex
     * @param {?=} visibleColIndex
     * @param {?=} cb
     * @return {?}
     */
    executeCallback(rowIndex, visibleColIndex = -1, cb = null) {
        if (!cb) {
            return;
        }
        /** @type {?} */
        let targetType;
        /** @type {?} */
        let target;
        /** @type {?} */
        const row = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);
        if (!row) {
            return;
        }
        switch (row.nativeElement.tagName.toLowerCase()) {
            case 'igx-grid-groupby-row':
                targetType = GridKeydownTargetType.groupRow;
                target = row;
                break;
            case 'igx-grid-summary-row':
                targetType = GridKeydownTargetType.summaryCell;
                target = visibleColIndex !== -1 ?
                    row.summaryCells.find(c => c.visibleColumnIndex === visibleColIndex) : row.summaryCells.first;
                break;
            case 'igx-child-grid-row':
                targetType = GridKeydownTargetType.hierarchicalRow;
                target = row;
                break;
            default:
                targetType = GridKeydownTargetType.dataCell;
                target = visibleColIndex !== -1 ? row.cells.find(c => c.visibleColumnIndex === visibleColIndex) : row.cells.first;
                break;
        }
        /** @type {?} */
        const args = { targetType: targetType, target: target };
        cb(args);
    }
    /**
     * @private
     * @param {?} currentRowIndex
     * @return {?}
     */
    getPrevDataRowIndex(currentRowIndex) {
        if (currentRowIndex <= 0) {
            return currentRowIndex;
        }
        /** @type {?} */
        const prevRow = this.dataView.slice(0, currentRowIndex).reverse()
            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);
        return prevRow ? this.dataView.indexOf(prevRow) : currentRowIndex;
    }
    /**
     * @private
     * @param {?} currentRowIndex
     * @return {?}
     */
    getNextDataRowIndex(currentRowIndex) {
        if (currentRowIndex === this.dataView.length) {
            return currentRowIndex;
        }
        /** @type {?} */
        const nextRow = this.dataView.slice(currentRowIndex + 1, this.dataView.length)
            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);
        return nextRow ? this.dataView.indexOf(nextRow) : currentRowIndex;
    }
    /**
     * @private
     * @param {?} rowIndex
     * @param {?} colIndex
     * @return {?}
     */
    isValidPosition(rowIndex, colIndex) {
        /** @type {?} */
        const rows = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).length;
        /** @type {?} */
        const cols = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0).length;
        if (rows < 1 || cols < 1) {
            return false;
        }
        if (rowIndex > -1 && rowIndex < this.dataView.length &&
            colIndex > -1 && colIndex <= this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex) {
            return true;
        }
        return false;
    }
    /**
     * @hidden
     * @param {?} index
     * @param {?} col
     * @return {?}
     */
    trackColumnChanges(index, col) {
        return col.field + col._calcWidth;
    }
    /**
     * @private
     * @param {?} text
     * @param {?} increment
     * @param {?=} caseSensitive
     * @param {?=} exactMatch
     * @param {?=} scroll
     * @return {?}
     */
    find(text, increment, caseSensitive, exactMatch, scroll) {
        if (!this.rowList) {
            return 0;
        }
        this.endEdit(false);
        if (!text) {
            this.clearSearch();
            return 0;
        }
        /** @type {?} */
        const caseSensitiveResolved = caseSensitive ? true : false;
        /** @type {?} */
        const exactMatchResolved = exactMatch ? true : false;
        /** @type {?} */
        let rebuildCache = false;
        if (this.lastSearchInfo.searchText !== text ||
            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||
            this.lastSearchInfo.exactMatch !== exactMatchResolved) {
            this.lastSearchInfo = {
                searchText: text,
                activeMatchIndex: 0,
                caseSensitive: caseSensitiveResolved,
                exactMatch: exactMatchResolved,
                matchInfoCache: []
            };
            rebuildCache = true;
        }
        else {
            this.lastSearchInfo.activeMatchIndex += increment;
        }
        if (rebuildCache) {
            this.rowList.forEach((row) => {
                if (row.cells) {
                    row.cells.forEach((c) => {
                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);
                    });
                }
            });
            this.rebuildMatchCache();
        }
        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {
            this.lastSearchInfo.activeMatchIndex = 0;
        }
        else if (this.lastSearchInfo.activeMatchIndex < 0) {
            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;
        }
        if (this.lastSearchInfo.matchInfoCache.length) {
            /** @type {?} */
            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];
            this.lastSearchInfo = Object.assign({}, this.lastSearchInfo);
            if (scroll !== false) {
                this.scrollTo(matchInfo.row, matchInfo.column);
            }
            IgxTextHighlightDirective.setActiveHighlight(this.id, {
                column: matchInfo.column,
                row: matchInfo.row,
                index: matchInfo.index,
            });
        }
        else {
            IgxTextHighlightDirective.clearActiveHighlight(this.id);
        }
        return this.lastSearchInfo.matchInfoCache.length;
    }
    /**
     * Returns an array containing the filtered sorted data.
     * ```typescript
     * const filteredSortedData = this.grid1.filteredSortedData;
     * ```
     * \@memberof IgxGridBaseComponent
     * @return {?}
     */
    get filteredSortedData() {
        return this._filteredSortedData;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set filteredSortedData(value) {
        this._filteredSortedData = value;
        this.refreshSearch(true);
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    initPinning() {
        /** @type {?} */
        let currentPinnedWidth = 0;
        /** @type {?} */
        const pinnedColumns = [];
        /** @type {?} */
        const unpinnedColumns = [];
        /** @type {?} */
        const newUnpinnedCols = [];
        this.calculateGridWidth();
        this.resetCaches();
        // When a column is a group or is inside a group, pin all related.
        this._pinnedColumns.forEach(col => {
            if (col.parent) {
                col.parent.pinned = true;
            }
            if (col.columnGroup) {
                col.children.forEach(child => child.pinned = true);
            }
        });
        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.
        // We take into account top level columns (top level groups and non groups).
        // If top level is unpinned the pinning handles all children to be unpinned as well.
        for (let i = 0; i < this._columns.length; i++) {
            if (this._columns[i].pinned && !this._columns[i].parent) {
                // Pinned column. Check if with it the unpinned min width is exceeded.
                /** @type {?} */
                const colWidth = parseInt(this._columns[i].width, 10);
                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {
                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.
                    this._columns[i].pinned = false;
                    unpinnedColumns.push(this._columns[i]);
                    newUnpinnedCols.push(this._columns[i]);
                }
                else {
                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.
                    currentPinnedWidth += colWidth;
                    pinnedColumns.push(this._columns[i]);
                }
            }
            else if (this._columns[i].pinned && this._columns[i].parent) {
                if (this._columns[i].topLevelParent.pinned) {
                    pinnedColumns.push(this._columns[i]);
                }
                else {
                    this._columns[i].pinned = false;
                    unpinnedColumns.push(this._columns[i]);
                }
            }
            else {
                unpinnedColumns.push(this._columns[i]);
            }
        }
        if (newUnpinnedCols.length) {
            console.warn('igxGrid - The pinned area exceeds maximum pinned width. ' +
                'The following columns were unpinned to prevent further issues:' +
                newUnpinnedCols.map(col => '"' + col.header + '"').toString() + '. For more info see our documentation.');
        }
        // Assign the applicaple collections.
        this._pinnedColumns = pinnedColumns;
        this._unpinnedColumns = unpinnedColumns;
        this.notifyChanges();
    }
    /**
     * @hidden
     * @protected
     * @param {?} row
     * @param {?} column
     * @param {?=} inCollection
     * @return {?}
     */
    scrollTo(row, column, inCollection = this.filteredSortedData) {
        /** @type {?} */
        let delayScrolling = false;
        if (this.paging && typeof (row) !== 'number') {
            /** @type {?} */
            const rowIndex = inCollection.indexOf(row);
            /** @type {?} */
            const page = Math.floor(rowIndex / this.perPage);
            if (this.page !== page) {
                delayScrolling = true;
                this.page = page;
            }
        }
        if (delayScrolling) {
            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {
                this.scrollDirective(this.verticalScrollContainer, typeof (row) === 'number' ? row : this.dataView.indexOf(row));
            });
        }
        else {
            this.scrollDirective(this.verticalScrollContainer, typeof (row) === 'number' ? row : this.dataView.indexOf(row));
        }
        this.scrollToHorizontally(column);
    }
    /**
     * @hidden
     * @protected
     * @param {?} column
     * @return {?}
     */
    scrollToHorizontally(column) {
        /** @type {?} */
        let columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;
        /** @type {?} */
        const scrollRow = this.rowList.find(r => r.virtDirRow);
        /** @type {?} */
        const virtDir = scrollRow ? scrollRow.virtDirRow : null;
        if (this.pinnedColumns.length) {
            if (columnIndex >= this.pinnedColumns.length) {
                columnIndex -= this.pinnedColumns.length;
                this.scrollDirective(virtDir, columnIndex);
            }
        }
        else {
            this.scrollDirective(virtDir, columnIndex);
        }
    }
    /**
     * @hidden
     * @protected
     * @param {?} directive
     * @param {?} goal
     * @return {?}
     */
    scrollDirective(directive, goal) {
        if (!directive) {
            return;
        }
        directive.scrollTo(goal);
    }
    /**
     * @private
     * @return {?}
     */
    rebuildMatchCache() {
        this.lastSearchInfo.matchInfoCache = [];
        /** @type {?} */
        const caseSensitive = this.lastSearchInfo.caseSensitive;
        /** @type {?} */
        const exactMatch = this.lastSearchInfo.exactMatch;
        /** @type {?} */
        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();
        /** @type {?} */
        const data = this.filteredSortedData;
        /** @type {?} */
        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);
        /** @type {?} */
        const numberPipe = new IgxDecimalPipeComponent(this.locale);
        /** @type {?} */
        const datePipe = new IgxDatePipeComponent(this.locale);
        data.forEach((dataRow) => {
            columnItems.forEach((c) => {
                /** @type {?} */
                const value = c.formatter ? c.formatter(dataRow[c.field]) :
                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], this.locale) :
                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], this.locale)
                            : dataRow[c.field];
                if (value !== undefined && value !== null && c.searchable) {
                    /** @type {?} */
                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();
                    if (exactMatch) {
                        if (searchValue === searchText) {
                            this.lastSearchInfo.matchInfoCache.push({
                                row: dataRow,
                                column: c.field,
                                index: 0,
                            });
                        }
                    }
                    else {
                        /** @type {?} */
                        let occurenceIndex = 0;
                        /** @type {?} */
                        let searchIndex = searchValue.indexOf(searchText);
                        while (searchIndex !== -1) {
                            this.lastSearchInfo.matchInfoCache.push({
                                row: dataRow,
                                column: c.field,
                                index: occurenceIndex++,
                            });
                            searchValue = searchValue.substring(searchIndex + searchText.length);
                            searchIndex = searchValue.indexOf(searchText);
                        }
                    }
                }
            });
        });
    }
    /**
     * @hidden
     * @param {?} _group
     * @return {?}
     */
    isExpandedGroup(_group) {
        return undefined;
    }
    /**
     * @protected
     * @param {?} row
     * @return {?}
     */
    changeRowEditingOverlayStateOnScroll(row) {
        if (!this.rowEditable || !this.rowEditingOverlay || this.rowEditingOverlay.collapsed) {
            return;
        }
        if (!row) {
            this.toggleRowEditingOverlay(false);
        }
        else {
            this.repositionRowEditingOverlay(row);
        }
    }
    /**
     * Should be called when data and/or isLoading input changes so that the overlay can be
     * hidden/shown based on the current value of shouldOverlayLoading
     * @protected
     * @return {?}
     */
    evaluateLoadingState() {
        if (this.shouldOverlayLoading) {
            // a new overlay should be shown
            /** @type {?} */
            const overlaySettings = {
                outlet: this.loadingOutlet,
                closeOnOutsideClick: false,
                positionStrategy: new ContainerPositionStrategy()
            };
            if (!this._loadingId) {
                this._loadingId = this.overlayService.attach(this.loadingOverlay, overlaySettings);
                this.overlayService.show(this._loadingId, overlaySettings);
            }
        }
        else {
            if (this._loadingId) {
                this.overlayService.hide(this._loadingId);
                this._loadingId = null;
            }
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    openRowOverlay(id) {
        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);
        this.rowEditingOverlay.open(this.rowEditSettings);
        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;
        this.rowEditingOverlay.element.addEventListener('wheel', this.rowEditingWheelHandler);
    }
    /**
     * @hidden
     * @return {?}
     */
    closeRowEditingOverlay() {
        this.rowEditingOverlay.element.removeEventListener('wheel', this.rowEditingWheelHandler);
        this.rowEditPositioningStrategy.isTopInitialPosition = null;
        this.rowEditingOverlay.close();
        this.rowEditingOverlay.element.parentElement.style.display = '';
    }
    /**
     * @hidden
     * @param {?} show
     * @return {?}
     */
    toggleRowEditingOverlay(show) {
        /** @type {?} */
        const rowStyle = this.rowEditingOverlay.element.style;
        if (show) {
            rowStyle.display = 'block';
        }
        else {
            rowStyle.display = 'none';
        }
    }
    /**
     * @hidden
     * @param {?} row
     * @return {?}
     */
    repositionRowEditingOverlay(row) {
        if (row && !this.rowEditingOverlay.collapsed) {
            /** @type {?} */
            const rowStyle = this.rowEditingOverlay.element.parentElement.style;
            if (row) {
                rowStyle.display = '';
                this.configureRowEditingOverlay(row.rowID);
                this.rowEditingOverlay.reposition();
            }
            else {
                rowStyle.display = 'none';
            }
        }
    }
    /**
     * @private
     * @param {?} rowID
     * @param {?=} useOuter
     * @return {?}
     */
    configureRowEditingOverlay(rowID, useOuter = false) {
        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;
        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;
        /** @type {?} */
        const targetRow = this.gridAPI.get_row_by_key(rowID);
        if (!targetRow) {
            return;
        }
        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;
        this.toggleRowEditingOverlay(true);
    }
    /**
     * @hidden
     * @return {?}
     */
    get rowChangesCount() {
        if (!this.crudService.row) {
            return 0;
        }
        /** @type {?} */
        const rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);
        return rowChanges ? Object.keys(rowChanges).length : 0;
    }
    /**
     * @protected
     * @param {?} rowIndex
     * @param {?} value
     * @return {?}
     */
    writeToData(rowIndex, value) {
        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);
    }
    /**
     * @param {?} commit
     * @param {?} row
     * @return {?}
     */
    endRowTransaction(commit, row) {
        row.newData = this.transactions.getAggregatedValue(row.id, true);
        /** @type {?} */
        let args = row.createEditEventArgs();
        if (!commit) {
            this.onRowEditCancel.emit(args);
            this.transactions.endPending(false);
        }
        else {
            args = this.gridAPI.update_row(row, row.newData);
        }
        if (args.cancel) {
            this.transactions.startPending();
            return;
        }
        this.crudService.endRowEdit();
        this.closeRowEditingOverlay();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    gridOutletKeyboardHandler(event) {
        // TODO: This should be removed after grid keyboard refactoring
        // call stopPropagation for keydown event for the outlet not to propagate event to the grid
        event.stopPropagation();
    }
    // TODO: Refactor
    /**
     * Finishes the row transactions on the current row.
     * If `commit === true`, passes them from the pending state to the data (or transaction service)
     *
     * Binding to the event
     * ```html
     * <button igxButton (click)="grid.endEdit(true)">Commit Row</button>
     * ```
     * @param {?=} commit
     * @param {?=} event
     * @return {?}
     */
    endEdit(commit = true, event) {
        /** @type {?} */
        const row = this.crudService.row;
        /** @type {?} */
        const cell = this.crudService.cell;
        // TODO: Merge the crudService with wht BaseAPI service
        if (!row && !cell) {
            return;
        }
        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();
        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {
            return;
        }
        this.endRowTransaction(commit, row);
        /** @type {?} */
        const activeCell = this.selectionService.activeElement;
        if (event && activeCell) {
            /** @type {?} */
            const rowIndex = activeCell.row;
            /** @type {?} */
            const visibleColIndex = activeCell.layout ? activeCell.layout.columnVisibleIndex : activeCell.column;
            this.navigateTo(rowIndex, visibleColIndex, (c) => {
                if (c.targetType === GridKeydownTargetType.dataCell && c.target) {
                    c.target.nativeElement.focus();
                }
            });
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    get dataWithAddedInTransactionRows() {
        /** @type {?} */
        const result = (/** @type {?} */ (cloneArray(this.gridAPI.get_all_data())));
        if (this.transactions.enabled) {
            result.push(...this.transactions.getAggregatedChanges(true)
                .filter(t => t.type === TransactionType.ADD)
                .map(t => t.newValue));
        }
        return result;
    }
    /**
     * @return {?}
     */
    get dataLength() {
        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;
    }
    /**
     * @return {?}
     */
    hasHorizontalScroll() {
        return this.totalWidth - this.unpinnedWidth > 0;
    }
    /**
     * @protected
     * @param {?} row
     * @return {?}
     */
    _restoreVirtState(row) {
        // check virtualization state of data record added from cache
        // in case state is no longer valid - update it.
        /** @type {?} */
        const rowForOf = row.virtDirRow;
        /** @type {?} */
        const gridScrLeft = rowForOf.getScroll().scrollLeft;
        /** @type {?} */
        const left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);
        /** @type {?} */
        const actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);
        if (gridScrLeft !== actualScrollLeft) {
            rowForOf.onHScroll(gridScrLeft);
        }
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    getExportExcel() {
        return this._exportExcel;
    }
    /**
     * @hidden
     * @protected
     * @return {?}
     */
    getExportCsv() {
        return this._exportCsv;
    }
    /**
     * @hidden
     * @return {?}
     */
    get shouldOverlayLoading() {
        return this.isLoading && this.data && this.data.length > 0;
    }
    /**
     * @hidden
     * @param {?} rowData
     * @return {?}
     */
    isSummaryRow(rowData) {
        return rowData.summaries && (rowData.summaries instanceof Map);
    }
    /**
     * @hidden
     * @return {?}
     */
    get isMultiRowSelectionEnabled() {
        return this.rowSelection === GridSelectionMode.multiple;
    }
    /**
     * @hidden
     * @return {?}
     */
    get isRowSelectable() {
        return this.rowSelection !== GridSelectionMode.none;
    }
    /**
     * @hidden
     * @return {?}
     */
    get isCellSelectable() {
        return this.cellSelection !== GridSelectionMode.none;
    }
    /**
     * @hidden
     * @param {?} args
     * @return {?}
     */
    viewDetachHandler(args) {
        /** @type {?} */
        const context = args.view.context;
        if (context['templateID'] === 'dataRow') {
            // some browsers (like FireFox and Edge) do not trigger onBlur when the focused element is detached from DOM
            // hence we need to trigger it manually when cell is detached.
            /** @type {?} */
            const row = this.getRowByIndex(context.index);
            /** @type {?} */
            const focusedCell = row.cells.find(x => x.focused);
            if (focusedCell) {
                focusedCell.onBlur();
            }
        }
    }
    /**
     * @hidden
     * @param {?} args
     * @return {?}
     */
    cachedViewLoaded(args) {
        if (args.context['templateID'] === 'dataRow' && args.context['$implicit'] === args.oldContext['$implicit']) {
            args.view.detectChanges();
            /** @type {?} */
            const row = this.getRowByIndex(args.context.index);
            if (row && row.cells) {
                row.cells.forEach((c) => {
                    c.highlightText(this.lastSearchInfo.searchText, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch);
                });
            }
        }
        if (this.hasHorizontalScroll()) {
            /** @type {?} */
            const tmplId = args.context.templateID;
            /** @type {?} */
            const index = args.context.index;
            args.view.detectChanges();
            /** @type {?} */
            const row = tmplId === 'dataRow' ? this.getRowByIndex(index) : null;
            /** @type {?} */
            const summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.find((sr) => sr.dataRowIndex === index) : null;
            if (row && row instanceof IgxRowComponent) {
                this._restoreVirtState(row);
            }
            else if (summaryRow) {
                this._restoreVirtState(summaryRow);
            }
        }
    }
    /**
     * Opens the advanced filtering dialog.
     * @return {?}
     */
    openAdvancedFilteringDialog() {
        if (!this._advancedFilteringOverlayId) {
            this._advancedFilteringOverlaySettings.positionStrategy.settings.target =
                ((/** @type {?} */ (this))).rootGrid ? ((/** @type {?} */ (this))).rootGrid.nativeElement : this.nativeElement;
            this._advancedFilteringOverlaySettings.outlet = this.outletDirective;
            this._advancedFilteringOverlayId = this.overlayService.attach(IgxAdvancedFilteringDialogComponent, this._advancedFilteringOverlaySettings, {
                injector: this.viewRef.injector,
                componentFactoryResolver: this.resolver
            });
            this.overlayService.show(this._advancedFilteringOverlayId, this._advancedFilteringOverlaySettings);
        }
    }
    /**
     * Closes the advanced filtering dialog.
     * @param {?} applyChanges indicates whether the changes should be applied
     * @return {?}
     */
    closeAdvancedFilteringDialog(applyChanges) {
        if (this._advancedFilteringOverlayId) {
            /** @type {?} */
            const advancedFilteringOverlay = this.overlayService.getOverlayById(this._advancedFilteringOverlayId);
            /** @type {?} */
            const advancedFilteringDialog = (/** @type {?} */ (advancedFilteringOverlay.componentRef.instance));
            if (applyChanges) {
                advancedFilteringDialog.applyChanges();
            }
            advancedFilteringDialog.closeDialog();
        }
    }
}
IgxGridBaseComponent.decorators = [
    { type: Injectable }
];
/** @nocollapse */
IgxGridBaseComponent.ctorParameters = () => [
    { type: IgxGridSelectionService },
    { type: IgxGridCRUDService },
    { type: IgxColumnResizingService },
    { type: GridBaseAPIService },
    { type: undefined, decorators: [{ type: Inject, args: [IgxGridTransaction,] }] },
    { type: ElementRef },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: IterableDiffers },
    { type: ViewContainerRef },
    { type: IgxGridNavigationService },
    { type: IgxFilteringService },
    { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
    { type: IgxGridSummaryService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
IgxGridBaseComponent.propDecorators = {
    defaultExpandedTemplate: [{ type: ViewChild, args: ['defaultExpandedTemplate', { read: TemplateRef, static: true },] }],
    defaultCollapsedTemplate: [{ type: ViewChild, args: ['defaultCollapsedTemplate', { read: TemplateRef, static: true },] }],
    resourceStrings: [{ type: Input }],
    autoGenerate: [{ type: Input }],
    emptyGridTemplate: [{ type: Input }],
    loadingGridTemplate: [{ type: Input }],
    filteringLogic: [{ type: Input }],
    filteringExpressionsTree: [{ type: Input }],
    filteringExpressionsTreeChange: [{ type: Output }],
    advancedFilteringExpressionsTreeChange: [{ type: Output }],
    advancedFilteringExpressionsTree: [{ type: Input }],
    locale: [{ type: Input }],
    paging: [{ type: Input }],
    page: [{ type: Input }],
    pageChange: [{ type: Output }],
    perPage: [{ type: Input }],
    perPageChange: [{ type: Output }],
    paginationTemplate: [{ type: Input }],
    columnHiding: [{ type: Input }],
    rowSelectable: [{ type: Input }],
    hideRowSelectors: [{ type: Input }],
    rowDraggable: [{ type: Input }],
    rowEditable: [{ type: Input }],
    height: [{ type: HostBinding, args: ['style.height',] }, { type: Input }],
    hostWidth: [{ type: HostBinding, args: ['style.width',] }],
    width: [{ type: Input }],
    evenRowCSS: [{ type: Input }],
    oddRowCSS: [{ type: Input }],
    rowHeight: [{ type: Input }],
    columnWidth: [{ type: Input }],
    primaryKey: [{ type: Input }],
    emptyGridMessage: [{ type: Input }],
    isLoading: [{ type: Input }],
    emptyFilteredGridMessage: [{ type: Input }],
    columnHidingTitle: [{ type: Input }],
    columnPinning: [{ type: Input }],
    columnPinningTitle: [{ type: Input }],
    allowFiltering: [{ type: Input }],
    allowAdvancedFiltering: [{ type: Input }],
    filterMode: [{ type: Input }],
    summaryPosition: [{ type: Input }],
    summaryCalculationMode: [{ type: Input }],
    filterStrategy: [{ type: Input }],
    uniqueColumnValuesStrategy: [{ type: Input }],
    onCellClick: [{ type: Output }],
    onSelection: [{ type: Output }],
    onRowSelectionChange: [{ type: Output }],
    onColumnPinning: [{ type: Output }],
    onCellEditCancel: [{ type: Output }],
    onCellEditEnter: [{ type: Output }],
    onCellEdit: [{ type: Output }],
    onRowEditEnter: [{ type: Output }],
    onRowEdit: [{ type: Output }],
    onRowEditCancel: [{ type: Output }],
    onColumnInit: [{ type: Output }],
    onSortingDone: [{ type: Output }],
    onFilteringDone: [{ type: Output }],
    onPagingDone: [{ type: Output }],
    onRowAdded: [{ type: Output }],
    onRowDeleted: [{ type: Output }],
    onDataPreLoad: [{ type: Output }],
    onColumnResized: [{ type: Output }],
    onContextMenu: [{ type: Output }],
    onDoubleClick: [{ type: Output }],
    onColumnVisibilityChanged: [{ type: Output }],
    onColumnMovingStart: [{ type: Output }],
    onColumnMoving: [{ type: Output }],
    onColumnMovingEnd: [{ type: Output }],
    onGridKeydown: [{ type: Output }],
    onRowDragStart: [{ type: Output }],
    onRowDragEnd: [{ type: Output }],
    onGridCopy: [{ type: Output }],
    resizeLine: [{ type: ViewChild, args: [IgxGridColumnResizerComponent, { static: false },] }],
    loadingOverlay: [{ type: ViewChild, args: ['loadingOverlay', { static: true },] }],
    loadingOutlet: [{ type: ViewChild, args: ['igxLoadingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true },] }],
    columnList: [{ type: ContentChildren, args: [IgxColumnComponent, { read: IgxColumnComponent, descendants: true },] }],
    excelStyleSortingTemplateDirective: [{ type: ContentChild, args: [IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective, static: false },] }],
    excelStyleMovingTemplateDirective: [{ type: ContentChild, args: [IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective, static: false },] }],
    excelStyleHidingTemplateDirective: [{ type: ContentChild, args: [IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective, static: false },] }],
    excelStylePinningTemplateDirective: [{ type: ContentChild, args: [IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective, static: false },] }],
    excelStyleLoadingValuesTemplateDirective: [{ type: ContentChild, args: [IgxExcelStyleLoadingValuesTemplateDirective, { read: IgxExcelStyleLoadingValuesTemplateDirective, static: true },] }],
    headerGroups: [{ type: ViewChildren, args: [IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent },] }],
    _rowList: [{ type: ViewChildren, args: ['row',] }],
    _summaryRowList: [{ type: ViewChildren, args: ['summaryRow', { read: IgxSummaryRowComponent },] }],
    _dataRowList: [{ type: ViewChildren, args: [IgxRowComponent, { read: IgxRowComponent },] }],
    emptyFilteredGridTemplate: [{ type: ViewChild, args: ['emptyFilteredGrid', { read: TemplateRef, static: true },] }],
    emptyGridDefaultTemplate: [{ type: ViewChild, args: ['defaultEmptyGrid', { read: TemplateRef, static: true },] }],
    loadingGridDefaultTemplate: [{ type: ViewChild, args: ['defaultLoadingGrid', { read: TemplateRef, static: true },] }],
    parentVirtDir: [{ type: ViewChild, args: ['scrollContainer', { read: IgxGridForOfDirective, static: true },] }],
    toolbarCustomContentTemplates: [{ type: ContentChildren, args: [IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false },] }],
    headSelectorsTemplates: [{ type: ContentChildren, args: [IgxHeadSelectorDirective, { read: IgxHeadSelectorDirective, descendants: false },] }],
    rowSelectorsTemplates: [{ type: ContentChildren, args: [IgxRowSelectorDirective, { read: IgxRowSelectorDirective, descendants: false },] }],
    dragGhostCustomTemplates: [{ type: ContentChildren, args: [IgxRowDragGhostDirective, { read: TemplateRef, descendants: false },] }],
    dragIndicatorIconTemplates: [{ type: ContentChildren, args: [IgxDragIndicatorIconDirective, { read: TemplateRef, descendants: false },] }],
    verticalScrollContainer: [{ type: ViewChild, args: ['verticalScrollContainer', { read: IgxGridForOfDirective, static: true },] }],
    verticalScroll: [{ type: ViewChild, args: ['verticalScrollHolder', { read: IgxGridForOfDirective, static: true },] }],
    scr: [{ type: ViewChild, args: ['scr', { read: ElementRef, static: true },] }],
    footer: [{ type: ViewChild, args: ['footer', { read: ElementRef, static: false },] }],
    headerContainer: [{ type: ViewChild, args: ['hContainer', { read: IgxGridForOfDirective, static: true },] }],
    headerSelectorContainer: [{ type: ViewChild, args: ['headerSelectorContainer', { static: false },] }],
    headerDragContainer: [{ type: ViewChild, args: ['headerDragContainer', { static: false },] }],
    headerGroupContainer: [{ type: ViewChild, args: ['headerGroupContainer', { static: false },] }],
    filteringRow: [{ type: ViewChild, args: ['filteringRow', { read: IgxGridFilteringRowComponent, static: false },] }],
    theadRow: [{ type: ViewChild, args: ['theadRow', { static: true },] }],
    tbody: [{ type: ViewChild, args: ['tbody', { static: true },] }],
    tfoot: [{ type: ViewChild, args: ['tfoot', { static: true },] }],
    _outletDirective: [{ type: ViewChild, args: ['igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective, static: true },] }],
    rowEditingOutletDirective: [{ type: ViewChild, args: ['igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true },] }],
    tmpOutlets: [{ type: ViewChildren, args: [IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective },] }],
    dragIndicatorIconBase: [{ type: ViewChild, args: ['dragIndicatorIconBase', { read: TemplateRef, static: true },] }],
    defaultRowEditTemplate: [{ type: ViewChild, args: ['defaultRowEditTemplate', { read: TemplateRef, static: true },] }],
    rowEditCustom: [{ type: ContentChild, args: [IgxRowEditTemplateDirective, { read: TemplateRef, static: false },] }],
    rowEditText: [{ type: ContentChild, args: [IgxRowEditTextDirective, { read: TemplateRef, static: false },] }],
    rowEditActions: [{ type: ContentChild, args: [IgxRowEditActionsDirective, { read: TemplateRef, static: false },] }],
    rowExpandedIndicatorTemplate: [{ type: ContentChild, args: [IgxRowExpandedIndicatorDirective, { read: TemplateRef, static: false },] }],
    rowCollapsedIndicatorTemplate: [{ type: ContentChild, args: [IgxRowCollapsedIndicatorDirective, { read: TemplateRef, static: false },] }],
    headerExpandIndicatorTemplate: [{ type: ContentChild, args: [IgxHeaderExpandIndicatorDirective, { read: TemplateRef, static: false },] }],
    headerCollapseIndicatorTemplate: [{ type: ContentChild, args: [IgxHeaderCollapseIndicatorDirective, { read: TemplateRef, static: false },] }],
    rowEditTabsDEFAULT: [{ type: ViewChildren, args: [IgxRowEditTabStopDirective,] }],
    rowEditTabsCUSTOM: [{ type: ContentChildren, args: [IgxRowEditTabStopDirective,] }],
    rowEditingOverlay: [{ type: ViewChild, args: [IgxToggleDirective, { static: false },] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    hostClass: [{ type: HostBinding, args: ['attr.class',] }],
    hostRole: [{ type: HostBinding, args: ['attr.role',] }],
    sortingExpressions: [{ type: Input }],
    sortingExpressionsChange: [{ type: Output }],
    hiddenColumnsText: [{ type: Input }],
    pinnedColumnsText: [{ type: Input }],
    toolbar: [{ type: ViewChild, args: ['toolbar', { read: IgxGridToolbarComponent, static: false },] }],
    toolbarHtml: [{ type: ViewChild, args: ['toolbar', { read: ElementRef, static: false },] }],
    showToolbar: [{ type: Input }],
    toolbarTitle: [{ type: Input }],
    exportExcel: [{ type: Input }],
    exportCsv: [{ type: Input }],
    exportText: [{ type: Input }],
    exportExcelText: [{ type: Input }],
    exportCsvText: [{ type: Input }],
    clipboardOptions: [{ type: Input }],
    cellSelection: [{ type: Input }],
    rowSelection: [{ type: Input }],
    onToolbarExporting: [{ type: Output }],
    onRangeSelection: [{ type: Output }]
};
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], IgxGridBaseComponent.prototype, "filteringLogic", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxGridBaseComponent.prototype, "filteringExpressionsTree", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxGridBaseComponent.prototype, "advancedFilteringExpressionsTree", null);
tslib_1.__decorate([
    DeprecateProperty('rowSelectable property is deprecated. Use rowSelection property instead.'),
    WatchChanges(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxGridBaseComponent.prototype, "rowSelectable", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxGridBaseComponent.prototype, "hideRowSelectors", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxGridBaseComponent.prototype, "rowEditable", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGridBaseComponent.prototype, "height", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxGridBaseComponent.prototype, "width", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxGridBaseComponent.prototype, "rowHeight", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGridBaseComponent.prototype, "columnWidth", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Object)
], IgxGridBaseComponent.prototype, "primaryKey", void 0);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxGridBaseComponent.prototype, "isLoading", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxGridBaseComponent.prototype, "columnPinning", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], IgxGridBaseComponent.prototype, "sortingExpressions", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxGridBaseComponent.prototype, "hiddenColumnsText", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], IgxGridBaseComponent.prototype, "pinnedColumnsText", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxGridBaseComponent.prototype, "showToolbar", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGridBaseComponent.prototype, "toolbarTitle", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxGridBaseComponent.prototype, "exportExcel", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], IgxGridBaseComponent.prototype, "exportCsv", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGridBaseComponent.prototype, "exportText", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGridBaseComponent.prototype, "exportExcelText", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGridBaseComponent.prototype, "exportCsvText", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGridBaseComponent.prototype, "cellSelection", null);
tslib_1.__decorate([
    WatchChanges(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], IgxGridBaseComponent.prototype, "rowSelection", null);
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._scrollWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._customDragIndicatorIconTemplate;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._init;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._tick;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._cdrRequests;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._cdrRequestRepaint;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._resourceStrings;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._emptyGridMessage;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._emptyFilteredGridMessage;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._isLoading;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._locale;
    /** @type {?} */
    IgxGridBaseComponent.prototype._destroyed;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.overlayIDs;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._filteringStrategy;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._hostWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._advancedFilteringOverlayId;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._advancedFilteringPositionSettings;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._advancedFilteringOverlaySettings;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.defaultExpandedTemplate;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.defaultCollapsedTemplate;
    /**
     * An \@Input property that autogenerates the `IgxGridComponent` columns.
     * The default value is false.
     * \@remarks
     * When set to true, it will override all columns declared through code or in markup.
     * ```html
     * <igx-grid [data]="Data" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.autoGenerate;
    /** @type {?} */
    IgxGridBaseComponent.prototype.id;
    /**
     * An \@Input property that sets a custom template when the `IgxGridComponent` is empty.
     * ```html
     * <igx-grid [id]="'igx-grid-1'" [data]="Data" [emptyGridTemplate]="myTemplate" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.emptyGridTemplate;
    /**
     * An \@Input property that sets a custom template when the `IgxGridComponent` is loading.
     * ```html
     * <igx-grid [id]="'igx-grid-1'" [data]="Data" [loadingGridTemplate]="myTemplate" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.loadingGridTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.filteringExpressionsTreeChange;
    /**
     * Emitted after advanced filtering is performed.
     * Returns the advanced filtering expressions tree.
     * ```typescript
     * advancedFilteringExprTreeChange(event: IFilteringExpressionsTree){
     *     const filteringTree = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true"
     *           (advancedFilteringExpressionsTreeChange)="advancedFilteringExprTreeChange($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.advancedFilteringExpressionsTreeChange;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.pageChange;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.perPageChange;
    /**
     * You can provide a custom `ng-template` for the pagination UI of the grid.
     * ```html
     * <igx-grid #grid [paging]="true" [myTemplate]="myTemplate" [height]="'305px'"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.paginationTemplate;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowDragging;
    /**
     * An \@Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.
     * ```html
     * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-even-class'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.evenRowCSS;
    /**
     * An \@Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.
     * ```html
     * <igx-grid #grid [data]="Data" [evenRowCSS]="'igx-grid--my-odd-class'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.oddRowCSS;
    /**
     * An \@Input property that sets the primary key of the `IgxGridComponent`.
     * ```html
     * <igx-grid #grid [data]="localData" [showToolbar]="true" [primaryKey]="'ProductID'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.primaryKey;
    /**
     * A property that allows the columns to be auto-generated once again after the initialization of the grid.
     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.
     * Note that after generating the columns, this property would be disabled to avoid re-creating
     * columns each time a new data is assigned.
     * ```typescript
     *  this.grid.shouldGenerate = true;
     *  this.remoteData = this.remoteService.remoteData;
     * ```
     * @type {?}
     */
    IgxGridBaseComponent.prototype.shouldGenerate;
    /**
     * An \@Input property that sets the title to be displayed in the built-in column hiding UI.
     * ```html
     * <igx-grid [showToolbar]="true" [columnHiding]="true" columnHidingTitle="Column Hiding"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnHidingTitle;
    /**
     * An \@Input property that sets the title to be displayed in the UI of the column pinning.
     * ```html
     * <igx-grid #grid [data]="localData" [columnPinning]="'true" [columnPinningTitle]="'Column Hiding'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnPinningTitle;
    /**
     * An \@Input property that provides a callback for loading unique column values on demand.
     * If this property is provided, the unique values it generates will be used by the Excel Style Filtering.
     * ```html
     * <igx-grid [data]="localData" [filterMode]="'excelStyleFilter'" [uniqueColumnValuesStrategy]="columnValuesStrategy"></igx-grid>
     * ```
     *
     * ```typescript
     * public columnValuesStrategy = (column: IgxColumnComponent,
     *                               filteringExpressionsTree: IFilteringExpressionsTree,
     *                               done: (uniqueValues: any[]) => void) => {
     *     this.dataService.getColumnData(column, filteringExpressionsTree, uniqueValues => done(uniqueValues));
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.uniqueColumnValuesStrategy;
    /**
     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.
     * ```html
     * <igx-grid #grid (onCellClick)="onCellClick($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * ```typescript
     * public onCellClick(e){
     *     alert("The cell has been clicked!");
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onCellClick;
    /**
     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.
     * ```html
     * <igx-grid #grid (onSelection)="onCellSelect($event)" [data]="localData" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * ```typescript
     * public onCellSelect(e){
     *     alert("The cell has been selected!");
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onSelection;
    /**
     *  Emitted when `IgxGridRowComponent` is selected.
     * ```html
     * <igx-grid #grid (onRowSelectionChange)="onCellClickChange($event)" [data]="localData" [autoGenerate]="true"></igx-grid>
     * ```
     * ```typescript
     * public onCellClickChange(e){
     *     alert("The selected row has been changed!");
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowSelectionChange;
    /**
     * Emitted when `IgxColumnComponent` is pinned.
     * The index that the column is inserted at may be changed through the `insertAtIndex` property.
     * ```typescript
     * public columnPinning(event) {
     *     if (event.column.field === "Name") {
     *       event.insertAtIndex = 0;
     *     }
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnPinning;
    /**
     * An \@Output property emitting an event when `IgxGridCellComponent`
     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      cellID: {
     *          columnID: int,
     *          rowID: int,
     *          rowIndex: int
     *      }
     *      newValue: object,
     *      oldValue: object,
     *      rowID: int
     *  }
     *
     * ```typescript
     * editCancel(event: IGridEditEventArgs){
     *    const rowID: IgxColumnComponent = event.rowID;
     * }
     * ```
     * ```html
     * <igx-grid #grid3 (onCellEditCancel)="editCancel($event)" [data]="remote | async" [primaryKey]="'ProductID'">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * \@memberof IgxGridComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onCellEditCancel;
    /**
     * An \@Output property emitting an event when `IgxGridCellComponent` enters edit mode.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      cellID: {
     *          columnID: int,
     *          rowID: int,
     *          rowIndex: int
     *      }
     *      oldValue: object,
     *      rowID: int
     *  }
     *
     * ```typescript
     * editStart(event: IGridEditEventArgs){
     *    const value: IgxColumnComponent = event.newValue;
     * }
     * ```
     * ```html
     * <igx-grid #grid3 (onCellEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * \@memberof IgxGridComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onCellEditEnter;
    /**
     * An \@Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.
     * Event is fired after editing is completed, when the cell is exiting edit mode.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      cellID: {
     *          columnID: int,
     *          rowID: int,
     *          rowIndex: int
     *      }
     *      newValue: object,
     *      oldValue: object,
     *      rowID: int
     *  }
     *
     * ```typescript
     * editDone(event: IGridEditEventArgs){
     *    const value: IgxColumnComponent = event.newValue;
     * }
     * ```
     * ```html
     * <igx-grid #grid3 (onCellEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onCellEdit;
    /**
     * An \@Output property emitting an event when [rowEditable]="true" a row enters edit mode.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      oldValue: <rowObj>,
     *      rowID: int
     *  }
     *
     * Bind to the event in markup as follows:
     * ```html
     * <igx-grid #grid3 (onRowEditEnter)="editStart($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowEditable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * ```typescript
     *      editStart(event: IGridEditEventArgs) {
     *          const editedRowObj = event.oldValue;
     *          const cancelValue = event.cancel;
     *          const rowID = event.rowID;
     *      }
     * ```
     * \@memberof IgxGridComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowEditEnter;
    /**
     * An \@Output property emitting an event when [rowEditable]="true" & `endEdit(true)` is called.
     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,
     * performing paging operation, column resizing, pinning, moving or hitting  `Done`
     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      newValue: <rowObj>,
     *      oldValue: <rowObj>,
     *      rowID: int
     *  }
     *
     * Bind to the event in markup as follows:
     * ```html
     * <igx-grid #grid3 (onRowEdit)="editDone($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowEditable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     *
     * ```typescript
     *      editDone(event: IGridEditEventArgs) {
     *          const originalRowObj = event.oldValue;
     *          const updatedRowObj = event.newValue;
     *          const cancelValue = event.cancel;
     *          const rowID = event.rowID;
     *      }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowEdit;
    /**
     * An \@Output property emitting an event when [rowEditable]="true" & `endEdit(false)` is called.
     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button
     * in the row editing overlay.
     * This event is cancelable.
     *
     * args: IGridEditEventArgs = {
     *      cancel: bool,
     *      newValue: <rowObj>,
     *      oldValue: <rowObj>,
     *      rowID: int
     *  }
     *
     * Bind to the event in markup as follows:
     * ```html
     * <igx-grid #grid3 (onRowEditCancel)="editCancel($event)" [data]="remote | async" (onSortingDone)="process($event)"
     *          [primaryKey]="'ProductID'" [rowEditable]="true">
     *          <igx-column [sortable]="true" [field]="'ProductID'"></igx-column>
     *          <igx-column [editable]="true" [field]="'ProductName'"></igx-column>
     *          <igx-column [sortable]="true" [field]="'UnitsInStock'" [header]="'Units in Stock'"></igx-column>
     * </igx-grid>
     * ```
     * ```typescript
     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {
     *          const originalRowObj = event.oldValue;
     *          const updatedRowObj = event.newValue;
     *          const cancelValue = event.cancel;
     *          const rowID = event.rowID;
     *      }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowEditCancel;
    /**
     * Emitted when a grid column is initialized. Returns the column object.
     * ```html
     * <igx-grid #grid [data]="localData" [onColumnInit]="initColumns($event)" [autoGenerate]="true"></igx-grid>
     * ```
     * ```typescript
     * initColumns(event: IgxColumnComponent) {
     * const column: IgxColumnComponent = event;
     *       column.filterable = true;
     *       column.sortable = true;
     *       column.editable = true;
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnInit;
    /**
     * Emitted when sorting is performed through the UI. Returns the sorting expression.
     * ```html
     * <igx-grid #grid [data]="localData" [autoGenerate]="true" (onSortingDone)="sortingDone($event)"></igx-grid>
     * ```
     * ```typescript
     * sortingDone(event: SortingDirection){
     *     const sortingDirection = event;
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onSortingDone;
    /**
     * Emitted when filtering is performed through the UI.
     * Returns the filtering expressions tree of the column for which filtering was performed.
     * ```typescript
     * filteringDone(event: IFilteringExpressionsTree){
     *     const filteringTree = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onFilteringDone)="filteringDone($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onFilteringDone;
    /**
     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.
     * ```typescript
     * pagingDone(event: IPageEventArgs){
     *     const paging = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" [height]="'305px'" [autoGenerate]="true" (onPagingDone)="pagingDone($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onPagingDone;
    /**
     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.
     * Returns the data for the new `IgxGridRowComponent` object.
     * ```typescript
     * rowAdded(event: IRowDataEventArgs){
     *    const rowInfo = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onRowAdded)="rowAdded($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowAdded;
    /**
     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.
     * Returns an `IRowDataEventArgs` object.
     * ```typescript
     * rowDeleted(event: IRowDataEventArgs){
     *    const rowInfo = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onRowDeleted)="rowDeleted($event)" [height]="'305px'" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowDeleted;
    /**
     * Emitted when a new chunk of data is loaded from virtualization.
     * ```typescript
     *  <igx-grid #grid [data]="localData" [autoGenerate]="true" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onDataPreLoad;
    /**
     * Emitted when `IgxColumnComponent` is resized.
     * Returns the `IgxColumnComponent` object's old and new width.
     * ```typescript
     * resizing(event: IColumnResizeEventArgs){
     *     const grouping = event;
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onColumnResized)="resizing($event)" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnResized;
    /**
     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.
     * ```typescript
     * contextMenu(event: IGridCellEventArgs){
     *     const resizing = event;
     *     console.log(resizing);
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onContextMenu)="contextMenu($event)" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onContextMenu;
    /**
     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.
     * ```typescript
     * dblClick(event: IGridCellEventArgs){
     *     const dblClick = event;
     *     console.log(dblClick);
     * }
     * ```
     * ```html
     * <igx-grid #grid [data]="localData" (onDoubleClick)="dblClick($event)" [autoGenerate]="true"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onDoubleClick;
    /**
     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }
     * ```typescript
     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){
     *    const visiblity = event;
     * }
     * ```
     * ```html
     * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnVisibilityChanged)="visibilityChanged($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnVisibilityChanged;
    /**
     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.
     * ```typescript
     * movingStart(event: IColumnMovingStartEventArgs){
     *     const movingStarts = event;
     * }
     * ```
     * ```html
     * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingStart)="movingStart($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnMovingStart;
    /**
     * Emitted throughout the `IgxColumnComponent` moving operation.
     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.
     * ```typescript
     * moving(event: IColumnMovingEventArgs){
     *     const moving = event;
     * }
     * ```
     * ```html
     * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMoving)="moving($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnMoving;
    /**
     * Emitted when `IgxColumnComponent` moving ends.
     * Returns the source and target `IgxColumnComponent` objects.
     * ```typescript
     * movingEnds(event: IColumnMovingEndEventArgs){
     *     const movingEnds = event;
     * }
     * ```
     * ```html
     * <igx-grid [columnHiding]="true" [showToolbar]="true" (onColumnMovingEnd)="movingEnds($event)"></igx-grid>
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onColumnMovingEnd;
    /**
     * Emitted when keydown is triggered over element inside grid's body.
     * This event is fired only if the key combination is supported in the grid.
     * Return the target type, target object and the original event. This event is cancelable.
     * ```typescript
     * customKeydown(args: IGridKeydownEventArgs) {
     *  const keydownEvent = args.event;
     * }
     * ```
     * ```html
     *  <igx-grid (onGridKeydown)="customKeydown($event)"></igx-grid>
     * ```
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onGridKeydown;
    /**
     * Emitted when start dragging a row.
     * Return the dragged row.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowDragStart;
    /**
     * Emitted when dropping a row.
     * Return the dropped row.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRowDragEnd;
    /**
     * Emitted when a copy operation is executed.
     * Fired only if copy behavior is enabled through the [`clipboardOptions`]{\@link IgxGridBaseComponent#clipboardOptions}.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onGridCopy;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.resizeLine;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.loadingOverlay;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.loadingOutlet;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnList;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStyleSortingTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStyleMovingTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStyleHidingTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStylePinningTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.excelStyleLoadingValuesTemplateDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerGroups;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._rowList;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._summaryRowList;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._dataRowList;
    /**
     * A template reference for the template when the filtered `IgxGridComponent` is empty.
     * ```
     * const emptyTempalte = this.grid.emptyGridTemplate;
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.emptyFilteredGridTemplate;
    /**
     * A template reference for the template when the `IgxGridComponent` is empty.
     * ```
     * const emptyTempalte = this.grid.emptyGridTemplate;
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.emptyGridDefaultTemplate;
    /** @type {?} */
    IgxGridBaseComponent.prototype.loadingGridDefaultTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.parentVirtDir;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridBaseComponent.prototype.toolbarCustomContentTemplates;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headSelectorsTemplates;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowSelectorsTemplates;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridBaseComponent.prototype.dragGhostCustomTemplates;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridBaseComponent.prototype.dragIndicatorIconTemplates;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.verticalScrollContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.verticalScroll;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.scr;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.footer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerSelectorContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerDragContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerGroupContainer;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.filteringRow;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.theadRow;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tbody;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tfoot;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._outletDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditingOutletDirective;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tmpOutlets;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxGridBaseComponent.prototype.dragIndicatorIconBase;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.defaultRowEditTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditCustom;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditText;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditActions;
    /**
     * The custom template, if any, that should be used when rendering a row expand indicator.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowExpandedIndicatorTemplate;
    /**
     * The custom template, if any, that should be used when rendering a row collapse indicator.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowCollapsedIndicatorTemplate;
    /**
     * The custom template, if any, that should be used when rendering a header expand indicator.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerExpandIndicatorTemplate;
    /**
     * The custom template, if any, that should be used when rendering a header collapse indicator.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.headerCollapseIndicatorTemplate;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditTabsDEFAULT;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditTabsCUSTOM;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditingOverlay;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tabindex;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.hostRole;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.sortingExpressionsChange;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnsWithNoSetWidths;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._showToolbar;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportExcel;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportCsv;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._toolbarTitle;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportExcelText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._exportCsvText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._rowEditable;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._currentRowState;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._filteredSortedData;
    /**
     * Provides access to the `IgxToolbarComponent`.
     * ```typescript
     * const gridToolbar = this.grid.toolbar;
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.toolbar;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.toolbarHtml;
    /**
     * Controls the copy behavior of the grid.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.clipboardOptions;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.rowEditMessage;
    /**
     * Emitted when an export process is initiated by the user.
     * ```typescript
     * toolbarExporting(event: IGridToolbarExportEventArgs){
     *     const toolbarExporting = event;
     * }
     * ```
     * \@memberof IgxGridBaseComponent
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onToolbarExporting;
    /**
     * Emitted when making a range selection either through
     * drag selection or through keyboard selection.
     * @type {?}
     */
    IgxGridBaseComponent.prototype.onRangeSelection;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.pagingState;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.calcWidth;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.calcHeight;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.tfootHeight;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.chipsGoupingExpressions;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.summariesHeight;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.draggedColumn;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.disableTransitions;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.lastSearchInfo;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.columnWidthSetByUser;
    /** @type {?} */
    IgxGridBaseComponent.prototype.data;
    /** @type {?} */
    IgxGridBaseComponent.prototype.filteredData;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.destroy$;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._perPage;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._page;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._paging;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._hideRowSelectors;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._rowDrag;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._pipeTrigger;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._filteringPipeTrigger;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._summaryPipeTrigger;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._columns;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._pinnedColumns;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._unpinnedColumns;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._filteringExpressionsTree;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._advancedFilteringExpressionsTree;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._sortingExpressions;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._maxLevelHeaderDepth;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._columnHiding;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._columnPinning;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._hasVisibleColumns;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._allowFiltering;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._allowAdvancedFiltering;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._filterMode;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.observer;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.resizeNotify;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.columnListDiffer;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._hiddenColumnsText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._pinnedColumnsText;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._width;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._rowHeight;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._baseFontSize;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._horizontalForOfs;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._multiRowLayoutRowSize;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._loadingId;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._totalWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._pinnedVisible;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._unpinnedVisible;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._pinnedWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._unpinnedWidth;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._visibleColumns;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._columnGroups;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._columnWidth;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._defaultTargetRecordNumber;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._summaryPosition;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._summaryCalculationMode;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._cellSelectionMode;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype._rowSelectionMode;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.rowEditPositioningStrategy;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.rowEditSettings;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.verticalScrollHandler;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.horizontalScrollHandler;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.keydownHandler;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.scrollHandler;
    /**
     * @hidden
     * @type {?}
     */
    IgxGridBaseComponent.prototype.wheelHandler;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.rowEditingWheelHandler;
    /** @type {?} */
    IgxGridBaseComponent.prototype.selectionService;
    /** @type {?} */
    IgxGridBaseComponent.prototype.crudService;
    /** @type {?} */
    IgxGridBaseComponent.prototype.colResizingService;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.gridAPI;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._transactions;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    IgxGridBaseComponent.prototype.zone;
    /** @type {?} */
    IgxGridBaseComponent.prototype.document;
    /** @type {?} */
    IgxGridBaseComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.resolver;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.differs;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.viewRef;
    /** @type {?} */
    IgxGridBaseComponent.prototype.navigation;
    /** @type {?} */
    IgxGridBaseComponent.prototype.filteringService;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype.overlayService;
    /** @type {?} */
    IgxGridBaseComponent.prototype.summaryService;
    /**
     * @type {?}
     * @protected
     */
    IgxGridBaseComponent.prototype._displayDensityOptions;
}
//# sourceMappingURL=data:application/json;base64,