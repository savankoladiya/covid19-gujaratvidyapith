/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { Directive, ElementRef, EventEmitter, HostListener, Input, NgModule, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { KEYS, MaskHelper } from './mask-helper';
import { isIE } from '../../core/utils';
/** @type {?} */
const noop = () => { };
const Éµ0 = noop;
export class IgxMaskDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        /**
         * Emits an event each time the value changes.
         * Provides `rawValue: string` and `formattedValue: string` as event arguments.
         * ```html
         * <input (onValueChange) = "onValueChange(rawValue: string, formattedValue: string)">
         * ```
         */
        this.onValueChange = new EventEmitter();
        /**
         * @hidden
         */
        this._maskOptions = {
            format: '',
            promptChar: ''
        };
        /**
         * @hidden
         */
        this._onTouchedCallback = noop;
        /**
         * @hidden
         */
        this._onChangeCallback = noop;
        this.maskHelper = new MaskHelper();
    }
    /**
     * Specifies a placeholder.
     * ```html
     * <input placeholder = "enter text...">
     * ```
     * \@memberof IgxMaskDirective
     * @param {?} val
     * @return {?}
     */
    set placeholder(val) {
        this._placeholder = val;
        this.nativeElement.setAttribute('placeholder', this._placeholder);
    }
    /**
     * @return {?}
     */
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @hidden
     * @private
     * @return {?}
     */
    get value() {
        return this.nativeElement.value;
    }
    /**
     * @hidden
     * @private
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this.nativeElement.value = val;
    }
    /**
     * @hidden
     * @private
     * @return {?}
     */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @hidden
     * @private
     * @return {?}
     */
    get selectionStart() {
        return this.nativeElement.selectionStart;
    }
    /**
     * @hidden
     * @private
     * @return {?}
     */
    get selectionEnd() {
        return this.nativeElement.selectionEnd;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        if (this.promptChar && this.promptChar.length > 1) {
            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);
        }
        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';
        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';
        this.nativeElement.setAttribute('placeholder', this.placeholder ? this.placeholder : this._maskOptions.format);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeydown(event) {
        /** @type {?} */
        const key = event.keyCode || event.charCode;
        if (isIE() && this._stopPropagation) {
            this._stopPropagation = false;
        }
        if (key === KEYS.Ctrl) {
            this._ctrlDown = true;
        }
        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {
            event.preventDefault();
        }
        this._key = key;
        this._selection = Math.abs(this.selectionEnd - this.selectionStart);
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onKeyup(event) {
        /** @type {?} */
        const key = event.keyCode || event.charCode;
        if (key === KEYS.Ctrl) {
            this._ctrlDown = false;
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onPaste(event) {
        this._paste = true;
        this._valOnPaste = this.value;
        this._cursorOnPaste = this.getCursorPosition();
    }
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    onInputChanged(event) {
        if (isIE() && this._stopPropagation) {
            this._stopPropagation = false;
            return;
        }
        if (this._paste) {
            this._paste = false;
            /** @type {?} */
            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());
            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);
            this.setCursorPosition(this.maskHelper.cursor);
        }
        else {
            /** @type {?} */
            const currentCursorPos = this.getCursorPosition();
            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);
            this.value = this._selection && this._selection !== 0 ?
                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :
                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);
            this.setCursorPosition(this.maskHelper.cursor);
        }
        /** @type {?} */
        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);
        this.dataValue = this.includeLiterals ? this.value : rawVal;
        this._onChangeCallback(this.dataValue);
        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    onFocus(value) {
        if (this.focusedValuePipe) {
            if (isIE()) {
                this._stopPropagation = true;
            }
            this.value = this.focusedValuePipe.transform(value);
        }
        else {
            this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);
        }
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    onBlur(value) {
        if (this.displayValuePipe) {
            this.value = this.displayValuePipe.transform(value);
        }
        else if (value === this.maskHelper.parseMask(this._maskOptions)) {
            this.value = '';
        }
    }
    /**
     * @hidden
     * @private
     * @return {?}
     */
    getCursorPosition() {
        return this.nativeElement.selectionStart;
    }
    /**
     * @hidden
     * @private
     * @param {?} start
     * @param {?=} end
     * @return {?}
     */
    setCursorPosition(start, end = start) {
        this.nativeElement.setSelectionRange(start, end);
    }
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (this.promptChar && this.promptChar.length > 1) {
            this._maskOptions.promptChar = this.promptChar.substring(0, 1);
        }
        this.value = value ? this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions) : '';
        if (this.displayValuePipe) {
            this.value = this.displayValuePipe.transform(this.value);
        }
        this.dataValue = this.includeLiterals ? this.value : value;
        this._onChangeCallback(this.dataValue);
        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });
    }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) { this._onChangeCallback = fn; }
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { this._onTouchedCallback = fn; }
}
IgxMaskDirective.decorators = [
    { type: Directive, args: [{
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],
                selector: '[igxMask]'
            },] }
];
/** @nocollapse */
IgxMaskDirective.ctorParameters = () => [
    { type: ElementRef }
];
IgxMaskDirective.propDecorators = {
    mask: [{ type: Input, args: ['igxMask',] }],
    promptChar: [{ type: Input }],
    includeLiterals: [{ type: Input }],
    placeholder: [{ type: Input }],
    displayValuePipe: [{ type: Input }],
    focusedValuePipe: [{ type: Input }],
    dataValue: [{ type: Input }],
    onValueChange: [{ type: Output }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onKeyup: [{ type: HostListener, args: ['keyup', ['$event'],] }],
    onPaste: [{ type: HostListener, args: ['paste', ['$event'],] }],
    onInputChanged: [{ type: HostListener, args: ['input', ['$event'],] }],
    onFocus: [{ type: HostListener, args: ['focus', ['$event.target.value'],] }],
    onBlur: [{ type: HostListener, args: ['blur', ['$event.target.value'],] }]
};
if (false) {
    /**
     * Sets the input mask.
     * ```html
     * <input [igxMask] = "'00/00/0000'">
     * ```
     * \@memberof IgxMaskDirective
     * @type {?}
     */
    IgxMaskDirective.prototype.mask;
    /**
     * Sets the character representing a fillable spot in the input mask.
     * Default value is "'_'".
     * ```html
     * <input [promptChar] = "'/'">
     * ```
     * \@memberof IgxMaskDirective
     * @type {?}
     */
    IgxMaskDirective.prototype.promptChar;
    /**
     * Specifies if the bound value includes the formatting symbols.
     * ```html
     * <input [includeLiterals] = "true">
     * ```
     * \@memberof IgxMaskDirective
     * @type {?}
     */
    IgxMaskDirective.prototype.includeLiterals;
    /**
     * Specifies a pipe to be used on blur.
     * ```html
     * <input [displayValuePipe] = "displayFormatPipe">
     * ```
     * \@memberof IgxMaskDirective
     * @type {?}
     */
    IgxMaskDirective.prototype.displayValuePipe;
    /**
     * Specifies a pipe to be used on focus.
     * ```html
     * <input [focusedValuePipe] = "inputFormatPipe">
     * ```
     * \@memberof IgxMaskDirective
     * @type {?}
     */
    IgxMaskDirective.prototype.focusedValuePipe;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype.dataValue;
    /**
     * Emits an event each time the value changes.
     * Provides `rawValue: string` and `formattedValue: string` as event arguments.
     * ```html
     * <input (onValueChange) = "onValueChange(rawValue: string, formattedValue: string)">
     * ```
     * @type {?}
     */
    IgxMaskDirective.prototype.onValueChange;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype._ctrlDown;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype._paste;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype._selection;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype._placeholder;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype._maskOptions;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype._key;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype._cursorOnPaste;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype._valOnPaste;
    /**
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype._stopPropagation;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype.maskHelper;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype._onTouchedCallback;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype._onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    IgxMaskDirective.prototype.elementRef;
}
/**
 * The IgxMaskModule provides the {\@link IgxMaskDirective} inside your application.
 * @record
 */
export function IMaskEventArgs() { }
if (false) {
    /** @type {?} */
    IMaskEventArgs.prototype.rawValue;
    /** @type {?} */
    IMaskEventArgs.prototype.formattedValue;
}
/**
 * @hidden
 */
export class IgxMaskModule {
}
IgxMaskModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxMaskDirective],
                exports: [IgxMaskDirective],
                imports: [CommonModule]
            },] }
];
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,