/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, NgModule, Renderer2, } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { DeprecateProperty } from '../../core/deprecateDecorators';
/**
 * @record
 */
function ISearchInfo() { }
if (false) {
    /** @type {?} */
    ISearchInfo.prototype.searchedText;
    /** @type {?} */
    ISearchInfo.prototype.content;
    /** @type {?} */
    ISearchInfo.prototype.matchCount;
    /** @type {?} */
    ISearchInfo.prototype.caseSensitive;
    /** @type {?} */
    ISearchInfo.prototype.exactMatch;
}
/**
 * An interface describing information for the active highlight.
 * @record
 */
export function IActiveHighlightInfo() { }
if (false) {
    /**
     * The row index of the highlight. This property is deprecated, use `row` instead.
     * @type {?|undefined}
     */
    IActiveHighlightInfo.prototype.rowIndex;
    /**
     * The column index of the highlight. This property is deprecated, use `column` instead.
     * @type {?|undefined}
     */
    IActiveHighlightInfo.prototype.columnIndex;
    /**
     * The page index of the highlight. This property is deprecated.
     * @type {?|undefined}
     */
    IActiveHighlightInfo.prototype.page;
    /**
     * The row of the highlight.
     * @type {?|undefined}
     */
    IActiveHighlightInfo.prototype.row;
    /**
     * The column of the highlight.
     * @type {?|undefined}
     */
    IActiveHighlightInfo.prototype.column;
    /**
     * The index of the highlight.
     * @type {?}
     */
    IActiveHighlightInfo.prototype.index;
}
export class IgxTextHighlightDirective {
    /**
     * @param {?} element
     * @param {?} renderer
     */
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this._div = null;
        this._observer = null;
        this._nodeWasRemoved = false;
        this._forceEvaluation = false;
        this._activeElementIndex = -1;
        this._defaultCssClass = 'igx-highlight';
        this._defaultActiveCssClass = 'igx-highlight--active';
        /**
         * Identifies the highlight within a unique group.
         * This allows it to have several different highlight groups,
         * with each of them having their own active highlight.
         *
         * ```html
         * <div
         *   igxTextHighlight
         *   [groupName]="myGroupName">
         * </div>
         * ```
         */
        this.groupName = '';
        this._value = '';
        this.destroy$ = new Subject();
        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {
            if (this.groupName === groupName) {
                if (this._activeElementIndex !== -1) {
                    this.deactivate();
                }
                this.activateIfNecessary();
            }
        });
    }
    /**
     * The underlying value of the element that will be highlighted.
     *
     * ```typescript
     * // get
     * const elementValue = this.textHighlight.value;
     * ```
     *
     * ```html
     * <!--set-->
     * <div
     *   igxTextHighlight
     *   [value]="newValue">
     * </div>
     * ```
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (value === undefined || value === null) {
            this._value = '';
        }
        else {
            this._value = value;
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    get lastSearchInfo() {
        return this._lastSearchInfo;
    }
    /**
     * Activates the highlight at a given index.
     * (if such index exists)
     * @param {?} groupName
     * @param {?} highlight
     * @return {?}
     */
    static setActiveHighlight(groupName, highlight) {
        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);
        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);
    }
    /**
     * Clears any existing highlight.
     * @param {?} groupName
     * @return {?}
     */
    static clearActiveHighlight(groupName) {
        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {
            index: -1
        });
        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        this.clearHighlight();
        if (this._observer !== null) {
            this._observer.disconnect();
        }
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value && !changes.value.firstChange) {
            this._valueChanged = true;
        }
        else if ((changes.row !== undefined && !changes.row.firstChange) ||
            (changes.column !== undefined && !changes.column.firstChange) ||
            (changes.page !== undefined && !changes.page.firstChange)) {
            if (this._activeElementIndex !== -1) {
                this.deactivate();
            }
            this.activateIfNecessary();
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterViewInit() {
        this.parentElement = this.renderer.parentNode(this.element.nativeElement);
        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {
            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {
                index: -1
            });
        }
        this._lastSearchInfo = {
            searchedText: '',
            content: this.value,
            matchCount: 0,
            caseSensitive: false,
            exactMatch: false
        };
        this._container = this.parentElement.firstElementChild;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this._valueChanged) {
            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);
            this.activateIfNecessary();
            this._valueChanged = false;
        }
    }
    /**
     * Clears the existing highlight and highlights the searched text.
     * Returns how many times the element contains the searched text.
     * @param {?} text
     * @param {?=} caseSensitive
     * @param {?=} exactMatch
     * @return {?}
     */
    highlight(text, caseSensitive, exactMatch) {
        /** @type {?} */
        const caseSensitiveResolved = caseSensitive ? true : false;
        /** @type {?} */
        const exactMatchResolved = exactMatch ? true : false;
        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {
            this._lastSearchInfo.searchedText = text;
            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;
            this._lastSearchInfo.exactMatch = exactMatchResolved;
            this._lastSearchInfo.content = this.value;
            if (text === '' || text === undefined || text === null) {
                this.clearHighlight();
            }
            else {
                this.clearChildElements(true);
                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);
            }
        }
        else if (this._nodeWasRemoved) {
            this._lastSearchInfo.searchedText = text;
            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;
            this._lastSearchInfo.exactMatch = exactMatchResolved;
        }
        return this._lastSearchInfo.matchCount;
    }
    /**
     * Clears any existing highlight.
     * @return {?}
     */
    clearHighlight() {
        this.clearChildElements(false);
        this._lastSearchInfo.searchedText = '';
        this._lastSearchInfo.matchCount = 0;
    }
    /**
     * Activates the highlight if it is on the currently active row, column and page.
     * @return {?}
     */
    activateIfNecessary() {
        /** @type {?} */
        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);
        /** @type {?} */
        const column = group.columnIndex === undefined ? group.column : group.columnIndex;
        /** @type {?} */
        const row = group.rowIndex === undefined ? group.row : group.rowIndex;
        if (column === this.column && row === this.row && group.page === this.page) {
            this.activate(group.index);
        }
    }
    /**
     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.
     * Should be used only when necessary as using many observers may lead to performance degradation.
     * @return {?}
     */
    observe() {
        if (this._observer === null) {
            /** @type {?} */
            const callback = (mutationList) => {
                mutationList.forEach((mutation) => {
                    /** @type {?} */
                    const removedNodes = Array.from(mutation.removedNodes);
                    removedNodes.forEach((n) => {
                        if (n === this._container) {
                            this._nodeWasRemoved = true;
                            this.clearChildElements(false);
                        }
                    });
                    /** @type {?} */
                    const addedNodes = Array.from(mutation.addedNodes);
                    addedNodes.forEach((n) => {
                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {
                            this._container = this.parentElement.firstElementChild;
                            this._nodeWasRemoved = false;
                            this._forceEvaluation = true;
                            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);
                            this._forceEvaluation = false;
                            this.activateIfNecessary();
                            this._observer.disconnect();
                            this._observer = null;
                        }
                    });
                });
            };
            this._observer = new MutationObserver(callback);
            this._observer.observe(this.parentElement, { childList: true });
        }
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    activate(index) {
        this.deactivate();
        if (this._div !== null) {
            /** @type {?} */
            const spans = this._div.querySelectorAll('span');
            this._activeElementIndex = index;
            if (spans.length <= index) {
                return;
            }
            /** @type {?} */
            const elementToActivate = spans[index];
            this.renderer.addClass(elementToActivate, this._defaultActiveCssClass);
            this.renderer.addClass(elementToActivate, this.activeCssClass);
        }
    }
    /**
     * @private
     * @return {?}
     */
    deactivate() {
        if (this._activeElementIndex === -1) {
            return;
        }
        /** @type {?} */
        const spans = this._div.querySelectorAll('span');
        if (spans.length <= this._activeElementIndex) {
            this._activeElementIndex = -1;
            return;
        }
        /** @type {?} */
        const elementToDeactivate = spans[this._activeElementIndex];
        this.renderer.removeClass(elementToDeactivate, this._defaultActiveCssClass);
        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);
        this._activeElementIndex = -1;
    }
    /**
     * @private
     * @param {?} originalContentHidden
     * @return {?}
     */
    clearChildElements(originalContentHidden) {
        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);
        if (this._div !== null) {
            this.renderer.removeChild(this.parentElement, this._div);
            this._div = null;
            this._activeElementIndex = -1;
        }
    }
    /**
     * @private
     * @param {?} searchText
     * @param {?} caseSensitive
     * @param {?} exactMatch
     * @return {?}
     */
    getHighlightedText(searchText, caseSensitive, exactMatch) {
        this.appendDiv();
        /** @type {?} */
        const stringValue = String(this.value);
        /** @type {?} */
        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;
        /** @type {?} */
        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;
        /** @type {?} */
        let matchCount = 0;
        if (exactMatch) {
            if (contentStringResolved === searchTextResolved) {
                // tslint:disable-next-line:max-line-length
                this.appendSpan(`<span class="${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}">${stringValue}</span>`);
                matchCount++;
            }
            else {
                this.appendText(stringValue);
            }
        }
        else {
            /** @type {?} */
            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);
            /** @type {?} */
            let previousMatchEnd = 0;
            while (foundIndex !== -1) {
                /** @type {?} */
                const start = foundIndex;
                /** @type {?} */
                const end = foundIndex + searchTextResolved.length;
                this.appendText(stringValue.substring(previousMatchEnd, start));
                // tslint:disable-next-line:max-line-length
                this.appendSpan(`<span class="${this._defaultCssClass} ${this.cssClass ? this.cssClass : ''}">${stringValue.substring(start, end)}</span>`);
                previousMatchEnd = end;
                matchCount++;
                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);
            }
            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));
        }
        return matchCount;
    }
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    appendText(text) {
        /** @type {?} */
        const textElement = this.renderer.createText(text);
        this.renderer.appendChild(this._div, textElement);
    }
    /**
     * @private
     * @param {?} outerHTML
     * @return {?}
     */
    appendSpan(outerHTML) {
        /** @type {?} */
        const span = this.renderer.createElement('span');
        this.renderer.appendChild(this._div, span);
        this.renderer.setProperty(span, 'outerHTML', outerHTML);
    }
    /**
     * @private
     * @return {?}
     */
    appendDiv() {
        this._div = this.renderer.createElement('div');
        if (this.containerClass) {
            this.renderer.addClass(this._div, this.containerClass);
        }
        this.renderer.appendChild(this.parentElement, this._div);
    }
    /**
     * @private
     * @param {?} text
     * @param {?} caseSensitive
     * @param {?} exactMatch
     * @return {?}
     */
    searchNeedsEvaluation(text, caseSensitive, exactMatch) {
        /** @type {?} */
        const searchedText = this._lastSearchInfo.searchedText;
        return !this._nodeWasRemoved &&
            (searchedText === null ||
                searchedText !== text ||
                this._lastSearchInfo.content !== this.value ||
                this._lastSearchInfo.caseSensitive !== caseSensitive ||
                this._lastSearchInfo.exactMatch !== exactMatch ||
                this._forceEvaluation);
    }
}
IgxTextHighlightDirective.onActiveElementChanged = new EventEmitter();
IgxTextHighlightDirective.highlightGroupsMap = new Map();
IgxTextHighlightDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxTextHighlight]'
            },] }
];
/** @nocollapse */
IgxTextHighlightDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
IgxTextHighlightDirective.propDecorators = {
    cssClass: [{ type: Input, args: ['cssClass',] }],
    activeCssClass: [{ type: Input, args: ['activeCssClass',] }],
    containerClass: [{ type: Input, args: ['containerClass',] }],
    groupName: [{ type: Input, args: ['groupName',] }],
    value: [{ type: Input, args: ['value',] }],
    row: [{ type: Input, args: ['row',] }],
    column: [{ type: Input, args: ['column',] }],
    page: [{ type: Input, args: ['page',] }]
};
tslib_1.__decorate([
    DeprecateProperty(`IgxTextHighlightDirective 'page' input property is deprecated.`),
    tslib_1.__metadata("design:type", Number)
], IgxTextHighlightDirective.prototype, "page", void 0);
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.onActiveElementChanged;
    /** @type {?} */
    IgxTextHighlightDirective.highlightGroupsMap;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype._lastSearchInfo;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype._div;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype._observer;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype._nodeWasRemoved;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype._forceEvaluation;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype._activeElementIndex;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype._valueChanged;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype._defaultCssClass;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype._defaultActiveCssClass;
    /**
     * Determines the `CSS` class of the highlight elements.
     * This allows the developer to provide custom `CSS` to customize the highlight.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [cssClass]="myClass">
     * </div>
     * ```
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.cssClass;
    /**
     * Determines the `CSS` class of the active highlight element.
     * This allows the developer to provide custom `CSS` to customize the highlight.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [activeCssClass]="activeHighlightClass">
     * </div>
     * ```
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.activeCssClass;
    /**
     * @hidden
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.containerClass;
    /**
     * Identifies the highlight within a unique group.
     * This allows it to have several different highlight groups,
     * with each of them having their own active highlight.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [groupName]="myGroupName">
     * </div>
     * ```
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.groupName;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype._value;
    /**
     * The identifier of the row on which the directive is currently on.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [row]="0">
     * </div>
     * ```
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.row;
    /**
     * The identifier of the column on which the directive is currently on.
     *
     * ```html
     * <div
     *   igxTextHighlight
     *   [column]="0">
     * </div>
     * ```
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.column;
    /** @type {?} */
    IgxTextHighlightDirective.prototype.page;
    /**
     * @hidden
     * @type {?}
     */
    IgxTextHighlightDirective.prototype.parentElement;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype._container;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    IgxTextHighlightDirective.prototype.element;
    /** @type {?} */
    IgxTextHighlightDirective.prototype.renderer;
}
/**
 * @hidden
 */
export class IgxTextHighlightModule {
}
IgxTextHighlightModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxTextHighlightDirective],
                exports: [IgxTextHighlightDirective]
            },] }
];
//# sourceMappingURL=data:application/json;base64,