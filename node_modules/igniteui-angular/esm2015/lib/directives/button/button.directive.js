/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, NgModule, Renderer2, HostListener, Optional, Inject } from '@angular/core';
import { DisplayDensityBase, DisplayDensityToken, DisplayDensity } from '../../core/density';
export class IgxButtonDirective extends DisplayDensityBase {
    /**
     * @param {?} element
     * @param {?} _renderer
     * @param {?} _displayDensityOptions
     */
    constructor(element, _renderer, _displayDensityOptions) {
        super(_displayDensityOptions);
        this.element = element;
        this._renderer = _renderer;
        this._displayDensityOptions = _displayDensityOptions;
        /**
         * @hidden
         */
        this._defaultType = 'flat';
        /**
         * @hidden
         */
        this._cssClassPrefix = 'igx-button';
        /**
         * Called when the button is clicked
         */
        this.buttonClick = new EventEmitter();
        /**
         * Sets/gets the `role` attribute.
         * ```typescript
         * this.button.role = 'navbutton';
         * ```
         * ```typescript
         * let buttonRole =  this.button.role;
         * ```
         * \@memberof IgxButtonDirective
         */
        this.role = 'button';
        /**
         * Gets or sets whether the button is selected.
         * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.
         * ```html
         * <button igxButton="flat" [selected]="button.selected"></button>
         * ```
         * \@memberof IgxButtonDirective
         */
        this.selected = false;
    }
    /**
     * Returns the underlying DOM element
     * @return {?}
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * Sets the type of the button.
     * ```html
     * <button  igxButton= "icon"></button>
     * ```
     * \@memberof IgxButtonDirective
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        /** @type {?} */
        const newValue = value ? value : this._defaultType;
        if (this._type !== newValue) {
            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);
            this._type = newValue;
            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--${this._type}`);
        }
    }
    /**
     * Sets the button text color.
     * ```html
     * <button igxButton="gradient" igxButtonColor="blue"></button>
     * ```
     * \@memberof IgxButtonDirective
     * @param {?} value
     * @return {?}
     */
    set color(value) {
        this._color = value || this.nativeElement.style.color;
        this._renderer.setStyle(this.nativeElement, 'color', this._color);
    }
    /**
     * Sets the background color of the button.
     * ```html
     * <button igxButton="raised" igxButtonBackground="red"></button>
     * ```
     * \@memberof IgxButtonDirective
     * @param {?} value
     * @return {?}
     */
    set background(value) {
        this._backgroundColor = value || this._backgroundColor;
        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);
    }
    /**
     * Sets the `aria-label` attribute.
     * ```html
     * <button igxButton= "flat" igxLabel="Label"></button>
     * ```
     * \@memberof IgxButtonDirective
     * @param {?} value
     * @return {?}
     */
    set label(value) {
        this._label = value || this._label;
        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);
    }
    /**
     * Enables/disables the button.
     *  ```html
     * <button igxButton= "fab" [disabled]="true"></button>
     * ```
     * \@memberof IgxButtonDirective
     * @param {?} val
     * @return {?}
     */
    set disabled(val) {
        val = !!val;
        this._disabled = val;
        if (val) {
            this._renderer.addClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);
        }
        else {
            this._renderer.removeClass(this.nativeElement, `${this._cssClassPrefix}--disabled`);
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    get cssClassCosy() {
        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&
            this.displayDensity === DisplayDensity.cosy;
    }
    /**
     * @hidden
     * @return {?}
     */
    get cssClassCompact() {
        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&
            this.displayDensity === DisplayDensity.compact;
    }
    /**
     * @hidden
     * @return {?}
     */
    get cssClassCosyFab() {
        return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;
    }
    /**
     * @hidden
     * @return {?}
     */
    get cssClassCompactFab() {
        return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;
    }
    /**
     * @hidden
     * @return {?}
     */
    get disabledAttribute() {
        return this._disabled ? this._disabled : null;
    }
    /**
     * @hidden
     * @param {?} ev
     * @return {?}
     */
    onClick(ev) {
        this.buttonClick.emit(ev);
    }
}
IgxButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxButton]'
            },] }
];
/** @nocollapse */
IgxButtonDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
];
IgxButtonDirective.propDecorators = {
    buttonClick: [{ type: Output }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    type: [{ type: Input, args: ['igxButton',] }],
    color: [{ type: Input, args: ['igxButtonColor',] }],
    background: [{ type: Input, args: ['igxButtonBackground',] }],
    label: [{ type: Input, args: ['igxLabel',] }],
    disabled: [{ type: Input }],
    cssClassCosy: [{ type: HostBinding, args: ['class.igx-button--cosy',] }],
    cssClassCompact: [{ type: HostBinding, args: ['class.igx-button--compact',] }],
    cssClassCosyFab: [{ type: HostBinding, args: ['class.igx-button--fab-cosy',] }],
    cssClassCompactFab: [{ type: HostBinding, args: ['class.igx-button--fab-compact',] }],
    disabledAttribute: [{ type: HostBinding, args: ['attr.disabled',] }],
    selected: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxButtonDirective.prototype._type;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxButtonDirective.prototype._defaultType;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxButtonDirective.prototype._cssClassPrefix;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxButtonDirective.prototype._color;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxButtonDirective.prototype._label;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxButtonDirective.prototype._backgroundColor;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxButtonDirective.prototype._disabled;
    /**
     * Called when the button is clicked
     * @type {?}
     */
    IgxButtonDirective.prototype.buttonClick;
    /**
     * Sets/gets the `role` attribute.
     * ```typescript
     * this.button.role = 'navbutton';
     * ```
     * ```typescript
     * let buttonRole =  this.button.role;
     * ```
     * \@memberof IgxButtonDirective
     * @type {?}
     */
    IgxButtonDirective.prototype.role;
    /**
     * Gets or sets whether the button is selected.
     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.
     * ```html
     * <button igxButton="flat" [selected]="button.selected"></button>
     * ```
     * \@memberof IgxButtonDirective
     * @type {?}
     */
    IgxButtonDirective.prototype.selected;
    /** @type {?} */
    IgxButtonDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    IgxButtonDirective.prototype._renderer;
    /**
     * @type {?}
     * @protected
     */
    IgxButtonDirective.prototype._displayDensityOptions;
}
/**
 * @hidden
 */
export class IgxButtonModule {
}
IgxButtonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IgxButtonDirective],
                exports: [IgxButtonDirective]
            },] }
];
//# sourceMappingURL=data:application/json;base64,