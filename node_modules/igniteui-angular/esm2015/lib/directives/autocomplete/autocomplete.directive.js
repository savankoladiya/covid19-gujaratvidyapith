/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter, NgModule, ElementRef, HostListener, ChangeDetectorRef } from '@angular/core';
import { NgModel, FormControlName } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { first, takeUntil } from 'rxjs/operators';
import { AbsoluteScrollStrategy, AutoPositionStrategy } from '../../services/index';
import { IgxDropDownModule, IgxDropDownComponent, IgxDropDownItemNavigationDirective } from '../../drop-down/index';
import { IgxInputGroupComponent } from '../../input-group/index';
/**
 * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.
 * @export
 * @record
 */
export function AutocompleteItemSelectionEventArgs() { }
if (false) {
    /**
     * New value selected from the drop down
     * @type {?}
     */
    AutocompleteItemSelectionEventArgs.prototype.value;
}
/**
 * @record
 */
export function AutocompleteOverlaySettings() { }
if (false) {
    /**
     * Position strategy to use with this settings
     * @type {?|undefined}
     */
    AutocompleteOverlaySettings.prototype.positionStrategy;
    /**
     * Scroll strategy to use with this settings
     * @type {?|undefined}
     */
    AutocompleteOverlaySettings.prototype.scrollStrategy;
    /**
     * Set the outlet container to attach the overlay to
     * @type {?|undefined}
     */
    AutocompleteOverlaySettings.prototype.outlet;
}
/**
 * **Ignite UI for Angular Autocomplete** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)
 *
 * The igxAutocomplete directive provides a way to enhance a text input
 * by showing a drop down of suggested options, provided by the developer.
 *
 * Example:
 * ```html
 * <input type="text" [igxAutocomplete]="townsPanel" />
 * <igx-drop-down #townsPanel>
 *     <igx-drop-down-item *ngFor="let town of towns | startsWith:townSelected" [value]="town">
 *         {{town}}
 *     </igx-drop-down-item>
 * </igx-drop-down>
 * ```
 */
export class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective {
    /**
     * @param {?} ngModel
     * @param {?} formControl
     * @param {?} group
     * @param {?} elementRef
     * @param {?} cdr
     */
    constructor(ngModel, formControl, group, elementRef, cdr) {
        super(null);
        this.ngModel = ngModel;
        this.formControl = formControl;
        this.group = group;
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.defaultSettings = {
            modal: false,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy({ target: this.parentElement }),
            excludePositionTarget: true
        };
        this.dropDownOpened$ = new Subject();
        /**
         * Enables/disables autocomplete component
         *
         * ```typescript
         * // get
         * let disabled = this.autocomplete.disabled;
         * ```
         * ```html
         * <!--set-->
         * <input type="text" [igxAutocomplete]="townsPanel" [igxAutocompleteDisabled]="disabled"/>
         * ```
         * ```typescript
         * // set
         * public disabled = true;
         * ```
         */
        this.disabled = false;
        /**
         * Emitted after item from the drop down is selected
         *
         * ```html
         * <input igxInput [igxAutocomplete]="townsPanel" (onItemSelected)='itemSelected($event)' />
         * ```
         */
        this.onItemSelected = new EventEmitter();
        /**
         * @hidden \@internal
         */
        this.autofill = 'off';
        /**
         * @hidden \@internal
         */
        this.role = 'combobox';
        this.select = (value) => {
            if (!value.newSelection) {
                return;
            }
            value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.
            // Disable selection in the drop down, because in autocomplete we do not save selection.
            /** @type {?} */
            const newValue = value.newSelection.value;
            /** @type {?} */
            const args = { value: newValue, cancel: false };
            this.onItemSelected.emit(args);
            if (args.cancel) {
                return;
            }
            this.close();
            this.nativeElement.focus();
            // Update model after the input is re-focused, in order to have proper valid styling.
            // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.
            this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;
        };
        this.highlightFirstItem = () => {
            if (this.target.focusedItem) {
                this.target.focusedItem.focused = false;
                this.target.focusedItem = null;
            }
            this.target.navigateFirst();
            this.cdr.detectChanges();
        };
    }
    /**
     * @protected
     * @return {?}
     */
    get model() {
        return this.ngModel || this.formControl;
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get parentElement() {
        return this.group ? this.group.element.nativeElement : this.nativeElement;
    }
    /**
     * @private
     * @return {?}
     */
    get settings() {
        /** @type {?} */
        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);
        if (!settings.positionStrategy.settings.target) {
            /** @type {?} */
            const positionStrategyClone = settings.positionStrategy.clone();
            positionStrategyClone.settings.target = this.parentElement;
            settings.positionStrategy = positionStrategyClone;
        }
        return settings;
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get ariaExpanded() {
        return !this.collapsed;
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get hasPopUp() {
        return 'listbox';
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get ariaOwns() {
        return this.target.listId;
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get ariaActiveDescendant() {
        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    get ariaAutocomplete() {
        return 'list';
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    onInput() {
        this.open();
    }
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    onArrowDown(event) {
        event.preventDefault();
        this.open();
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    onTab() {
        this.close();
    }
    /**
     * @hidden \@internal
     * @param {?} event
     * @return {?}
     */
    handleKeyDown(event) {
        if (!this.collapsed) {
            switch (event.key.toLowerCase()) {
                case 'space':
                case 'spacebar':
                case ' ':
                case 'home':
                case 'end':
                    return;
                default:
                    super.handleKeyDown(event);
            }
        }
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    onArrowDownKeyDown() {
        super.onArrowDownKeyDown();
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    onArrowUpKeyDown() {
        super.onArrowUpKeyDown();
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    onEndKeyDown() {
        super.onEndKeyDown();
    }
    /**
     * @hidden \@internal
     * @return {?}
     */
    onHomeKeyDown() {
        super.onHomeKeyDown();
    }
    /**
     * Closes autocomplete drop down
     * @return {?}
     */
    close() {
        if (this.collapsed) {
            return;
        }
        this.target.close();
        this.dropDownOpened$.next();
    }
    /**
     * Opens autocomplete drop down
     * @return {?}
     */
    open() {
        if (this.disabled || !this.collapsed) {
            return;
        }
        this.target.width = this.parentElement.clientWidth + 'px';
        this.target.open(this.settings);
        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);
        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);
        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);
    }
    /**
     * @private
     * @return {?}
     */
    get collapsed() {
        return this.target ? this.target.collapsed : true;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        this.dropDownOpened$.complete();
    }
}
IgxAutocompleteDirective.decorators = [
    { type: Directive, args: [{
                selector: '[igxAutocomplete]'
            },] }
];
/** @nocollapse */
IgxAutocompleteDirective.ctorParameters = () => [
    { type: NgModel, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [NgModel,] }] },
    { type: FormControlName, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [FormControlName,] }] },
    { type: IgxInputGroupComponent, decorators: [{ type: Optional }] },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
IgxAutocompleteDirective.propDecorators = {
    target: [{ type: Input, args: ['igxAutocomplete',] }],
    disabled: [{ type: Input, args: ['igxAutocompleteDisabled',] }],
    autocompleteSettings: [{ type: Input, args: ['igxAutocompleteSettings',] }],
    onItemSelected: [{ type: Output }],
    autofill: [{ type: HostBinding, args: ['attr.autocomplete',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    ariaExpanded: [{ type: HostBinding, args: ['attr.aria-expanded',] }],
    hasPopUp: [{ type: HostBinding, args: ['attr.aria-haspopup',] }],
    ariaOwns: [{ type: HostBinding, args: ['attr.aria-owns',] }],
    ariaActiveDescendant: [{ type: HostBinding, args: ['attr.aria-activedescendant',] }],
    ariaAutocomplete: [{ type: HostBinding, args: ['attr.aria-autocomplete',] }],
    onInput: [{ type: HostListener, args: ['input',] }],
    onArrowDown: [{ type: HostListener, args: ['keydown.ArrowDown', ['$event'],] }, { type: HostListener, args: ['keydown.Alt.ArrowDown', ['$event'],] }, { type: HostListener, args: ['keydown.ArrowUp', ['$event'],] }, { type: HostListener, args: ['keydown.Alt.ArrowUp', ['$event'],] }],
    onTab: [{ type: HostListener, args: ['keydown.Tab',] }, { type: HostListener, args: ['keydown.Shift.Tab',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxAutocompleteDirective.prototype.defaultSettings;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.id;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.dropDownOpened$;
    /**
     * Sets the target of the autocomplete directive
     *
     * ```html
     * <!-- Set -->
     * <input [igxAutocomplete]="dropdown" />
     * ...
     * <igx-drop-down #dropdown>
     * ...
     * </igx-drop-down>
     * ```
     * @type {?}
     */
    IgxAutocompleteDirective.prototype.target;
    /**
     * Enables/disables autocomplete component
     *
     * ```typescript
     * // get
     * let disabled = this.autocomplete.disabled;
     * ```
     * ```html
     * <!--set-->
     * <input type="text" [igxAutocomplete]="townsPanel" [igxAutocompleteDisabled]="disabled"/>
     * ```
     * ```typescript
     * // set
     * public disabled = true;
     * ```
     * @type {?}
     */
    IgxAutocompleteDirective.prototype.disabled;
    /**
     * Provide overlay settings for the autocomplete drop down
     *
     * ```typescript
     * // get
     * let settings = this.autocomplete.autocompleteSettings;
     * ```
     * ```html
     * <!--set-->
     * <input type="text" [igxAutocomplete]="townsPanel" [igxAutocompleteSettings]="settings"/>
     * ```
     * ```typescript
     * // set
     * this.settings = {
     *  positionStrategy: new ConnectedPositioningStrategy({
     *      closeAnimation: null,
     *      openAnimation: null
     *  })
     * };
     * ```
     * @type {?}
     */
    IgxAutocompleteDirective.prototype.autocompleteSettings;
    /**
     * Emitted after item from the drop down is selected
     *
     * ```html
     * <input igxInput [igxAutocomplete]="townsPanel" (onItemSelected)='itemSelected($event)' />
     * ```
     * @type {?}
     */
    IgxAutocompleteDirective.prototype.onItemSelected;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxAutocompleteDirective.prototype.autofill;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxAutocompleteDirective.prototype.role;
    /**
     * @type {?}
     * @private
     */
    IgxAutocompleteDirective.prototype.select;
    /**
     * @type {?}
     * @private
     */
    IgxAutocompleteDirective.prototype.highlightFirstItem;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.ngModel;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.formControl;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.group;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    IgxAutocompleteDirective.prototype.cdr;
}
/**
 * @hidden
 */
export class IgxAutocompleteModule {
}
IgxAutocompleteModule.decorators = [
    { type: NgModule, args: [{
                imports: [IgxDropDownModule, CommonModule],
                declarations: [IgxAutocompleteDirective],
                exports: [IgxAutocompleteDirective]
            },] }
];
//# sourceMappingURL=data:application/json;base64,