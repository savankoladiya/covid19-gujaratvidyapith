/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { transition, trigger, useAnimation } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, HostBinding, Input, NgModule, NgZone, Output } from '@angular/core';
import { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';
/** @type {?} */
var NEXT_ID = 0;
/**
 * **Ignite UI for Angular Snackbar** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)
 *
 * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can
 * include a link to an action such as Undo.
 *
 * Example:
 * ```html
 * <button (click)="snackbar.show()">Send message</button>
 * <div>
 *   <igx-snackbar #snackbar message="Message sent">
 *   </igx-snackbar>
 * </div>
 * ```
 */
var IgxSnackbarComponent = /** @class */ (function () {
    function IgxSnackbarComponent(zone) {
        this.zone = zone;
        /**
         * Sets/gets the `id` of the snackbar.
         * If not set, the `id` of the first snackbar component  will be `"igx-snackbar-0"`;
         * ```html
         * <igx-snackbar id = "Snackbar1"></igx-snackbar>
         * ```
         * ```typescript
         * let snackbarId = this.snackbar.id;
         * ```
         * \@memberof IgxSnackbarComponent
         */
        this.id = "igx-snackbar-" + NEXT_ID++;
        /**
         * Enables/Disables the visibility of the snackbar.
         * If not set, the `isVisible` attribute will have value `false`.
         * ```html
         * <igx-snackbar [isVisible] = "true"></igx-snackbar>
         * ```
         * ```typescript
         * let isVisible =  this.snackbar.isVisible;
         * ```
         */
        this.isVisible = false;
        /**
         * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.
         * Default value is `true`.
         * ```html
         * <igx-snackbar [autoHide] = "false"></igx-snackbar>
         * ```
         * ```typescript
         * let autoHide =  this.snackbar.autoHide;
         * ```
         */
        this.autoHide = true;
        /**
         * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.
         * Default value is 4000.
         * ```html
         * <igx-snackbar [displayTime] = "2000"></igx-snackbar>
         * ```
         * ```typescript
         * let displayTime = this.snackbar.displayTime;
         * ```
         */
        this.displayTime = 4000;
        /**
         * An event that will be emitted when the action is executed.
         * Provides reference to the `IgxSnackbarComponent` as an argument.
         * ```html
         * <igx-snackbar (onAction) = "onAction($event)"></igx-snackbar>
         * ```
         */
        this.onAction = new EventEmitter();
        /**
         * An event that will be emitted when the snackbar animation starts.
         * Provides reference to the `AnimationEvent` interface as an argument.
         * ```html
         * <igx-snackbar (animationStarted) = "animationStarted($event)"></igx-snackbar>
         * ```
         */
        this.animationStarted = new EventEmitter();
        /**
         * An event that will be emitted when the snackbar animation ends.
         * Provides reference to the `AnimationEvent` interface as an argument.
         * ```html
         * <igx-snackbar (animationDone) = "animationDone($event)"></igx-snackbar>
         * ```
         */
        this.animationDone = new EventEmitter();
    }
    /**
     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.
     * ```typescript
     * this.snackbar.show();
     * ```
     */
    /**
     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.
     * ```typescript
     * this.snackbar.show();
     * ```
     * @return {?}
     */
    IgxSnackbarComponent.prototype.show = /**
     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.
     * ```typescript
     * this.snackbar.show();
     * ```
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutId);
        setTimeout(this.timeoutId);
        this.isVisible = true;
        if (this.autoHide) {
            this.timeoutId = setTimeout(function () {
                _this.hide();
            }, this.displayTime);
        }
    };
    /**
     * Hides the snackbar.
     * ```typescript
     * this.snackbar.hide();
     * ```
     */
    /**
     * Hides the snackbar.
     * ```typescript
     * this.snackbar.hide();
     * ```
     * @return {?}
     */
    IgxSnackbarComponent.prototype.hide = /**
     * Hides the snackbar.
     * ```typescript
     * this.snackbar.hide();
     * ```
     * @return {?}
     */
    function () {
        this.isVisible = false;
        clearTimeout(this.timeoutId);
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxSnackbarComponent.prototype.triggerAction = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.onAction.emit(this);
    };
    /**
     *@hidden
     * @memberof IgxSnackbarComponent
     */
    /**
     * @hidden
     * \@memberof IgxSnackbarComponent
     * @param {?} evt
     * @return {?}
     */
    IgxSnackbarComponent.prototype.snackbarAnimationStarted = /**
     * @hidden
     * \@memberof IgxSnackbarComponent
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        if (evt.fromState === 'void') {
            this.animationStarted.emit(evt);
        }
    };
    /**
     *@hidden
     * @memberof IgxSnackbarComponent
     */
    /**
     * @hidden
     * \@memberof IgxSnackbarComponent
     * @param {?} evt
     * @return {?}
     */
    IgxSnackbarComponent.prototype.snackbarAnimationDone = /**
     * @hidden
     * \@memberof IgxSnackbarComponent
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        if (evt.fromState === 'show') {
            this.animationDone.emit(evt);
        }
    };
    IgxSnackbarComponent.decorators = [
        { type: Component, args: [{
                    animations: [
                        trigger('slideInOut', [
                            transition('void => *', [
                                useAnimation(slideInBottom, {
                                    params: {
                                        duration: '.35s',
                                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',
                                        fromPosition: 'translateY(100%)',
                                        toPosition: 'translateY(0)'
                                    }
                                })
                            ]),
                            transition('* => void', [
                                useAnimation(slideOutBottom, {
                                    params: {
                                        duration: '.2s',
                                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',
                                        fromPosition: 'translateY(0)',
                                        toOpacity: 1,
                                        toPosition: 'translateY(100%)'
                                    }
                                })
                            ])
                        ]),
                        trigger('fadeInOut', [
                            transition('void => *', [
                                useAnimation(fadeIn, {
                                    params: {
                                        duration: '.35s',
                                        easing: 'ease-out'
                                    }
                                })
                            ]),
                            transition('* => void', [
                                useAnimation(fadeOut, {
                                    params: {
                                        duration: '.2s',
                                        easing: 'ease-out'
                                    }
                                })
                            ])
                        ])
                    ],
                    selector: 'igx-snackbar',
                    template: "<div class=\"igx-snackbar\" *ngIf=\"isVisible\" (@slideInOut.start)=\"snackbarAnimationStarted($event)\" (@slideInOut.done)=\"snackbarAnimationDone($event)\"\n    [@slideInOut]=\"isVisible\">\n    <div class=\"igx-snackbar__message\" [@fadeInOut]=\"isVisible\">\n        {{ message }}\n        <ng-content></ng-content>\n    </div>\n    <button class=\"igx-snackbar__button\" igxRipple=\"white\" *ngIf=\"actionText\" [@fadeInOut] (click)=\"triggerAction()\">\n        {{ actionText }}\n    </button>\n</div>\n",
                    styles: ["\n        :host {\n            display: block;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    IgxSnackbarComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    IgxSnackbarComponent.propDecorators = {
        id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
        message: [{ type: Input }],
        isVisible: [{ type: Input }],
        autoHide: [{ type: Input }],
        displayTime: [{ type: Input }],
        actionText: [{ type: Input }],
        onAction: [{ type: Output }],
        animationStarted: [{ type: Output }],
        animationDone: [{ type: Output }]
    };
    return IgxSnackbarComponent;
}());
export { IgxSnackbarComponent };
if (false) {
    /**
     * Sets/gets the `id` of the snackbar.
     * If not set, the `id` of the first snackbar component  will be `"igx-snackbar-0"`;
     * ```html
     * <igx-snackbar id = "Snackbar1"></igx-snackbar>
     * ```
     * ```typescript
     * let snackbarId = this.snackbar.id;
     * ```
     * \@memberof IgxSnackbarComponent
     * @type {?}
     */
    IgxSnackbarComponent.prototype.id;
    /**
     * Sets/gets the `message` attribute.
     * ```html
     * <igx-snackbar [message] = "'Snackbar Component'"></igx-snackbar>
     * ```
     * ```typescript
     * let message =  this.snackbar.message;
     * ```
     * @type {?}
     */
    IgxSnackbarComponent.prototype.message;
    /**
     * Enables/Disables the visibility of the snackbar.
     * If not set, the `isVisible` attribute will have value `false`.
     * ```html
     * <igx-snackbar [isVisible] = "true"></igx-snackbar>
     * ```
     * ```typescript
     * let isVisible =  this.snackbar.isVisible;
     * ```
     * @type {?}
     */
    IgxSnackbarComponent.prototype.isVisible;
    /**
     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.
     * Default value is `true`.
     * ```html
     * <igx-snackbar [autoHide] = "false"></igx-snackbar>
     * ```
     * ```typescript
     * let autoHide =  this.snackbar.autoHide;
     * ```
     * @type {?}
     */
    IgxSnackbarComponent.prototype.autoHide;
    /**
     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.
     * Default value is 4000.
     * ```html
     * <igx-snackbar [displayTime] = "2000"></igx-snackbar>
     * ```
     * ```typescript
     * let displayTime = this.snackbar.displayTime;
     * ```
     * @type {?}
     */
    IgxSnackbarComponent.prototype.displayTime;
    /**
     * Sets/gets the `actionText` attribute.
     * ```html
     * <igx-snackbar [actionText] = "'Action Text'"></igx-snackbar>
     * ```
     * @type {?}
     */
    IgxSnackbarComponent.prototype.actionText;
    /**
     * An event that will be emitted when the action is executed.
     * Provides reference to the `IgxSnackbarComponent` as an argument.
     * ```html
     * <igx-snackbar (onAction) = "onAction($event)"></igx-snackbar>
     * ```
     * @type {?}
     */
    IgxSnackbarComponent.prototype.onAction;
    /**
     * An event that will be emitted when the snackbar animation starts.
     * Provides reference to the `AnimationEvent` interface as an argument.
     * ```html
     * <igx-snackbar (animationStarted) = "animationStarted($event)"></igx-snackbar>
     * ```
     * @type {?}
     */
    IgxSnackbarComponent.prototype.animationStarted;
    /**
     * An event that will be emitted when the snackbar animation ends.
     * Provides reference to the `AnimationEvent` interface as an argument.
     * ```html
     * <igx-snackbar (animationDone) = "animationDone($event)"></igx-snackbar>
     * ```
     * @type {?}
     */
    IgxSnackbarComponent.prototype.animationDone;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxSnackbarComponent.prototype.timeoutId;
    /**
     * @type {?}
     * @private
     */
    IgxSnackbarComponent.prototype.zone;
}
/**
 * @hidden
 */
var IgxSnackbarModule = /** @class */ (function () {
    function IgxSnackbarModule() {
    }
    IgxSnackbarModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxSnackbarComponent],
                    exports: [IgxSnackbarComponent],
                    imports: [CommonModule]
                },] }
    ];
    return IgxSnackbarModule;
}());
export { IgxSnackbarModule };
//# sourceMappingURL=data:application/json;base64,