/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function IDropStrategy() { }
if (false) {
    /** @type {?} */
    IDropStrategy.prototype.dropAction;
}
// @dynamic
var 
// @dynamic
IgxDefaultDropStrategy = /** @class */ (function () {
    function IgxDefaultDropStrategy() {
    }
    /**
     * @param {?} drag
     * @param {?} drop
     * @param {?} atIndex
     * @return {?}
     */
    IgxDefaultDropStrategy.prototype.dropAction = /**
     * @param {?} drag
     * @param {?} drop
     * @param {?} atIndex
     * @return {?}
     */
    function (drag, drop, atIndex) { };
    return IgxDefaultDropStrategy;
}());
// @dynamic
export { IgxDefaultDropStrategy };
// @dynamic
var 
// @dynamic
IgxAppendDropStrategy = /** @class */ (function () {
    function IgxAppendDropStrategy(_renderer) {
        this._renderer = _renderer;
    }
    /**
     * @param {?} drag
     * @param {?} drop
     * @param {?} atIndex
     * @return {?}
     */
    IgxAppendDropStrategy.prototype.dropAction = /**
     * @param {?} drag
     * @param {?} drop
     * @param {?} atIndex
     * @return {?}
     */
    function (drag, drop, atIndex) {
        /** @type {?} */
        var dragElement = drag.element.nativeElement;
        /** @type {?} */
        var dropAreaElement = drop.element.nativeElement;
        this._renderer.removeChild(dragElement.parentNode, dragElement);
        this._renderer.appendChild(dropAreaElement, dragElement);
    };
    return IgxAppendDropStrategy;
}());
// @dynamic
export { IgxAppendDropStrategy };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxAppendDropStrategy.prototype._renderer;
}
// @dynamic
var 
// @dynamic
IgxPrependDropStrategy = /** @class */ (function () {
    function IgxPrependDropStrategy(_renderer) {
        this._renderer = _renderer;
    }
    /**
     * @param {?} drag
     * @param {?} drop
     * @param {?} atIndex
     * @return {?}
     */
    IgxPrependDropStrategy.prototype.dropAction = /**
     * @param {?} drag
     * @param {?} drop
     * @param {?} atIndex
     * @return {?}
     */
    function (drag, drop, atIndex) {
        /** @type {?} */
        var dragElement = drag.element.nativeElement;
        /** @type {?} */
        var dropAreaElement = drop.element.nativeElement;
        this._renderer.removeChild(dragElement.parentNode, dragElement);
        if (dropAreaElement.children.length) {
            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[0]);
        }
        else {
            this._renderer.appendChild(dropAreaElement, dragElement);
        }
    };
    return IgxPrependDropStrategy;
}());
// @dynamic
export { IgxPrependDropStrategy };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxPrependDropStrategy.prototype._renderer;
}
// @dynamic
var 
// @dynamic
IgxInsertDropStrategy = /** @class */ (function () {
    function IgxInsertDropStrategy(_renderer) {
        this._renderer = _renderer;
    }
    /**
     * @param {?} drag
     * @param {?} drop
     * @param {?} atIndex
     * @return {?}
     */
    IgxInsertDropStrategy.prototype.dropAction = /**
     * @param {?} drag
     * @param {?} drop
     * @param {?} atIndex
     * @return {?}
     */
    function (drag, drop, atIndex) {
        if (drag.element.nativeElement.parentElement === drop.element.nativeElement && atIndex === -1) {
            return;
        }
        /** @type {?} */
        var dragElement = drag.element.nativeElement;
        /** @type {?} */
        var dropAreaElement = drop.element.nativeElement;
        this._renderer.removeChild(dragElement.parentNode, dragElement);
        if (atIndex !== -1 && dropAreaElement.children.length > atIndex) {
            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[atIndex]);
        }
        else {
            this._renderer.appendChild(dropAreaElement, dragElement);
        }
    };
    return IgxInsertDropStrategy;
}());
// @dynamic
export { IgxInsertDropStrategy };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxInsertDropStrategy.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1kcm9wLnN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2RyYWctZHJvcC9kcmFnLWRyb3Auc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUlBLG1DQUVDOzs7SUFERyxtQ0FBc0Y7OztBQUkxRjs7O0lBQUE7SUFHQSxDQUFDOzs7Ozs7O0lBREcsMkNBQVU7Ozs7OztJQUFWLFVBQVcsSUFBc0IsRUFBRSxJQUFzQixFQUFFLE9BQWUsSUFBSSxDQUFDO0lBQ25GLDZCQUFDO0FBQUQsQ0FBQyxBQUhELElBR0M7Ozs7QUFHRDs7O0lBRUksK0JBQW9CLFNBQW9CO1FBQXBCLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFBSSxDQUFDOzs7Ozs7O0lBRTdDLDBDQUFVOzs7Ozs7SUFBVixVQUFXLElBQXNCLEVBQUUsSUFBc0IsRUFBRSxPQUFlOztZQUNoRSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhOztZQUN4QyxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhO1FBQ2xELElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFDTCw0QkFBQztBQUFELENBQUMsQUFWRCxJQVVDOzs7Ozs7OztJQVJlLDBDQUE0Qjs7O0FBVzVDOzs7SUFFSSxnQ0FBb0IsU0FBb0I7UUFBcEIsY0FBUyxHQUFULFNBQVMsQ0FBVztJQUFJLENBQUM7Ozs7Ozs7SUFFN0MsMkNBQVU7Ozs7OztJQUFWLFVBQVcsSUFBc0IsRUFBRSxJQUFzQixFQUFFLE9BQWU7O1lBQ2hFLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7O1lBQ3hDLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7UUFDbEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNoRSxJQUFJLGVBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxXQUFXLEVBQUUsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFGO2FBQU07WUFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDNUQ7SUFDTCxDQUFDO0lBQ0wsNkJBQUM7QUFBRCxDQUFDLEFBZEQsSUFjQzs7Ozs7Ozs7SUFaZSwyQ0FBNEI7OztBQWU1Qzs7O0lBRUksK0JBQW9CLFNBQW9CO1FBQXBCLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFBSSxDQUFDOzs7Ozs7O0lBRTdDLDBDQUFVOzs7Ozs7SUFBVixVQUFXLElBQXNCLEVBQUUsSUFBc0IsRUFBRSxPQUFlO1FBQ3RFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsRUFBRTtZQUMzRixPQUFPO1NBQ1Y7O1lBRUssV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYTs7WUFDeEMsZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYTtRQUNsRCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2hFLElBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLE9BQU8sRUFBRTtZQUM3RCxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsV0FBVyxFQUFFLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNoRzthQUFNO1lBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQzVEO0lBQ0wsQ0FBQztJQUNMLDRCQUFDO0FBQUQsQ0FBQyxBQWxCRCxJQWtCQzs7Ozs7Ozs7SUFoQmUsMENBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hEcmFnRGlyZWN0aXZlLCBJZ3hEcm9wRGlyZWN0aXZlIH0gZnJvbSAnLi9kcmFnLWRyb3AuZGlyZWN0aXZlJztcblxuXG5leHBvcnQgaW50ZXJmYWNlIElEcm9wU3RyYXRlZ3kge1xuICAgIGRyb3BBY3Rpb246IChkcmFnOiBJZ3hEcmFnRGlyZWN0aXZlLCBkcm9wOiBJZ3hEcm9wRGlyZWN0aXZlLCBhdEluZGV4OiBudW1iZXIpID0+IHZvaWQ7XG59XG5cbi8vIEBkeW5hbWljXG5leHBvcnQgY2xhc3MgSWd4RGVmYXVsdERyb3BTdHJhdGVneSBpbXBsZW1lbnRzIElEcm9wU3RyYXRlZ3kge1xuXG4gICAgZHJvcEFjdGlvbihkcmFnOiBJZ3hEcmFnRGlyZWN0aXZlLCBkcm9wOiBJZ3hEcm9wRGlyZWN0aXZlLCBhdEluZGV4OiBudW1iZXIpIHsgfVxufVxuXG4vLyBAZHluYW1pY1xuZXhwb3J0IGNsYXNzIElneEFwcGVuZERyb3BTdHJhdGVneSBpbXBsZW1lbnRzIElEcm9wU3RyYXRlZ3kge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMikgeyB9XG5cbiAgICBkcm9wQWN0aW9uKGRyYWc6IElneERyYWdEaXJlY3RpdmUsIGRyb3A6IElneERyb3BEaXJlY3RpdmUsIGF0SW5kZXg6IG51bWJlcikge1xuICAgICAgICBjb25zdCBkcmFnRWxlbWVudCA9IGRyYWcuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCBkcm9wQXJlYUVsZW1lbnQgPSBkcm9wLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2hpbGQoZHJhZ0VsZW1lbnQucGFyZW50Tm9kZSwgZHJhZ0VsZW1lbnQpO1xuICAgICAgICB0aGlzLl9yZW5kZXJlci5hcHBlbmRDaGlsZChkcm9wQXJlYUVsZW1lbnQsIGRyYWdFbGVtZW50KTtcbiAgICB9XG59XG5cbi8vIEBkeW5hbWljXG5leHBvcnQgY2xhc3MgSWd4UHJlcGVuZERyb3BTdHJhdGVneSBpbXBsZW1lbnRzIElEcm9wU3RyYXRlZ3kge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMikgeyB9XG5cbiAgICBkcm9wQWN0aW9uKGRyYWc6IElneERyYWdEaXJlY3RpdmUsIGRyb3A6IElneERyb3BEaXJlY3RpdmUsIGF0SW5kZXg6IG51bWJlcikge1xuICAgICAgICBjb25zdCBkcmFnRWxlbWVudCA9IGRyYWcuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCBkcm9wQXJlYUVsZW1lbnQgPSBkcm9wLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2hpbGQoZHJhZ0VsZW1lbnQucGFyZW50Tm9kZSwgZHJhZ0VsZW1lbnQpO1xuICAgICAgICBpZiAoZHJvcEFyZWFFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuaW5zZXJ0QmVmb3JlKGRyb3BBcmVhRWxlbWVudCwgZHJhZ0VsZW1lbnQsIGRyb3BBcmVhRWxlbWVudC5jaGlsZHJlblswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5hcHBlbmRDaGlsZChkcm9wQXJlYUVsZW1lbnQsIGRyYWdFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBJZ3hJbnNlcnREcm9wU3RyYXRlZ3kgaW1wbGVtZW50cyBJRHJvcFN0cmF0ZWd5IHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHsgfVxuXG4gICAgZHJvcEFjdGlvbihkcmFnOiBJZ3hEcmFnRGlyZWN0aXZlLCBkcm9wOiBJZ3hEcm9wRGlyZWN0aXZlLCBhdEluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKGRyYWcuZWxlbWVudC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQgPT09IGRyb3AuZWxlbWVudC5uYXRpdmVFbGVtZW50ICYmIGF0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkcmFnRWxlbWVudCA9IGRyYWcuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCBkcm9wQXJlYUVsZW1lbnQgPSBkcm9wLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2hpbGQoZHJhZ0VsZW1lbnQucGFyZW50Tm9kZSwgZHJhZ0VsZW1lbnQpO1xuICAgICAgICBpZiAoYXRJbmRleCAhPT0gLTEgJiYgZHJvcEFyZWFFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA+IGF0SW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmluc2VydEJlZm9yZShkcm9wQXJlYUVsZW1lbnQsIGRyYWdFbGVtZW50LCBkcm9wQXJlYUVsZW1lbnQuY2hpbGRyZW5bYXRJbmRleF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuYXBwZW5kQ2hpbGQoZHJvcEFyZWFFbGVtZW50LCBkcmFnRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=