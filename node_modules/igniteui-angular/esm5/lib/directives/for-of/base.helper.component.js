/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HostListener, ElementRef, ChangeDetectorRef, Directive } from '@angular/core';
var VirtualHelperBaseDirective = /** @class */ (function () {
    function VirtualHelperBaseDirective(elementRef, cdr) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this.scrollAmount = 0;
        this._size = 0;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    VirtualHelperBaseDirective.prototype.onScroll = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.scrollAmount = event.target.scrollTop || event.target.scrollLeft;
    };
    Object.defineProperty(VirtualHelperBaseDirective.prototype, "nativeElement", {
        get: /**
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    VirtualHelperBaseDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyed = true;
    };
    Object.defineProperty(VirtualHelperBaseDirective.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.destroyed) {
                return;
            }
            this._size = value;
            this.cdr.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    VirtualHelperBaseDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxVirtualHelperBase]'
                },] }
    ];
    /** @nocollapse */
    VirtualHelperBaseDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    VirtualHelperBaseDirective.propDecorators = {
        onScroll: [{ type: HostListener, args: ['scroll', ['$event'],] }]
    };
    return VirtualHelperBaseDirective;
}());
export { VirtualHelperBaseDirective };
if (false) {
    /** @type {?} */
    VirtualHelperBaseDirective.prototype.scrollAmount;
    /** @type {?} */
    VirtualHelperBaseDirective.prototype._size;
    /** @type {?} */
    VirtualHelperBaseDirective.prototype.destroyed;
    /** @type {?} */
    VirtualHelperBaseDirective.prototype.elementRef;
    /** @type {?} */
    VirtualHelperBaseDirective.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5oZWxwZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2Zvci1vZi9iYXNlLmhlbHBlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFHSCxZQUFZLEVBQ1osVUFBVSxFQUNWLGlCQUFpQixFQUVqQixTQUFTLEVBQ1osTUFBTSxlQUFlLENBQUM7QUFFdkI7SUFjSSxvQ0FBbUIsVUFBc0IsRUFBUyxHQUFzQjtRQUFyRCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVMsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFWakUsaUJBQVksR0FBRyxDQUFDLENBQUM7UUFFakIsVUFBSyxHQUFHLENBQUMsQ0FBQztJQVEyRCxDQUFDOzs7OztJQUg3RSw2Q0FBUTs7OztJQURSLFVBQ1MsS0FBSztRQUNWLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDMUUsQ0FBQztJQUdELHNCQUFJLHFEQUFhOzs7O1FBQWpCO1lBQ0ksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUN6QyxDQUFDOzs7T0FBQTs7OztJQUVNLGdEQUFXOzs7SUFBbEI7UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDO0lBRUQsc0JBQVcsNENBQUk7Ozs7UUFRZjtZQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN0QixDQUFDOzs7OztRQVZELFVBQWdCLEtBQUs7WUFDakIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNoQixPQUFPO2FBQ1Y7WUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNuQixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzdCLENBQUM7OztPQUFBOztnQkE5QkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx3QkFBd0I7aUJBQ3JDOzs7O2dCQVJHLFVBQVU7Z0JBQ1YsaUJBQWlCOzs7MkJBZWhCLFlBQVksU0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBeUJ0QyxpQ0FBQztDQUFBLEFBbkNELElBbUNDO1NBaENZLDBCQUEwQjs7O0lBQ25DLGtEQUF3Qjs7SUFFeEIsMkNBQWlCOztJQUVqQiwrQ0FBaUI7O0lBTUwsZ0RBQTZCOztJQUFFLHlDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIE91dHB1dCxcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgRWxlbWVudFJlZixcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBPbkRlc3Ryb3ksXG4gICAgRGlyZWN0aXZlXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hWaXJ0dWFsSGVscGVyQmFzZV0nXG59KVxuZXhwb3J0IGNsYXNzIFZpcnR1YWxIZWxwZXJCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwdWJsaWMgc2Nyb2xsQW1vdW50ID0gMDtcblxuICAgIHB1YmxpYyBfc2l6ZSA9IDA7XG5cbiAgICBwdWJsaWMgZGVzdHJveWVkO1xuXG4gICAgQEhvc3RMaXN0ZW5lcignc2Nyb2xsJywgWyckZXZlbnQnXSlcbiAgICBvblNjcm9sbChldmVudCkge1xuICAgICAgICB0aGlzLnNjcm9sbEFtb3VudCA9IGV2ZW50LnRhcmdldC5zY3JvbGxUb3AgfHwgZXZlbnQudGFyZ2V0LnNjcm9sbExlZnQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwdWJsaWMgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikgeyB9XG5cbiAgICBnZXQgbmF0aXZlRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgc2l6ZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zaXplID0gdmFsdWU7XG4gICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuICAgIH1cbn1cbiJdfQ==