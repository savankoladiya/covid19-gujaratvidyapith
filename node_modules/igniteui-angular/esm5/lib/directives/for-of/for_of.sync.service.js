/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var IgxForOfSyncService = /** @class */ (function () {
    function IgxForOfSyncService() {
        this._master = new Map();
    }
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} directive
     * @return {?}
     */
    IgxForOfSyncService.prototype.isMaster = /**
     * @hidden
     * @param {?} directive
     * @return {?}
     */
    function (directive) {
        return this._master.get(directive.igxForScrollOrientation) === directive;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} directive
     * @param {?=} forced
     * @return {?}
     */
    IgxForOfSyncService.prototype.setMaster = /**
     * @hidden
     * @param {?} directive
     * @param {?=} forced
     * @return {?}
     */
    function (directive, forced) {
        if (forced === void 0) { forced = false; }
        /** @type {?} */
        var orientation = directive.igxForScrollOrientation;
        if (orientation && (forced || !this._master.has(orientation))) {
            this._master.set(orientation, directive);
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    IgxForOfSyncService.prototype.resetMaster = /**
     * @hidden
     * @return {?}
     */
    function () {
        this._master.clear();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} dir
     * @return {?}
     */
    IgxForOfSyncService.prototype.sizesCache = /**
     * @hidden
     * @param {?} dir
     * @return {?}
     */
    function (dir) {
        return this._master.get(dir).sizesCache;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} dir
     * @return {?}
     */
    IgxForOfSyncService.prototype.chunkSize = /**
     * @hidden
     * @param {?} dir
     * @return {?}
     */
    function (dir) {
        return this._master.get(dir).state.chunkSize;
    };
    IgxForOfSyncService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */ IgxForOfSyncService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function IgxForOfSyncService_Factory() { return new IgxForOfSyncService(); }, token: IgxForOfSyncService, providedIn: "root" });
    return IgxForOfSyncService;
}());
export { IgxForOfSyncService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxForOfSyncService.prototype._master;
}
var IgxForOfScrollSyncService = /** @class */ (function () {
    function IgxForOfScrollSyncService() {
        this._masterScroll = new Map();
    }
    /**
     * @param {?} dir
     * @param {?} scroll
     * @return {?}
     */
    IgxForOfScrollSyncService.prototype.setScrollMaster = /**
     * @param {?} dir
     * @param {?} scroll
     * @return {?}
     */
    function (dir, scroll) {
        this._masterScroll.set(dir, scroll);
    };
    /**
     * @param {?} dir
     * @return {?}
     */
    IgxForOfScrollSyncService.prototype.getScrollMaster = /**
     * @param {?} dir
     * @return {?}
     */
    function (dir) {
        return this._masterScroll.get(dir);
    };
    IgxForOfScrollSyncService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */ IgxForOfScrollSyncService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function IgxForOfScrollSyncService_Factory() { return new IgxForOfScrollSyncService(); }, token: IgxForOfScrollSyncService, providedIn: "root" });
    return IgxForOfScrollSyncService;
}());
export { IgxForOfScrollSyncService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxForOfScrollSyncService.prototype._masterScroll;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yX29mLnN5bmMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9mb3Itb2YvZm9yX29mLnN5bmMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQzs7QUFJdEQ7SUFBQTtRQUtZLFlBQU8sR0FBNEMsSUFBSSxHQUFHLEVBQXNDLENBQUM7S0F1QzVHO0lBckNHOztPQUVHOzs7Ozs7SUFDSSxzQ0FBUTs7Ozs7SUFBZixVQUFnQixTQUFxQztRQUNqRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLFNBQVMsQ0FBQztJQUM3RSxDQUFDO0lBRUQ7O09BRUc7Ozs7Ozs7SUFDSSx1Q0FBUzs7Ozs7O0lBQWhCLFVBQWlCLFNBQXFDLEVBQUUsTUFBYztRQUFkLHVCQUFBLEVBQUEsY0FBYzs7WUFDNUQsV0FBVyxHQUFHLFNBQVMsQ0FBQyx1QkFBdUI7UUFDckQsSUFBSSxXQUFXLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFO1lBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSSx5Q0FBVzs7OztJQUFsQjtRQUNJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSSx3Q0FBVTs7Ozs7SUFBakIsVUFBa0IsR0FBVztRQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUM1QyxDQUFDO0lBRUQ7O09BRUc7Ozs7OztJQUNJLHVDQUFTOzs7OztJQUFoQixVQUFpQixHQUFXO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztJQUNqRCxDQUFDOztnQkEzQ0osVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OzhCQU5EO0NBZ0RDLEFBNUNELElBNENDO1NBekNZLG1CQUFtQjs7Ozs7O0lBRTVCLHNDQUF5Rzs7QUF5QzdHO0lBQUE7UUFJWSxrQkFBYSxHQUE0QyxJQUFJLEdBQUcsRUFBZSxDQUFDO0tBUTNGOzs7Ozs7SUFQVSxtREFBZTs7Ozs7SUFBdEIsVUFBdUIsR0FBVyxFQUFFLE1BQWtDO1FBQ2xFLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7OztJQUVNLG1EQUFlOzs7O0lBQXRCLFVBQXVCLEdBQVc7UUFDOUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QyxDQUFDOztnQkFYSixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7b0NBcEREO0NBOERDLEFBWkQsSUFZQztTQVRZLHlCQUF5Qjs7Ozs7O0lBQ2xDLGtEQUF3RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4R3JpZEZvck9mRGlyZWN0aXZlIH0gZnJvbSAnLi9mb3Jfb2YuZGlyZWN0aXZlJztcbmltcG9ydCB7IFZpcnR1YWxIZWxwZXJCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9iYXNlLmhlbHBlci5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBJZ3hGb3JPZlN5bmNTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgX21hc3RlcjogTWFwPHN0cmluZywgSWd4R3JpZEZvck9mRGlyZWN0aXZlPGFueT4+ID0gbmV3IE1hcDxzdHJpbmcsIElneEdyaWRGb3JPZkRpcmVjdGl2ZTxhbnk+PigpO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBpc01hc3RlcihkaXJlY3RpdmU6IElneEdyaWRGb3JPZkRpcmVjdGl2ZTxhbnk+KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXN0ZXIuZ2V0KGRpcmVjdGl2ZS5pZ3hGb3JTY3JvbGxPcmllbnRhdGlvbikgPT09IGRpcmVjdGl2ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHVibGljIHNldE1hc3RlcihkaXJlY3RpdmU6IElneEdyaWRGb3JPZkRpcmVjdGl2ZTxhbnk+LCBmb3JjZWQgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBvcmllbnRhdGlvbiA9IGRpcmVjdGl2ZS5pZ3hGb3JTY3JvbGxPcmllbnRhdGlvbjtcbiAgICAgICAgaWYgKG9yaWVudGF0aW9uICYmIChmb3JjZWQgfHwgIXRoaXMuX21hc3Rlci5oYXMob3JpZW50YXRpb24pKSkge1xuICAgICAgICAgICAgdGhpcy5fbWFzdGVyLnNldChvcmllbnRhdGlvbiwgZGlyZWN0aXZlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzZXRNYXN0ZXIoKSB7XG4gICAgICAgIHRoaXMuX21hc3Rlci5jbGVhcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2l6ZXNDYWNoZShkaXI6IHN0cmluZyk6IG51bWJlcltdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hc3Rlci5nZXQoZGlyKS5zaXplc0NhY2hlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2h1bmtTaXplKGRpcjogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hc3Rlci5nZXQoZGlyKS5zdGF0ZS5jaHVua1NpemU7XG4gICAgfVxufVxuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBJZ3hGb3JPZlNjcm9sbFN5bmNTZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9tYXN0ZXJTY3JvbGw6IE1hcDxzdHJpbmcsIFZpcnR1YWxIZWxwZXJCYXNlRGlyZWN0aXZlPiA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XG4gICAgcHVibGljIHNldFNjcm9sbE1hc3RlcihkaXI6IHN0cmluZywgc2Nyb2xsOiBWaXJ0dWFsSGVscGVyQmFzZURpcmVjdGl2ZSkge1xuICAgICAgICB0aGlzLl9tYXN0ZXJTY3JvbGwuc2V0KGRpciwgc2Nyb2xsKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2Nyb2xsTWFzdGVyKGRpcjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXN0ZXJTY3JvbGwuZ2V0KGRpcik7XG4gICAgfVxufVxuIl19