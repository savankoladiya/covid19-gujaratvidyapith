/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe, Inject } from '@angular/core';
import { IGX_TIME_PICKER_COMPONENT } from './time-picker.common';
/**
 * Formats `IgxTimePickerComponent` display value according to the `format` property,
 * when the input element loses focus.
 *
 */
var TimeDisplayFormatPipe = /** @class */ (function () {
    function TimeDisplayFormatPipe(timePicker) {
        this.timePicker = timePicker;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    TimeDisplayFormatPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var hour;
        /** @type {?} */
        var minutes;
        /** @type {?} */
        var amPM;
        /** @type {?} */
        var maskAmPM = this.timePicker.parseMask();
        /** @type {?} */
        var mask = this.timePicker.parseMask(false);
        if (!value || value === mask || value === maskAmPM) {
            return '';
        }
        /** @type {?} */
        var sections = value.split(/[\s:]+/);
        if (this.timePicker.showHoursList) {
            hour = sections[0];
        }
        if (this.timePicker.showMinutesList) {
            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];
        }
        if (this.timePicker.showAmPmList) {
            amPM = sections[sections.length - 1];
        }
        /** @type {?} */
        var format = this.timePicker.format;
        /** @type {?} */
        var prompt = this.timePicker.promptChar;
        /** @type {?} */
        var regExp = new RegExp(this.timePicker.promptChar, 'g');
        if (format.indexOf('hh') !== -1 || format.indexOf('HH') !== -1 && hour.indexOf(prompt) !== -1) {
            hour = hour === prompt + prompt ? '00' : hour.replace(regExp, '0');
        }
        if (format.indexOf('mm') !== -1 && minutes.indexOf(prompt) !== -1) {
            minutes = minutes === prompt + prompt ? '00' : minutes.replace(regExp, '0');
        }
        if (format.indexOf('hh') === -1 && format.indexOf('HH') === -1 && hour !== undefined) {
            hour = hour.indexOf(prompt) !== -1 ? hour.replace(regExp, '') : hour;
            /** @type {?} */
            var hourVal = parseInt(hour, 10);
            hour = !hourVal ? '0' : hourVal < 10 && hourVal !== 0 ? hour.replace('0', '') : hour;
        }
        if (format.indexOf('mm') === -1 && minutes !== undefined) {
            minutes = minutes.indexOf(prompt) !== -1 ? minutes.replace(regExp, '') : minutes;
            /** @type {?} */
            var minutesVal = parseInt(minutes, 10);
            minutes = !minutesVal ? '0' : minutesVal < 10 && minutesVal !== 0 ? minutes.replace('0', '') : minutes;
        }
        if (format.indexOf('tt') !== -1 && (amPM !== 'AM' || amPM !== 'PM')) {
            amPM = amPM.indexOf('p') !== -1 || amPM.indexOf('P') !== -1 ? 'PM' : 'AM';
        }
        /** @type {?} */
        var result = amPM ? hour + ":" + minutes + " " + amPM : hour + ":" + minutes;
        if (!hour) {
            result = result.slice(result.indexOf(':') + 1, result.length);
        }
        if (!minutes) {
            result = result.slice(0, result.indexOf(':'));
            if (amPM) {
                result = result + ' ' + amPM;
            }
        }
        return result;
    };
    TimeDisplayFormatPipe.decorators = [
        { type: Pipe, args: [{ name: 'displayFormat' },] }
    ];
    /** @nocollapse */
    TimeDisplayFormatPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] }
    ]; };
    return TimeDisplayFormatPipe;
}());
export { TimeDisplayFormatPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TimeDisplayFormatPipe.prototype.timePicker;
}
/**
 * Formats `IgxTimePickerComponent` display value according to the `format` property,
 * when the input element gets focus.
 *
 */
var TimeInputFormatPipe = /** @class */ (function () {
    function TimeInputFormatPipe(timePicker) {
        this.timePicker = timePicker;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    TimeInputFormatPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var prompt = this.timePicker.promptChar;
        /** @type {?} */
        var regExp = new RegExp(prompt, 'g');
        /** @type {?} */
        var mask;
        /** @type {?} */
        var hour;
        /** @type {?} */
        var minutes;
        /** @type {?} */
        var amPM;
        if (this.timePicker.cleared) {
            this.timePicker.cleared = false;
            mask = this.timePicker.parseMask(false);
        }
        else {
            mask = this.timePicker.parseMask();
        }
        if (!value || value === mask) {
            return mask;
        }
        /** @type {?} */
        var sections = value.split(/[\s:]+/);
        if (this.timePicker.showHoursList) {
            hour = sections[0];
            hour = hour.replace(regExp, '');
            /** @type {?} */
            var leadZeroHour = (parseInt(hour, 10) < 10 && !hour.startsWith('0')) || hour === '0';
            hour = leadZeroHour ? '0' + hour : hour;
        }
        if (this.timePicker.showMinutesList) {
            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];
            minutes = minutes.replace(regExp, '');
            /** @type {?} */
            var leadZeroMinutes = (parseInt(minutes, 10) < 10 && !minutes.startsWith('0')) || minutes === '0';
            minutes = leadZeroMinutes ? '0' + minutes : minutes;
        }
        if (this.timePicker.showAmPmList) {
            amPM = sections[sections.length - 1];
        }
        /** @type {?} */
        var result = amPM ? hour + ":" + minutes + " " + amPM : hour + ":" + minutes;
        if (!hour) {
            result = result.slice(result.indexOf(':') + 1, result.length);
        }
        if (!minutes) {
            result = result.slice(0, result.indexOf(':'));
            if (amPM) {
                result = result + ' ' + amPM;
            }
        }
        return result;
    };
    TimeInputFormatPipe.decorators = [
        { type: Pipe, args: [{ name: 'inputFormat' },] }
    ];
    /** @nocollapse */
    TimeInputFormatPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [IGX_TIME_PICKER_COMPONENT,] }] }
    ]; };
    return TimeInputFormatPipe;
}());
export { TimeInputFormatPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TimeInputFormatPipe.prototype.timePicker;
}
//# sourceMappingURL=data:application/json;base64,