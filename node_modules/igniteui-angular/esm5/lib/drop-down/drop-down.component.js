/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ContentChildren, ElementRef, forwardRef, QueryList, Input, ViewChild, ContentChild, Output, EventEmitter, Optional, Inject } from '@angular/core';
import { IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { IgxDropDownItemComponent } from './drop-down-item.component';
import { IgxDropDownBase } from './drop-down.base';
import { Navigate } from './drop-down.common';
import { IGX_DROPDOWN_BASE } from './drop-down.common';
import { isIE } from '../core/utils';
import { IgxSelectionAPIService } from '../core/selection';
import { Subject } from 'rxjs';
import { IgxDropDownItemBase } from './drop-down-item.base';
import { IgxForOfDirective } from '../directives/for-of/for_of.directive';
import { take } from 'rxjs/operators';
import { DisplayDensityToken } from '../core/density';
/**
 * **Ignite UI for Angular DropDown** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)
 *
 * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and
 * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down
 *
 * Example:
 * ```html
 * <igx-drop-down>
 *   <igx-drop-down-item *ngFor="let item of items" disabled={{item.disabled}} isHeader={{item.header}}>
 *     {{ item.value }}
 *   </igx-drop-down-item>
 * </igx-drop-down>
 * ```
 */
var IgxDropDownComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxDropDownComponent, _super);
    function IgxDropDownComponent(elementRef, cdr, selection, _displayDensityOptions) {
        var _this = _super.call(this, elementRef, cdr, _displayDensityOptions) || this;
        _this.elementRef = elementRef;
        _this.cdr = cdr;
        _this.selection = selection;
        _this._displayDensityOptions = _displayDensityOptions;
        _this.destroy$ = new Subject();
        /**
         * Emitted before the dropdown is opened
         *
         * ```html
         * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>
         * ```
         */
        _this.onOpening = new EventEmitter();
        /**
         * Emitted after the dropdown is opened
         *
         * ```html
         * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>
         * ```
         */
        _this.onOpened = new EventEmitter();
        /**
         * Emitted before the dropdown is closed
         *
         * ```html
         * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>
         * ```
         */
        _this.onClosing = new EventEmitter();
        /**
         * Emitted after the dropdown is closed
         *
         * ```html
         * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>
         * ```
         */
        _this.onClosed = new EventEmitter();
        /**
         * Gets/sets whether items take focus. Disabled by default.
         * When enabled, drop down items gain tab index and are focused when active -
         * this includes activating the selected item when opening the drop down and moving with keyboard navigation.
         *
         * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive
         * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.
         *
         * ```typescript
         * // get
         * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>
         * ```
         */
        _this.allowItemsFocus = false;
        return _this;
    }
    Object.defineProperty(IgxDropDownComponent.prototype, "focusedItem", {
        /**
         * @hidden @internal
         */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.virtDir) {
                return this._focusedItem && this._focusedItem.index !== -1 ?
                    (this.children.find(function (e) { return e.index === _this._focusedItem.index; }) || null) :
                    null;
            }
            return this._focusedItem;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value) {
                this.selection.clear(this.id + "-active");
                this._focusedItem = null;
                return;
            }
            this._focusedItem = value;
            if (this.virtDir) {
                this._focusedItem = (/** @type {?} */ ({
                    value: value.value,
                    index: value.index
                }));
            }
            this.selection.set(this.id + "-active", new Set([this._focusedItem]));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownComponent.prototype, "id", {
        get: /**
         * @return {?}
         */
        function () {
            return this._id;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.toggleDirective.id = value;
            this.selection.set(value, this.selection.get(this.id));
            this.selection.clear(this.id);
            this.selection.set(value, this.selection.get(this.id + "-active"));
            this.selection.clear(this.id + "-active");
            this._id = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownComponent.prototype, "listId", {
        /** Id of the internal listbox of the drop down */
        get: /**
         * Id of the internal listbox of the drop down
         * @return {?}
         */
        function () {
            return this.id + '-list';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownComponent.prototype, "selectedItem", {
        /**
         * Get currently selected item
         *
         * ```typescript
         * let currentItem = this.dropdown.selectedItem;
         * ```
         */
        get: /**
         * Get currently selected item
         *
         * ```typescript
         * let currentItem = this.dropdown.selectedItem;
         * ```
         * @return {?}
         */
        function () {
            /** @type {?} */
            var selectedItem = this.selection.first_item(this.id);
            if (selectedItem) {
                return selectedItem;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownComponent.prototype, "collapsed", {
        /**
         * Gets if the dropdown is collapsed
         *
         * ```typescript
         * let isCollapsed = this.dropdown.collapsed;
         * ```
         */
        get: /**
         * Gets if the dropdown is collapsed
         *
         * ```typescript
         * let isCollapsed = this.dropdown.collapsed;
         * ```
         * @return {?}
         */
        function () {
            return this.toggleDirective.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownComponent.prototype, "scrollContainer", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this.toggleDirective.element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxDropDownComponent.prototype, "collectionLength", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            if (this.virtDir) {
                return this.virtDir.totalItemCount || this.virtDir.igxForOf.length;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens the dropdown
     *
     * ```typescript
     * this.dropdown.open();
     * ```
     */
    /**
     * Opens the dropdown
     *
     * ```typescript
     * this.dropdown.open();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    IgxDropDownComponent.prototype.open = /**
     * Opens the dropdown
     *
     * ```typescript
     * this.dropdown.open();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    function (overlaySettings) {
        this.toggleDirective.open(overlaySettings);
        this.updateScrollPosition();
    };
    /**
     * Closes the dropdown
     *
     * ```typescript
     * this.dropdown.close();
     * ```
     */
    /**
     * Closes the dropdown
     *
     * ```typescript
     * this.dropdown.close();
     * ```
     * @return {?}
     */
    IgxDropDownComponent.prototype.close = /**
     * Closes the dropdown
     *
     * ```typescript
     * this.dropdown.close();
     * ```
     * @return {?}
     */
    function () {
        this.toggleDirective.close();
    };
    /**
     * Toggles the dropdown
     *
     * ```typescript
     * this.dropdown.toggle();
     * ```
     */
    /**
     * Toggles the dropdown
     *
     * ```typescript
     * this.dropdown.toggle();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    IgxDropDownComponent.prototype.toggle = /**
     * Toggles the dropdown
     *
     * ```typescript
     * this.dropdown.toggle();
     * ```
     * @param {?=} overlaySettings
     * @return {?}
     */
    function (overlaySettings) {
        if (this.collapsed || this.toggleDirective.isClosing) {
            this.open(overlaySettings);
        }
        else {
            this.close();
        }
    };
    /**
     * Select an item by index
     * @param index of the item to select; If the drop down uses *igxFor, pass the index in data
     */
    /**
     * Select an item by index
     * @param {?} index of the item to select; If the drop down uses *igxFor, pass the index in data
     * @return {?}
     */
    IgxDropDownComponent.prototype.setSelectedItem = /**
     * Select an item by index
     * @param {?} index of the item to select; If the drop down uses *igxFor, pass the index in data
     * @return {?}
     */
    function (index) {
        if (index < 0 || index >= this.items.length) {
            return;
        }
        /** @type {?} */
        var newSelection;
        if (this.virtDir) {
            newSelection = (/** @type {?} */ ({
                value: this.virtDir.igxForOf[index],
                index: index
            }));
        }
        else {
            newSelection = this.items[index];
        }
        this.selectItem(newSelection);
    };
    /**
     * Navigates to the item on the specified index
     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.
     * @param newIndex number
     */
    /**
     * Navigates to the item on the specified index
     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.
     * @param {?} index
     * @return {?}
     */
    IgxDropDownComponent.prototype.navigateItem = /**
     * Navigates to the item on the specified index
     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        if (this.virtDir) {
            if (index === -1 || index >= this.collectionLength) {
                return;
            }
            /** @type {?} */
            var direction_1 = index > (this.focusedItem ? this.focusedItem.index : -1) ? Navigate.Down : Navigate.Up;
            /** @type {?} */
            var subRequired = this.isIndexOutOfBounds(index, direction_1);
            this.focusedItem = (/** @type {?} */ ({
                value: this.virtDir.igxForOf[index],
                index: index
            }));
            if (subRequired) {
                this.virtDir.scrollTo(index);
            }
            if (subRequired) {
                this.virtDir.onChunkLoad.pipe(take(1)).subscribe(function () {
                    _this.skipHeader(direction_1);
                });
            }
            else {
                this.skipHeader(direction_1);
            }
        }
        else {
            _super.prototype.navigateItem.call(this, index);
        }
        if (this.allowItemsFocus && this.focusedItem) {
            this.focusedItem.element.nativeElement.focus();
            this.cdr.markForCheck();
        }
    };
    /**
     * @private
     * @param {?} index
     * @param {?} direction
     * @return {?}
     */
    IgxDropDownComponent.prototype.isIndexOutOfBounds = /**
     * @private
     * @param {?} index
     * @param {?} direction
     * @return {?}
     */
    function (index, direction) {
        /** @type {?} */
        var virtState = this.virtDir.state;
        /** @type {?} */
        var currentPosition = this.virtDir.getScroll().scrollTop;
        /** @type {?} */
        var itemPosition = this.virtDir.getScrollForIndex(index, direction === Navigate.Down);
        /** @type {?} */
        var indexOutOfChunk = index < virtState.startIndex || index > virtState.chunkSize + virtState.startIndex;
        /** @type {?} */
        var scrollNeeded = direction === Navigate.Down ? currentPosition < itemPosition : currentPosition > itemPosition;
        /** @type {?} */
        var subRequired = indexOutOfChunk || scrollNeeded;
        return subRequired;
    };
    /**
     * @protected
     * @param {?} direction
     * @return {?}
     */
    IgxDropDownComponent.prototype.skipHeader = /**
     * @protected
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        if (!this.focusedItem) {
            return;
        }
        if (this.focusedItem.isHeader || this.focusedItem.disabled) {
            if (direction === Navigate.Up) {
                this.navigatePrev();
            }
            else {
                this.navigateNext();
            }
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.updateScrollPosition = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        if (!this.virtDir) {
            return;
        }
        if (!this.selectedItem) {
            this.virtDir.scrollTo(0);
            return;
        }
        /** @type {?} */
        var targetScroll = this.virtDir.getScrollForIndex(this.selectedItem.index);
        /** @type {?} */
        var itemsInView = this.virtDir.igxForContainerSize / this.virtDir.igxForItemSize;
        targetScroll -= (itemsInView / 2 - 1) * this.virtDir.igxForItemSize;
        this.virtDir.getScroll().scrollTop = targetScroll;
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} e
     * @return {?}
     */
    IgxDropDownComponent.prototype.onToggleOpening = /**
     * @hidden \@internal
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onOpening.emit(e);
        if (e.cancel) {
            return;
        }
        if (!this.virtDir && this.selectedItem) {
            this.scrollToItem(this.selectedItem);
        }
        if (this.virtDir) {
            this.virtDir.scrollPosition = this._scrollPosition;
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.onToggleOpened = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        if (this.selectedItem) {
            this.focusedItem = this.selectedItem;
            this._focusedItem.focused = true;
        }
        else if (this.allowItemsFocus) {
            this.navigateFirst();
        }
        this.onOpened.emit();
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @param {?} e
     * @return {?}
     */
    IgxDropDownComponent.prototype.onToggleClosing = /**
     * @hidden \@internal
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.onClosing.emit(e);
        if (this.virtDir) {
            this._scrollPosition = this.virtDir.scrollPosition;
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.onToggleClosed = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        if (this._focusedItem) {
            this._focusedItem.focused = false;
        }
        this.onClosed.emit();
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.ngOnDestroy = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.destroy$.next(true);
        this.destroy$.complete();
        this.selection.clear(this.id);
        this.selection.clear(this.id + "-active");
    };
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    IgxDropDownComponent.prototype.scrollToItem = /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        /** @type {?} */
        var itemPosition = this.calculateScrollPosition(item);
        //  in IE11 setting sctrollTop is somehow slow and forces dropdown
        //  to appear on screen before animation start. As a result dropdown
        //  flickers badly. This is why we set scrollTop just a little later
        //  allowing animation to start and prevent dropdown flickering
        if (isIE()) {
            setTimeout(function () {
                _this.scrollContainer.scrollTop = (itemPosition);
            }, 1);
        }
        else {
            this.scrollContainer.scrollTop = (itemPosition);
        }
    };
    /** @hidden @internal */
    /**
     * @hidden \@internal
     * @param {?} item
     * @return {?}
     */
    IgxDropDownComponent.prototype.calculateScrollPosition = /**
     * @hidden \@internal
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (!item) {
            return 0;
        }
        /** @type {?} */
        var elementRect = item.element.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var parentRect = this.scrollContainer.getBoundingClientRect();
        /** @type {?} */
        var scrollDelta = parentRect.top - elementRect.top;
        /** @type {?} */
        var scrollPosition = this.scrollContainer.scrollTop - scrollDelta;
        /** @type {?} */
        var dropDownHeight = this.scrollContainer.clientHeight;
        scrollPosition -= dropDownHeight / 2;
        scrollPosition += item.elementHeight / 2;
        return Math.floor(scrollPosition);
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.ngOnInit = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        this.toggleDirective.id = this.id;
    };
    /**
     * @return {?}
     */
    IgxDropDownComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.virtDir) {
            this.virtDir.igxForItemSize = 28;
        }
    };
    /** Keydown Handler */
    /**
     * Keydown Handler
     * @param {?} key
     * @param {?=} event
     * @return {?}
     */
    IgxDropDownComponent.prototype.onItemActionKey = /**
     * Keydown Handler
     * @param {?} key
     * @param {?=} event
     * @return {?}
     */
    function (key, event) {
        _super.prototype.onItemActionKey.call(this, key, event);
        this.close();
    };
    /**
     * Virtual scroll implementation
     * @hidden @internal
     */
    /**
     * Virtual scroll implementation
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.navigateFirst = /**
     * Virtual scroll implementation
     * @hidden \@internal
     * @return {?}
     */
    function () {
        if (this.virtDir) {
            this.navigateItem(0);
        }
        else {
            _super.prototype.navigateFirst.call(this);
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.navigateLast = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        if (this.virtDir) {
            this.navigateItem(this.virtDir.totalItemCount ? this.virtDir.totalItemCount - 1 : this.virtDir.igxForOf.length - 1);
        }
        else {
            _super.prototype.navigateLast.call(this);
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.navigateNext = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        if (this.virtDir) {
            this.navigateItem(this._focusedItem ? this._focusedItem.index + 1 : 0);
        }
        else {
            _super.prototype.navigateNext.call(this);
        }
    };
    /**
     * @hidden @internal
     */
    /**
     * @hidden \@internal
     * @return {?}
     */
    IgxDropDownComponent.prototype.navigatePrev = /**
     * @hidden \@internal
     * @return {?}
     */
    function () {
        if (this.virtDir) {
            this.navigateItem(this._focusedItem ? this._focusedItem.index - 1 : 0);
        }
        else {
            _super.prototype.navigatePrev.call(this);
        }
    };
    /**
     * Handles the `onSelection` emit and the drop down toggle when selection changes
     * @hidden
     * @internal
     * @param newSelection
     * @param event
     */
    /**
     * Handles the `onSelection` emit and the drop down toggle when selection changes
     * @hidden
     * \@internal
     * @param {?=} newSelection
     * @param {?=} event
     * @return {?}
     */
    IgxDropDownComponent.prototype.selectItem = /**
     * Handles the `onSelection` emit and the drop down toggle when selection changes
     * @hidden
     * \@internal
     * @param {?=} newSelection
     * @param {?=} event
     * @return {?}
     */
    function (newSelection, event) {
        /** @type {?} */
        var oldSelection = this.selectedItem;
        if (!newSelection) {
            newSelection = this.focusedItem;
        }
        if (newSelection === null) {
            return;
        }
        if (newSelection instanceof IgxDropDownItemBase && newSelection.isHeader) {
            return;
        }
        if (this.virtDir) {
            newSelection = (/** @type {?} */ ({
                value: newSelection.value,
                index: newSelection.index
            }));
        }
        /** @type {?} */
        var args = { oldSelection: oldSelection, newSelection: newSelection, cancel: false };
        this.onSelection.emit(args);
        if (!args.cancel) {
            if (this.isSelectionValid(args.newSelection)) {
                this.selection.set(this.id, new Set([args.newSelection]));
                if (!this.virtDir) {
                    if (oldSelection) {
                        oldSelection.selected = false;
                    }
                    if (args.newSelection) {
                        args.newSelection.selected = true;
                    }
                }
                if (event) {
                    this.toggleDirective.close();
                }
            }
            else {
                throw new Error('Please provide a valid drop-down item for the selection!');
            }
        }
    };
    /**
     * Checks whether the selection is valid
     * `null` - the selection should be emptied
     * Virtual? - the selection should at least have and `index` and `value` property
     * Non-virtual? - the selection should be a valid drop-down item and **not** be a header
     */
    /**
     * Checks whether the selection is valid
     * `null` - the selection should be emptied
     * Virtual? - the selection should at least have and `index` and `value` property
     * Non-virtual? - the selection should be a valid drop-down item and **not** be a header
     * @protected
     * @param {?} selection
     * @return {?}
     */
    IgxDropDownComponent.prototype.isSelectionValid = /**
     * Checks whether the selection is valid
     * `null` - the selection should be emptied
     * Virtual? - the selection should at least have and `index` and `value` property
     * Non-virtual? - the selection should be a valid drop-down item and **not** be a header
     * @protected
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        return selection === null
            || (this.virtDir && selection.hasOwnProperty('value') && selection.hasOwnProperty('index'))
            || (selection instanceof IgxDropDownItemComponent && !selection.isHeader);
    };
    IgxDropDownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-drop-down',
                    template: "<div class=\"igx-drop-down__list\" igxToggle [style.width]=\"width\" [style.height]=\"height\"\n[style.maxHeight]=\"maxHeight\" [attr.id]=\"this.listId\" role=\"listbox\"\n    (onOpening)=\"onToggleOpening($event)\" (onOpened)=\"onToggleOpened()\"\n    (onClosing)=\"onToggleClosing($event)\" (onClosed)=\"onToggleClosed()\">\n    <ng-container *ngIf=\"!collapsed\">\n        <ng-content></ng-content>\n    </ng-container>\n</div>\n",
                    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]
                }] }
    ];
    /** @nocollapse */
    IgxDropDownComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IgxSelectionAPIService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    IgxDropDownComponent.propDecorators = {
        virtDir: [{ type: ContentChild, args: [IgxForOfDirective, { read: IgxForOfDirective, static: false },] }],
        toggleDirective: [{ type: ViewChild, args: [IgxToggleDirective, { static: true },] }],
        children: [{ type: ContentChildren, args: [forwardRef(function () { return IgxDropDownItemComponent; }), { descendants: true },] }],
        onOpening: [{ type: Output }],
        onOpened: [{ type: Output }],
        onClosing: [{ type: Output }],
        onClosed: [{ type: Output }],
        allowItemsFocus: [{ type: Input }],
        id: [{ type: Input }]
    };
    return IgxDropDownComponent;
}(IgxDropDownBase));
export { IgxDropDownComponent };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype.destroy$;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype._scrollPosition;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype.virtDir;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype.toggleDirective;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxDropDownComponent.prototype.children;
    /**
     * Emitted before the dropdown is opened
     *
     * ```html
     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownComponent.prototype.onOpening;
    /**
     * Emitted after the dropdown is opened
     *
     * ```html
     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownComponent.prototype.onOpened;
    /**
     * Emitted before the dropdown is closed
     *
     * ```html
     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownComponent.prototype.onClosing;
    /**
     * Emitted after the dropdown is closed
     *
     * ```html
     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownComponent.prototype.onClosed;
    /**
     * Gets/sets whether items take focus. Disabled by default.
     * When enabled, drop down items gain tab index and are focused when active -
     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.
     *
     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive
     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.
     *
     * ```typescript
     * // get
     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;
     * ```
     *
     * ```html
     * <!--set-->
     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>
     * ```
     * @type {?}
     */
    IgxDropDownComponent.prototype.allowItemsFocus;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype.selection;
    /**
     * @type {?}
     * @protected
     */
    IgxDropDownComponent.prototype._displayDensityOptions;
}
//# sourceMappingURL=data:application/json;base64,