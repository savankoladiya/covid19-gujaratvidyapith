/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SimpleChange } from '@angular/core';
/**
 * @hidden
 * @return {?}
 */
export function WatchChanges() {
    return function (target, key, propDesc) {
        /** @type {?} */
        var privateKey = '_' + key.toString();
        propDesc = propDesc || {
            configurable: true,
            enumerable: true,
        };
        propDesc.get = propDesc.get || (function () { return this[privateKey]; });
        /** @type {?} */
        var originalSetter = propDesc.set || (function (val) { this[privateKey] = val; });
        propDesc.set = function (val) {
            var _a;
            /** @type {?} */
            var init = this._init;
            /** @type {?} */
            var oldValue = this[key];
            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {
                originalSetter.call(this, val);
                if (this.ngOnChanges && !init) {
                    // in case wacthed prop changes trigger ngOnChanges manually
                    /** @type {?} */
                    var changes = (_a = {},
                        _a[key] = new SimpleChange(oldValue, val, false),
                        _a);
                    this.ngOnChanges(changes);
                }
            }
        };
        return propDesc;
    };
}
/**
 * @return {?}
 */
export function WatchColumnChanges() {
    return function (target, key, propDesc) {
        /** @type {?} */
        var privateKey = '_' + key.toString();
        propDesc = propDesc || {
            configurable: true,
            enumerable: true,
        };
        propDesc.get = propDesc.get || (function () { return this[privateKey]; });
        /** @type {?} */
        var originalSetter = propDesc.set || (function (val) { this[privateKey] = val; });
        propDesc.set = function (val) {
            /** @type {?} */
            var init = this._init;
            /** @type {?} */
            var oldValue = this[key];
            originalSetter.call(this, val);
            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {
                if (this.rowIslandAPI.rowIsland) {
                    this.rowIslandAPI.rowIsland.updateColumnList();
                }
            }
        };
        return propDesc;
    };
}
/**
 * @param {?=} repaint
 * @return {?}
 */
export function notifyChanges(repaint) {
    if (repaint === void 0) { repaint = false; }
    return function (_, key, propDesc) {
        /** @type {?} */
        var privateKey = "__" + key;
        propDesc = propDesc || {
            enumerable: true,
            configurable: true
        };
        /** @type {?} */
        var originalSetter = propDesc ? propDesc.set : null;
        propDesc.get = propDesc.get || (function () { return this[privateKey]; });
        propDesc.set = function (newValue) {
            if (originalSetter) {
                originalSetter.call(this, newValue);
                if (this.grid) {
                    this.grid.notifyChanges(repaint);
                }
            }
            else {
                if (newValue === this[key]) {
                    return;
                }
                this[privateKey] = newValue;
                if (this.grid) {
                    this.grid.notifyChanges(repaint);
                }
            }
        };
        return (/** @type {?} */ (propDesc));
    };
}
//# sourceMappingURL=data:application/json;base64,