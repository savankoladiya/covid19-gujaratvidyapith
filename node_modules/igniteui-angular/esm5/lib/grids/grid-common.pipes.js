/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { GridBaseAPIService } from './api.service';
import { DataUtil } from '../data-operations/data-util';
import { cloneArray } from '../core/utils';
/**
 * @hidden
 * \@internal
 */
var IgxGridCellStyleClassesPipe = /** @class */ (function () {
    function IgxGridCellStyleClassesPipe() {
    }
    /**
     * @param {?} cssClasses
     * @param {?} value
     * @param {?} data
     * @param {?} field
     * @param {?} index
     * @return {?}
     */
    IgxGridCellStyleClassesPipe.prototype.transform = /**
     * @param {?} cssClasses
     * @param {?} value
     * @param {?} data
     * @param {?} field
     * @param {?} index
     * @return {?}
     */
    function (cssClasses, value, data, field, index) {
        var e_1, _a;
        if (!cssClasses) {
            return '';
        }
        /** @type {?} */
        var result = [];
        try {
            for (var _b = tslib_1.__values(Object.keys(cssClasses)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var cssClass = _c.value;
                /** @type {?} */
                var callbackOrValue = cssClasses[cssClass];
                /** @type {?} */
                var apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field, value, index) : callbackOrValue;
                if (apply) {
                    result.push(cssClass);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result.join(' ');
    };
    IgxGridCellStyleClassesPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'igxCellStyleClasses'
                },] }
    ];
    return IgxGridCellStyleClassesPipe;
}());
export { IgxGridCellStyleClassesPipe };
/**
 * @hidden
 * \@internal
 */
var IgxGridCellStylesPipe = /** @class */ (function () {
    function IgxGridCellStylesPipe() {
    }
    /**
     * @param {?} styles
     * @param {?} value
     * @param {?} data
     * @param {?} field
     * @param {?} index
     * @return {?}
     */
    IgxGridCellStylesPipe.prototype.transform = /**
     * @param {?} styles
     * @param {?} value
     * @param {?} data
     * @param {?} field
     * @param {?} index
     * @return {?}
     */
    function (styles, value, data, field, index) {
        var e_2, _a;
        /** @type {?} */
        var css = {};
        if (!styles) {
            return css;
        }
        try {
            for (var _b = tslib_1.__values(Object.keys(styles)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var prop = _c.value;
                /** @type {?} */
                var res = styles[prop];
                css[prop] = typeof res === 'function' ? res(data, field, value, index) : res;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return css;
    };
    IgxGridCellStylesPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'igxCellStyles'
                },] }
    ];
    return IgxGridCellStylesPipe;
}());
export { IgxGridCellStylesPipe };
/**
 * @hidden
 * \@internal
 */
var IgxGridNotGroupedPipe = /** @class */ (function () {
    function IgxGridNotGroupedPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IgxGridNotGroupedPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.filter(function (item) { return !item.columnGroup; });
    };
    IgxGridNotGroupedPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'igxNotGrouped'
                },] }
    ];
    return IgxGridNotGroupedPipe;
}());
export { IgxGridNotGroupedPipe };
var IgxGridTopLevelColumns = /** @class */ (function () {
    function IgxGridTopLevelColumns() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IgxGridTopLevelColumns.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.filter(function (item) { return item.level === 0; });
    };
    IgxGridTopLevelColumns.decorators = [
        { type: Pipe, args: [{
                    name: 'igxTopLevel'
                },] }
    ];
    return IgxGridTopLevelColumns;
}());
export { IgxGridTopLevelColumns };
/**
 * @hidden
 */
var IgxGridFilterConditionPipe = /** @class */ (function () {
    function IgxGridFilterConditionPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    IgxGridFilterConditionPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.split(/(?=[A-Z])/).join(' ');
    };
    IgxGridFilterConditionPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'filterCondition',
                    pure: true
                },] }
    ];
    return IgxGridFilterConditionPipe;
}());
export { IgxGridFilterConditionPipe };
/**
 * @hidden
 */
var IgxGridTransactionPipe = /** @class */ (function () {
    function IgxGridTransactionPipe(gridAPI) {
        this.gridAPI = gridAPI;
    }
    /**
     * @param {?} collection
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    IgxGridTransactionPipe.prototype.transform = /**
     * @param {?} collection
     * @param {?} id
     * @param {?} pipeTrigger
     * @return {?}
     */
    function (collection, id, pipeTrigger) {
        /** @type {?} */
        var grid = this.gridAPI.grid;
        if (grid.transactions.enabled) {
            /** @type {?} */
            var result = DataUtil.mergeTransactions(cloneArray(collection), grid.transactions.getAggregatedChanges(true), grid.primaryKey);
            return result;
        }
        return collection;
    };
    IgxGridTransactionPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gridTransaction',
                    pure: true
                },] }
    ];
    /** @nocollapse */
    IgxGridTransactionPipe.ctorParameters = function () { return [
        { type: GridBaseAPIService }
    ]; };
    return IgxGridTransactionPipe;
}());
export { IgxGridTransactionPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridTransactionPipe.prototype.gridAPI;
}
/**
 * @hidden
 */
var IgxGridPaginatorOptionsPipe = /** @class */ (function () {
    function IgxGridPaginatorOptionsPipe() {
    }
    /**
     * @param {?} values
     * @return {?}
     */
    IgxGridPaginatorOptionsPipe.prototype.transform = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        return Array.from(new Set(tslib_1.__spread(values))).sort(function (a, b) { return a - b; });
    };
    IgxGridPaginatorOptionsPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'paginatorOptions',
                    pure: true,
                },] }
    ];
    return IgxGridPaginatorOptionsPipe;
}());
export { IgxGridPaginatorOptionsPipe };
var IgxHasVisibleColumnsPipe = /** @class */ (function () {
    function IgxHasVisibleColumnsPipe() {
    }
    /**
     * @param {?} values
     * @param {?} hasVisibleColumns
     * @return {?}
     */
    IgxHasVisibleColumnsPipe.prototype.transform = /**
     * @param {?} values
     * @param {?} hasVisibleColumns
     * @return {?}
     */
    function (values, hasVisibleColumns) {
        if (!(values && values.length)) {
            return values;
        }
        return hasVisibleColumns ? values : [];
    };
    IgxHasVisibleColumnsPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'visibleColumns',
                    pure: true
                },] }
    ];
    return IgxHasVisibleColumnsPipe;
}());
export { IgxHasVisibleColumnsPipe };
//# sourceMappingURL=data:application/json;base64,