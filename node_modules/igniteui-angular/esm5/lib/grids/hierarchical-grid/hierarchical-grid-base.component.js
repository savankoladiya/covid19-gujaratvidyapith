/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ElementRef, NgZone, ChangeDetectorRef, IterableDiffers, ViewContainerRef, Inject, ComponentFactoryResolver, Optional, Input, ViewChild, TemplateRef } from '@angular/core';
import { IgxGridBaseComponent, IgxGridTransaction } from '../grid-base.component';
import { GridBaseAPIService } from '../api.service';
import { IgxFilteringService } from '../filtering/grid-filtering.service';
import { DisplayDensityToken } from '../../core/displayDensity';
import { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';
import { IgxSummaryOperand } from '../summaries/grid-summary';
import { IgxHierarchicalTransactionService, IgxOverlayService } from '../../services/index';
import { DOCUMENT } from '@angular/common';
import { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';
import { IgxGridSummaryService } from '../summaries/grid-summary.service';
import { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';
import { IgxColumnResizingService } from '../grid-column-resizing.service';
/** @type {?} */
export var IgxHierarchicalTransactionServiceFactory = {
    provide: IgxGridTransaction,
    useFactory: hierarchicalTransactionServiceFactory
};
/**
 * @return {?}
 */
export function hierarchicalTransactionServiceFactory() {
    return function () { return new IgxHierarchicalTransactionService(); };
}
/**
 * @record
 */
export function IPathSegment() { }
if (false) {
    /** @type {?} */
    IPathSegment.prototype.rowID;
    /** @type {?} */
    IPathSegment.prototype.rowIslandKey;
}
/**
 * @abstract
 */
var IgxHierarchicalGridBaseComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxHierarchicalGridBaseComponent, _super);
    function IgxHierarchicalGridBaseComponent(selectionService, crudService, colResizingService, gridAPI, transactionFactory, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation, filteringService, overlayService, summaryService, _displayDensityOptions) {
        var _this = _super.call(this, selectionService, crudService, colResizingService, gridAPI, typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation, filteringService, overlayService, summaryService, _displayDensityOptions) || this;
        _this.selectionService = selectionService;
        _this.colResizingService = colResizingService;
        _this.transactionFactory = transactionFactory;
        _this.document = document;
        _this.overlayService = overlayService;
        _this.summaryService = summaryService;
        _this._displayDensityOptions = _displayDensityOptions;
        _this.showExpandAll = false;
        _this._expandChildren = false;
        _this.hgridAPI = (/** @type {?} */ (gridAPI));
        return _this;
    }
    Object.defineProperty(IgxHierarchicalGridBaseComponent.prototype, "maxLevelHeaderDepth", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            if (this._maxLevelHeaderDepth === null) {
                this._maxLevelHeaderDepth = this.columnList.reduce(function (acc, col) { return Math.max(acc, col.level); }, 0);
            }
            return this._maxLevelHeaderDepth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxHierarchicalGridBaseComponent.prototype, "outlet", {
        /**
        * @hidden
        */
        get: /**
         * @hidden
         * @protected
         * @return {?}
         */
        function () {
            return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} cols
     * @return {?}
     */
    IgxHierarchicalGridBaseComponent.prototype.createColumnsList = /**
     * @hidden
     * @param {?} cols
     * @return {?}
     */
    function (cols) {
        var _this = this;
        /** @type {?} */
        var columns = [];
        /** @type {?} */
        var topLevelCols = this.onlyTopLevel(cols);
        topLevelCols.forEach(function (col) {
            /** @type {?} */
            var ref = _this._createColumn(col);
            ref.changeDetectorRef.detectChanges();
            columns.push(ref.instance);
        });
        /** @type {?} */
        var result = flatten(columns);
        this.columnList.reset(result);
        this.columnList.notifyOnChanges();
        this.initPinning();
    };
    /**
     * @protected
     * @param {?} col
     * @return {?}
     */
    IgxHierarchicalGridBaseComponent.prototype._createColumn = /**
     * @protected
     * @param {?} col
     * @return {?}
     */
    function (col) {
        /** @type {?} */
        var ref;
        if (col instanceof IgxColumnGroupComponent) {
            ref = this._createColGroupComponent(col);
        }
        else {
            ref = this._createColComponent(col);
        }
        return ref;
    };
    /**
     * @protected
     * @param {?} col
     * @return {?}
     */
    IgxHierarchicalGridBaseComponent.prototype._createColGroupComponent = /**
     * @protected
     * @param {?} col
     * @return {?}
     */
    function (col) {
        var _this = this;
        /** @type {?} */
        var factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);
        /** @type {?} */
        var ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);
        ref.changeDetectorRef.detectChanges();
        factoryGroup.inputs.forEach(function (input) {
            /** @type {?} */
            var propName = input.propName;
            ((/** @type {?} */ (ref.instance)))[propName] = ((/** @type {?} */ (col)))[propName];
        });
        if (col.children.length > 0) {
            /** @type {?} */
            var newChildren_1 = [];
            col.children.forEach(function (child) {
                /** @type {?} */
                var newCol = _this._createColumn(child).instance;
                newCol.parent = ref.instance;
                newChildren_1.push(newCol);
            });
            ((/** @type {?} */ (ref.instance))).children.reset(newChildren_1);
            ((/** @type {?} */ (ref.instance))).children.notifyOnChanges();
        }
        // (<IgxColumnGroupComponent>ref.instance).grid = this;
        return ref;
    };
    /**
     * @protected
     * @param {?} col
     * @return {?}
     */
    IgxHierarchicalGridBaseComponent.prototype._createColComponent = /**
     * @protected
     * @param {?} col
     * @return {?}
     */
    function (col) {
        /** @type {?} */
        var factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);
        /** @type {?} */
        var ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);
        factoryColumn.inputs.forEach(function (input) {
            /** @type {?} */
            var propName = input.propName;
            if (!(((/** @type {?} */ (col)))[propName] instanceof IgxSummaryOperand)) {
                ((/** @type {?} */ (ref.instance)))[propName] = ((/** @type {?} */ (col)))[propName];
            }
            else {
                ((/** @type {?} */ (ref.instance)))[propName] = col[propName].constructor;
            }
        });
        // (<IgxColumnComponent>ref.instance).grid = this;
        return ref;
    };
    /**
     * @protected
     * @param {?} rowIslandID
     * @return {?}
     */
    IgxHierarchicalGridBaseComponent.prototype.getGridsForIsland = /**
     * @protected
     * @param {?} rowIslandID
     * @return {?}
     */
    function (rowIslandID) {
        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);
    };
    /**
     * @protected
     * @param {?} path
     * @return {?}
     */
    IgxHierarchicalGridBaseComponent.prototype.getChildGrid = /**
     * @protected
     * @param {?} path
     * @return {?}
     */
    function (path) {
        if (!path) {
            return;
        }
        return this.hgridAPI.getChildGrid(path);
    };
    /** @nocollapse */
    IgxHierarchicalGridBaseComponent.ctorParameters = function () { return [
        { type: IgxGridSelectionService },
        { type: IgxGridCRUDService },
        { type: IgxColumnResizingService },
        { type: GridBaseAPIService },
        { type: undefined, decorators: [{ type: Inject, args: [IgxGridTransaction,] }] },
        { type: ElementRef },
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: IterableDiffers },
        { type: ViewContainerRef },
        { type: IgxHierarchicalGridNavigationService },
        { type: IgxFilteringService },
        { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
        { type: IgxGridSummaryService },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    IgxHierarchicalGridBaseComponent.propDecorators = {
        expandChildren: [{ type: Input }],
        hasChildrenKey: [{ type: Input }],
        showExpandAll: [{ type: Input }],
        dragIndicatorIconBase: [{ type: ViewChild, args: ['dragIndicatorIconBase', { read: TemplateRef, static: true },] }]
    };
    return IgxHierarchicalGridBaseComponent;
}(IgxGridBaseComponent));
export { IgxHierarchicalGridBaseComponent };
if (false) {
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.rootGrid;
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.expandChildren;
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.hasChildrenKey;
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.showExpandAll;
    /**
     * @hidden
     * @type {?}
     */
    IgxHierarchicalGridBaseComponent.prototype.hgridAPI;
    /**
     * @hidden
     * @type {?}
     */
    IgxHierarchicalGridBaseComponent.prototype.parentIsland;
    /**
     * @hidden
     * @type {?}
     */
    IgxHierarchicalGridBaseComponent.prototype.childRow;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridBaseComponent.prototype._expandChildren;
    /**
     * @hidden
     * \@internal
     * @type {?}
     */
    IgxHierarchicalGridBaseComponent.prototype.dragIndicatorIconBase;
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.selectionService;
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.colResizingService;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridBaseComponent.prototype.transactionFactory;
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.document;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridBaseComponent.prototype.overlayService;
    /** @type {?} */
    IgxHierarchicalGridBaseComponent.prototype.summaryService;
    /**
     * @type {?}
     * @protected
     */
    IgxHierarchicalGridBaseComponent.prototype._displayDensityOptions;
}
/**
 * @param {?} arr
 * @return {?}
 */
function flatten(arr) {
    /** @type {?} */
    var result = [];
    arr.forEach(function (el) {
        result.push(el);
        if (el.children) {
            result = result.concat(flatten(el.children.toArray()));
        }
    });
    return result;
}
//# sourceMappingURL=data:application/json;base64,