/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { GridBaseAPIService } from '../api.service';
import { DataUtil } from '../../data-operations/data-util';
import { cloneArray } from '../../core/utils';
var IgxGridAPIService = /** @class */ (function (_super) {
    tslib_1.__extends(IgxGridAPIService, _super);
    function IgxGridAPIService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} expression
     * @return {?}
     */
    IgxGridAPIService.prototype.groupBy = /**
     * @param {?} expression
     * @return {?}
     */
    function (expression) {
        /** @type {?} */
        var groupingState = cloneArray(this.grid.groupingExpressions);
        /** @type {?} */
        var sortingState = cloneArray(this.grid.sortingExpressions);
        this.prepare_sorting_expression([sortingState, groupingState], expression);
        this.grid.groupingExpressions = groupingState;
        this.arrange_sorting_expressions();
    };
    /**
     * @param {?} expressions
     * @return {?}
     */
    IgxGridAPIService.prototype.groupBy_multiple = /**
     * @param {?} expressions
     * @return {?}
     */
    function (expressions) {
        var e_1, _a;
        /** @type {?} */
        var groupingState = cloneArray(this.grid.groupingExpressions);
        /** @type {?} */
        var sortingState = cloneArray(this.grid.sortingExpressions);
        try {
            for (var expressions_1 = tslib_1.__values(expressions), expressions_1_1 = expressions_1.next(); !expressions_1_1.done; expressions_1_1 = expressions_1.next()) {
                var each = expressions_1_1.value;
                this.prepare_sorting_expression([sortingState, groupingState], each);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (expressions_1_1 && !expressions_1_1.done && (_a = expressions_1.return)) _a.call(expressions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.grid.groupingExpressions = groupingState;
        this.arrange_sorting_expressions();
    };
    /**
     * @param {?=} name
     * @return {?}
     */
    IgxGridAPIService.prototype.clear_groupby = /**
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        var _this = this;
        var e_2, _a;
        /** @type {?} */
        var groupingState = cloneArray(this.grid.groupingExpressions);
        /** @type {?} */
        var sortingState = cloneArray(this.grid.sortingExpressions);
        if (name) {
            /** @type {?} */
            var names_1 = typeof name === 'string' ? [name] : name;
            /** @type {?} */
            var groupedCols = groupingState.filter(function (state) { return names_1.indexOf(state.fieldName) < 0; });
            /** @type {?} */
            var newSortingExpr = sortingState.filter(function (state) { return names_1.indexOf(state.fieldName) < 0; });
            this.grid.groupingExpressions = groupedCols;
            this.grid.sortingExpressions = newSortingExpr;
            names_1.forEach(function (colName) {
                /** @type {?} */
                var grExprIndex = groupingState.findIndex(function (exp) { return exp.fieldName === colName; });
                /** @type {?} */
                var grpExpandState = _this.grid.groupingExpansionState;
                /* remove expansion states related to the cleared group
                and all with deeper hierarchy than the cleared group */
                _this.grid.groupingExpansionState = grpExpandState
                    .filter(function (val) {
                    return val.hierarchy && val.hierarchy.length <= grExprIndex;
                });
            });
        }
        else {
            // clear all
            this.grid.groupingExpressions = [];
            this.grid.groupingExpansionState = [];
            var _loop_1 = function (grExpr) {
                /** @type {?} */
                var sortExprIndex = sortingState.findIndex(function (exp) { return exp.fieldName === grExpr.fieldName; });
                if (sortExprIndex > -1) {
                    sortingState.splice(sortExprIndex, 1);
                }
            };
            try {
                for (var groupingState_1 = tslib_1.__values(groupingState), groupingState_1_1 = groupingState_1.next(); !groupingState_1_1.done; groupingState_1_1 = groupingState_1.next()) {
                    var grExpr = groupingState_1_1.value;
                    _loop_1(grExpr);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (groupingState_1_1 && !groupingState_1_1.done && (_a = groupingState_1.return)) _a.call(groupingState_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.grid.sortingExpressions = sortingState;
        }
    };
    /**
     * @param {?} groupRow
     * @return {?}
     */
    IgxGridAPIService.prototype.groupBy_get_expanded_for_group = /**
     * @param {?} groupRow
     * @return {?}
     */
    function (groupRow) {
        /** @type {?} */
        var grState = this.grid.groupingExpansionState;
        /** @type {?} */
        var hierarchy = DataUtil.getHierarchy(groupRow);
        return grState.find(function (state) {
            return DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy);
        });
    };
    /**
     * @param {?} groupRow
     * @param {?} rowID
     * @return {?}
     */
    IgxGridAPIService.prototype.groupBy_is_row_in_group = /**
     * @param {?} groupRow
     * @param {?} rowID
     * @return {?}
     */
    function (groupRow, rowID) {
        /** @type {?} */
        var grid = this.grid;
        /** @type {?} */
        var rowInGroup = false;
        groupRow.records.forEach(function (row) {
            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {
                rowInGroup = true;
            }
        });
        return rowInGroup;
    };
    /**
     * @param {?} groupRow
     * @return {?}
     */
    IgxGridAPIService.prototype.groupBy_toggle_group = /**
     * @param {?} groupRow
     * @return {?}
     */
    function (groupRow) {
        /** @type {?} */
        var grid = this.grid;
        if (grid.crudService.isInEditMode) {
            grid.endEdit(true);
        }
        /** @type {?} */
        var expansionState = grid.groupingExpansionState;
        /** @type {?} */
        var state = this.groupBy_get_expanded_for_group(groupRow);
        if (state) {
            state.expanded = !state.expanded;
        }
        else {
            expansionState.push({
                expanded: !grid.groupsExpanded,
                hierarchy: DataUtil.getHierarchy(groupRow)
            });
        }
        this.grid.groupingExpansionState = tslib_1.__spread(expansionState);
        if (grid.rowEditable) {
            grid.repositionRowEditingOverlay(grid.rowInEditMode);
        }
    };
    /**
     * @param {?} groupRow
     * @return {?}
     */
    IgxGridAPIService.prototype.groupBy_fully_expand_group = /**
     * @param {?} groupRow
     * @return {?}
     */
    function (groupRow) {
        /** @type {?} */
        var state = this.groupBy_get_expanded_for_group(groupRow);
        /** @type {?} */
        var expanded = state ? state.expanded : this.grid.groupsExpanded;
        if (!expanded) {
            this.groupBy_toggle_group(groupRow);
        }
        if (groupRow.groupParent) {
            this.groupBy_fully_expand_group(groupRow.groupParent);
        }
    };
    /**
     * @protected
     * @param {?} fieldName
     * @return {?}
     */
    IgxGridAPIService.prototype.remove_grouping_expression = /**
     * @protected
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        /** @type {?} */
        var groupingExpressions = this.grid.groupingExpressions;
        /** @type {?} */
        var index = groupingExpressions.findIndex(function (expr) { return expr.fieldName === fieldName; });
        if (index !== -1) {
            groupingExpressions.splice(index, 1);
        }
    };
    /**
     * @return {?}
     */
    IgxGridAPIService.prototype.arrange_sorting_expressions = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var groupingState = this.grid.groupingExpressions;
        this.grid.sortingExpressions.sort(function (a, b) {
            /** @type {?} */
            var groupExprA = groupingState.find(function (expr) { return expr.fieldName === a.fieldName; });
            /** @type {?} */
            var groupExprB = groupingState.find(function (expr) { return expr.fieldName === b.fieldName; });
            if (groupExprA && groupExprB) {
                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;
            }
            else if (groupExprA) {
                return -1;
            }
            else if (groupExprB) {
                return 1;
            }
            else {
                return 0;
            }
        });
    };
    /**
     * @param {?} gRow
     * @return {?}
     */
    IgxGridAPIService.prototype.get_groupBy_record_id = /**
     * @param {?} gRow
     * @return {?}
     */
    function (gRow) {
        /** @type {?} */
        var recordId = '{ ';
        /** @type {?} */
        var hierrarchy = DataUtil.getHierarchy(gRow);
        for (var i = 0; i < hierrarchy.length; i++) {
            /** @type {?} */
            var groupByKey = hierrarchy[i];
            recordId += "'" + groupByKey.fieldName + "': '" + groupByKey.value + "'";
            if (i < hierrarchy.length - 1) {
                recordId += ', ';
            }
        }
        recordId += ' }';
        return recordId;
    };
    return IgxGridAPIService;
}(GridBaseAPIService));
export { IgxGridAPIService };
//# sourceMappingURL=data:application/json;base64,