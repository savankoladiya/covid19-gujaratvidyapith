/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';
import { IgxDropDirective } from '../../directives/drag-drop/drag-drop.directive';
import { IgxColumnMovingDragDirective } from '../grid.common';
import { SortingDirection } from '../../data-operations/sorting-expression.interface';
/**
 * @hidden
 */
var IgxGroupByRowTemplateDirective = /** @class */ (function () {
    function IgxGroupByRowTemplateDirective(template) {
        this.template = template;
    }
    IgxGroupByRowTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxGroupByRow]'
                },] }
    ];
    /** @nocollapse */
    IgxGroupByRowTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxGroupByRowTemplateDirective;
}());
export { IgxGroupByRowTemplateDirective };
if (false) {
    /** @type {?} */
    IgxGroupByRowTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
var IgxRowExpandedIndicatorDirective = /** @class */ (function () {
    function IgxRowExpandedIndicatorDirective() {
    }
    IgxRowExpandedIndicatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowExpandedIndicator]'
                },] }
    ];
    return IgxRowExpandedIndicatorDirective;
}());
export { IgxRowExpandedIndicatorDirective };
/**
 * @hidden
 */
var IgxRowCollapsedIndicatorDirective = /** @class */ (function () {
    function IgxRowCollapsedIndicatorDirective() {
    }
    IgxRowCollapsedIndicatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowCollapsedIndicator]'
                },] }
    ];
    return IgxRowCollapsedIndicatorDirective;
}());
export { IgxRowCollapsedIndicatorDirective };
/**
 * @hidden
 */
var IgxHeaderExpandIndicatorDirective = /** @class */ (function () {
    function IgxHeaderExpandIndicatorDirective() {
    }
    IgxHeaderExpandIndicatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxHeaderExpandedIndicator]'
                },] }
    ];
    return IgxHeaderExpandIndicatorDirective;
}());
export { IgxHeaderExpandIndicatorDirective };
/**
 * @hidden
 */
var IgxHeaderCollapseIndicatorDirective = /** @class */ (function () {
    function IgxHeaderCollapseIndicatorDirective() {
    }
    IgxHeaderCollapseIndicatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxHeaderCollapsedIndicator]'
                },] }
    ];
    return IgxHeaderCollapseIndicatorDirective;
}());
export { IgxHeaderCollapseIndicatorDirective };
/**
 * @hidden
 */
var IgxGroupAreaDropDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IgxGroupAreaDropDirective, _super);
    function IgxGroupAreaDropDirective(elementRef, renderer, zone) {
        var _this = _super.call(this, elementRef, renderer, zone) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.zone = zone;
        _this.hovered = false;
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGroupAreaDropDirective.prototype.onDragEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var drag = event.detail.owner;
        /** @type {?} */
        var column = drag.column;
        if (!this.columnBelongsToGrid(column)) {
            return;
        }
        /** @type {?} */
        var grid = (/** @type {?} */ (column.grid));
        /** @type {?} */
        var isGrouped = grid.groupingExpressions.findIndex(function (item) { return item.fieldName === column.field; }) !== -1;
        if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {
            drag.icon.innerText = 'group_work';
            this.hovered = true;
        }
        else {
            drag.icon.innerText = 'block';
            this.hovered = false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGroupAreaDropDirective.prototype.onDragLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var drag = event.detail.owner;
        /** @type {?} */
        var column = drag.column;
        if (!this.columnBelongsToGrid(column)) {
            return;
        }
        event.detail.owner.icon.innerText = 'block';
        this.hovered = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGroupAreaDropDirective.prototype.onDragDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var drag = event.detail.owner;
        if (drag instanceof IgxColumnMovingDragDirective) {
            /** @type {?} */
            var column_1 = drag.column;
            if (!this.columnBelongsToGrid(column_1)) {
                return;
            }
            /** @type {?} */
            var grid = (/** @type {?} */ (column_1.grid));
            /** @type {?} */
            var isGrouped = grid.groupingExpressions.findIndex(function (item) { return item.fieldName === column_1.field; }) !== -1;
            if (column_1.groupable && !isGrouped && !column_1.columnGroup && !!column_1.field) {
                grid.groupBy({ fieldName: column_1.field, dir: SortingDirection.Asc, ignoreCase: column_1.sortingIgnoreCase,
                    strategy: column_1.sortStrategy, groupingComparer: column_1.groupingComparer });
            }
        }
    };
    /**
     * @private
     * @param {?} elem
     * @param {?} attr
     * @return {?}
     */
    IgxGroupAreaDropDirective.prototype.closestParentByAttr = /**
     * @private
     * @param {?} elem
     * @param {?} attr
     * @return {?}
     */
    function (elem, attr) {
        return elem.hasAttribute(attr) ?
            elem :
            this.closestParentByAttr(elem.parentElement, attr);
    };
    /**
     * @private
     * @param {?} column
     * @return {?}
     */
    IgxGroupAreaDropDirective.prototype.columnBelongsToGrid = /**
     * @private
     * @param {?} column
     * @return {?}
     */
    function (column) {
        /** @type {?} */
        var elem = this.elementRef.nativeElement;
        /** @type {?} */
        var closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');
        if (!column) {
            return false;
        }
        else {
            /** @type {?} */
            var grid = (/** @type {?} */ (column.grid));
            if (!grid || grid.id !== closestGridID) {
                return false;
            }
            return true;
        }
    };
    IgxGroupAreaDropDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxGroupAreaDrop]'
                },] }
    ];
    /** @nocollapse */
    IgxGroupAreaDropDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone }
    ]; };
    IgxGroupAreaDropDirective.propDecorators = {
        hovered: [{ type: HostBinding, args: ['class.igx-drop-area--hover',] }]
    };
    return IgxGroupAreaDropDirective;
}(IgxDropDirective));
export { IgxGroupAreaDropDirective };
if (false) {
    /** @type {?} */
    IgxGroupAreaDropDirective.prototype.hovered;
    /**
     * @type {?}
     * @private
     */
    IgxGroupAreaDropDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    IgxGroupAreaDropDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    IgxGroupAreaDropDirective.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,