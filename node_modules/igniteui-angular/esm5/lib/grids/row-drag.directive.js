/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, NgModule, TemplateRef } from '@angular/core';
import { IgxDragDirective } from '../directives/drag-drop/drag-drop.directive';
import { fromEvent } from 'rxjs';
/** @type {?} */
var ghostBackgroundClass = 'igx-grid__tr--ghost';
/** @type {?} */
var gridCellClass = 'igx-grid__td';
/** @type {?} */
var rowSelectedClass = 'igx-grid__tr--selected';
/** @type {?} */
var cellSelectedClass = 'igx-grid__td--selected';
/** @type {?} */
var cellActiveClass = 'igx-grid__td--active';
/**
 * @hidden
 */
var IgxRowDragDirective = /** @class */ (function (_super) {
    tslib_1.__extends(IgxRowDragDirective, _super);
    function IgxRowDragDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._rowDragStarted = false;
        _this.transitionEndEvent = function (evt) {
            if (_this.ghostElement) {
                _this.ghostElement.removeEventListener('transitionend', _this.transitionEndEvent, false);
            }
            _this.endDragging();
        };
        return _this;
    }
    Object.defineProperty(IgxRowDragDirective.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this.row;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.row = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    IgxRowDragDirective.prototype.onPointerDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this._rowDragStarted = false;
        this._removeOnDestroy = false;
        _super.prototype.onPointerDown.call(this, event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxRowDragDirective.prototype.onPointerMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        _super.prototype.onPointerMove.call(this, event);
        if (this._dragStarted && !this._rowDragStarted) {
            this._rowDragStarted = true;
            /** @type {?} */
            var args = {
                dragDirective: this,
                dragData: this.row,
                cancel: false,
                owner: this.row.grid
            };
            this.row.grid.onRowDragStart.emit(args);
            if (args.cancel) {
                this.ghostElement.parentNode.removeChild(this.ghostElement);
                this.ghostElement = null;
                this._dragStarted = false;
                this._clicked = false;
                return;
            }
            this.row.dragging = true;
            this.row.grid.rowDragging = true;
            this.row.grid.markForCheck();
            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe(function (ev) {
                if (ev.key === "Escape" /* ESCAPE */ || ev.key === "Esc" /* ESCAPE_IE */) {
                    _this._lastDropArea = false;
                    _this.onPointerUp(event);
                }
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxRowDragDirective.prototype.onPointerUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!this._clicked) {
            return;
        }
        /** @type {?} */
        var args = {
            dragDirective: this,
            dragData: this.row,
            animation: false,
            owner: this.row.grid
        };
        this.zone.run(function () {
            _this.row.grid.onRowDragEnd.emit(args);
        });
        /** @type {?} */
        var dropArea = this._lastDropArea;
        _super.prototype.onPointerUp.call(this, event);
        if (!dropArea && this.ghostElement) {
            this.ghostElement.addEventListener('transitionend', this.transitionEndEvent, false);
        }
        else {
            this.endDragging();
        }
    };
    /**
     * @protected
     * @param {?} pageX
     * @param {?} pageY
     * @return {?}
     */
    IgxRowDragDirective.prototype.createGhost = /**
     * @protected
     * @param {?} pageX
     * @param {?} pageY
     * @return {?}
     */
    function (pageX, pageY) {
        this.row.grid.endEdit(true);
        this.row.grid.markForCheck();
        this.ghostContext = {
            $implicit: this.row.rowData,
            data: this.row.rowData,
            grid: this.row.grid
        };
        _super.prototype.createGhost.call(this, pageX, pageY, this.row.nativeElement);
        // check if there is an expander icon and create the ghost at the corresponding position
        if (this.isHierarchicalGrid) {
            /** @type {?} */
            var row = (/** @type {?} */ (this.row));
            if (row.expander) {
                /** @type {?} */
                var expanderWidth = row.expander.nativeElement.getBoundingClientRect().width;
                this._ghostHostX += expanderWidth;
            }
        }
        /** @type {?} */
        var ghost = this.ghostElement;
        /** @type {?} */
        var gridRect = this.row.grid.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var rowRect = this.row.nativeElement.getBoundingClientRect();
        ghost.style.overflow = 'hidden';
        ghost.style.width = gridRect.width + 'px';
        ghost.style.height = rowRect.height + 'px';
        this.renderer.addClass(ghost, ghostBackgroundClass);
        this.renderer.removeClass(ghost, rowSelectedClass);
        /** @type {?} */
        var ghostCells = ghost.getElementsByClassName(gridCellClass);
        for (var index = 0; index < ghostCells.length; index++) {
            this.renderer.removeClass(ghostCells[index], cellSelectedClass);
            this.renderer.removeClass(ghostCells[index], cellActiveClass);
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxRowDragDirective.prototype._unsubscribe = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.subscription$ && !this.subscription$.closed) {
            this.subscription$.unsubscribe();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxRowDragDirective.prototype.endDragging = /**
     * @private
     * @return {?}
     */
    function () {
        this.onTransitionEnd(null);
        this.row.dragging = false;
        this.row.grid.rowDragging = false;
        this.row.grid.markForCheck();
        this._unsubscribe();
    };
    Object.defineProperty(IgxRowDragDirective.prototype, "isHierarchicalGrid", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.row.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';
        },
        enumerable: true,
        configurable: true
    });
    IgxRowDragDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowDrag]'
                },] }
    ];
    IgxRowDragDirective.propDecorators = {
        data: [{ type: Input, args: ['igxRowDrag',] }]
    };
    return IgxRowDragDirective;
}(IgxDragDirective));
export { IgxRowDragDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxRowDragDirective.prototype.row;
    /**
     * @type {?}
     * @private
     */
    IgxRowDragDirective.prototype.subscription$;
    /**
     * @type {?}
     * @private
     */
    IgxRowDragDirective.prototype._rowDragStarted;
    /**
     * @type {?}
     * @private
     */
    IgxRowDragDirective.prototype.transitionEndEvent;
}
/**
 * @hidden
 */
var IgxDragIndicatorIconDirective = /** @class */ (function () {
    function IgxDragIndicatorIconDirective() {
    }
    IgxDragIndicatorIconDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxDragIndicatorIcon]'
                },] }
    ];
    return IgxDragIndicatorIconDirective;
}());
export { IgxDragIndicatorIconDirective };
/**
 * @hidden
 */
var IgxRowDragGhostDirective = /** @class */ (function () {
    function IgxRowDragGhostDirective(templateRef) {
        this.templateRef = templateRef;
    }
    IgxRowDragGhostDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowDragGhost]'
                },] }
    ];
    /** @nocollapse */
    IgxRowDragGhostDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxRowDragGhostDirective;
}());
export { IgxRowDragGhostDirective };
if (false) {
    /** @type {?} */
    IgxRowDragGhostDirective.prototype.templateRef;
}
var IgxRowDragModule = /** @class */ (function () {
    function IgxRowDragModule() {
    }
    IgxRowDragModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],
                    entryComponents: [],
                    exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective, IgxRowDragGhostDirective],
                    imports: []
                },] }
    ];
    return IgxRowDragModule;
}());
export { IgxRowDragModule };
//# sourceMappingURL=data:application/json;base64,