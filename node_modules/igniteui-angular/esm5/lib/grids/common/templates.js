/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef } from '@angular/core';
var IgxFilterCellTemplateDirective = /** @class */ (function () {
    function IgxFilterCellTemplateDirective(template) {
        this.template = template;
    }
    IgxFilterCellTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxFilterCellTemplate]'
                },] }
    ];
    /** @nocollapse */
    IgxFilterCellTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxFilterCellTemplateDirective;
}());
export { IgxFilterCellTemplateDirective };
if (false) {
    /** @type {?} */
    IgxFilterCellTemplateDirective.prototype.template;
}
var IgxCellTemplateDirective = /** @class */ (function () {
    function IgxCellTemplateDirective(template) {
        this.template = template;
    }
    IgxCellTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxCell]'
                },] }
    ];
    /** @nocollapse */
    IgxCellTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxCellTemplateDirective;
}());
export { IgxCellTemplateDirective };
if (false) {
    /** @type {?} */
    IgxCellTemplateDirective.prototype.template;
}
var IgxCellHeaderTemplateDirective = /** @class */ (function () {
    function IgxCellHeaderTemplateDirective(template) {
        this.template = template;
    }
    IgxCellHeaderTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxHeader]'
                },] }
    ];
    /** @nocollapse */
    IgxCellHeaderTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxCellHeaderTemplateDirective;
}());
export { IgxCellHeaderTemplateDirective };
if (false) {
    /** @type {?} */
    IgxCellHeaderTemplateDirective.prototype.template;
}
/**
 * @hidden
 */
var IgxCellFooterTemplateDirective = /** @class */ (function () {
    function IgxCellFooterTemplateDirective(template) {
        this.template = template;
    }
    IgxCellFooterTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxFooter]'
                },] }
    ];
    /** @nocollapse */
    IgxCellFooterTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxCellFooterTemplateDirective;
}());
export { IgxCellFooterTemplateDirective };
if (false) {
    /** @type {?} */
    IgxCellFooterTemplateDirective.prototype.template;
}
var IgxCellEditorTemplateDirective = /** @class */ (function () {
    function IgxCellEditorTemplateDirective(template) {
        this.template = template;
    }
    IgxCellEditorTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxCellEditor]'
                },] }
    ];
    /** @nocollapse */
    IgxCellEditorTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxCellEditorTemplateDirective;
}());
export { IgxCellEditorTemplateDirective };
if (false) {
    /** @type {?} */
    IgxCellEditorTemplateDirective.prototype.template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9jb21tb24vdGVtcGxhdGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd2RDtJQUlJLHdDQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFHLENBQUM7O2dCQUpwRCxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHlCQUF5QjtpQkFDdEM7Ozs7Z0JBTG1CLFdBQVc7O0lBUS9CLHFDQUFDO0NBQUEsQUFMRCxJQUtDO1NBRlksOEJBQThCOzs7SUFDM0Isa0RBQWlDOztBQUdqRDtJQUtJLGtDQUFtQixRQUEwQjtRQUExQixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUFJLENBQUM7O2dCQUxyRCxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLFdBQVc7aUJBQ3hCOzs7O2dCQVptQixXQUFXOztJQWdCL0IsK0JBQUM7Q0FBQSxBQU5ELElBTUM7U0FIWSx3QkFBd0I7OztJQUVyQiw0Q0FBaUM7O0FBR2pEO0lBS0ksd0NBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7Z0JBTHJELFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsYUFBYTtpQkFDMUI7Ozs7Z0JBcEJtQixXQUFXOztJQXlCL0IscUNBQUM7Q0FBQSxBQVBELElBT0M7U0FKWSw4QkFBOEI7OztJQUUzQixrREFBaUM7Ozs7O0FBTWpEO0lBS0ksd0NBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7Z0JBTHJELFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsYUFBYTtpQkFDMUI7Ozs7Z0JBL0JtQixXQUFXOztJQW1DL0IscUNBQUM7Q0FBQSxBQU5ELElBTUM7U0FIWSw4QkFBOEI7OztJQUUzQixrREFBaUM7O0FBR2pEO0lBS0ksd0NBQW1CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQUksQ0FBQzs7Z0JBTHJELFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2lCQUM5Qjs7OztnQkF2Q21CLFdBQVc7O0lBMkMvQixxQ0FBQztDQUFBLEFBTkQsSUFNQztTQUhZLDhCQUE4Qjs7O0lBRTNCLGtEQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hGaWx0ZXJDZWxsVGVtcGxhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hGaWx0ZXJDZWxsVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55Pikge31cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4Q2VsbF0nXG59KVxuZXhwb3J0IGNsYXNzIElneENlbGxUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hIZWFkZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hDZWxsSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUge1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cblxufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEZvb3Rlcl0nXG59KVxuZXhwb3J0IGNsYXNzIElneENlbGxGb290ZXJUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hDZWxsRWRpdG9yXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q2VsbEVkaXRvclRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG4iXX0=