/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, Input, NgZone, Inject, NgModuleRef } from '@angular/core';
import { DataType } from '../data-operations/data-util';
import { SortingDirection } from '../data-operations/sorting-expression.interface';
import { GridBaseAPIService } from './api.service';
import { IgxColumnComponent } from './column.component';
import { IgxFilteringService } from './filtering/grid-filtering.service';
import { IgxColumnResizingService } from './grid-column-resizing.service';
import { IgxOverlayService } from '../services/overlay/overlay';
import { IgxGridExcelStyleFilteringComponent } from './filtering/excel-style/grid.excel-style-filtering.component';
import { VerticalAlignment } from '../services/overlay/utilities';
import { AutoPositionStrategy } from '../services/overlay/position/auto-position-strategy';
import { useAnimation } from '@angular/animations';
import { filter, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { fadeIn, fadeOut } from '../animations/main';
import { AbsoluteScrollStrategy } from '../services/overlay/scroll/absolute-scroll-strategy';
/**
 * @hidden
 */
var IgxGridHeaderComponent = /** @class */ (function () {
    function IgxGridHeaderComponent(gridAPI, colResizingService, cdr, elementRef, zone, _filteringService, _moduleRef, _overlayService) {
        this.gridAPI = gridAPI;
        this.colResizingService = colResizingService;
        this.cdr = cdr;
        this.elementRef = elementRef;
        this.zone = zone;
        this._filteringService = _filteringService;
        this._moduleRef = _moduleRef;
        this._overlayService = _overlayService;
        this._destroy$ = new Subject();
        this.hostRole = 'columnheader';
        this.tabindex = -1;
        this.sortDirection = SortingDirection.None;
    }
    Object.defineProperty(IgxGridHeaderComponent.prototype, "styleClasses", {
        get: /**
         * @return {?}
         */
        function () {
            var e_1, _a;
            /** @type {?} */
            var defaultClasses = [
                'igx-grid__th--fw',
                this.column.headerClasses
            ];
            /** @type {?} */
            var classList = {
                'igx-grid__th': !this.column.columnGroup,
                'asc': this.ascending,
                'desc': this.descending,
                'igx-grid__th--number': this.column.dataType === DataType.Number,
                'igx-grid__th--sortable': this.column.sortable,
                'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,
                'igx-grid__th--sorted': this.sorted
            };
            try {
                for (var _b = tslib_1.__values(Object.keys(classList)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var klass = _c.value;
                    if (classList[klass]) {
                        defaultClasses.push(klass);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return defaultClasses.join(' ');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.grid.hasColumnGroups) {
                return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight / this.grid._baseFontSize;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "ascending", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sortDirection === SortingDirection.Asc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "descending", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sortDirection === SortingDirection.Desc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "sortingIcon", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.sortDirection !== SortingDirection.None) {
                // arrow_downward and arrow_upward
                // are material icons ligature strings
                return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';
            }
            return 'arrow_upward';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "sorted", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sortDirection !== SortingDirection.None;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "filterIconClassName", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridHeaderComponent.prototype, "headerID", {
        get: /**
         * @return {?}
         */
        function () {
            return this.gridID + "_" + this.column.field;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initFilteringSettings();
    };
    /**
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.getSortDirection();
        this.cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroy$.next(true);
        this._destroy$.complete();
        if (this._componentOverlayId) {
            this._overlayService.hide(this._componentOverlayId);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.colResizingService.isColumnResizing) {
            event.stopPropagation();
            if (this.grid.filteringService.isFilterRowVisible) {
                if (this.column.filterable && !this.column.columnGroup &&
                    !this.grid.filteringService.isFilterComplex(this.column.field)) {
                    this.grid.filteringService.filteredColumn = this.column;
                }
            }
            else if (this.column.sortable) {
                this.triggerSort();
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.onFilteringIconClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.toggleFilterDropdown();
    };
    Object.defineProperty(IgxGridHeaderComponent.prototype, "grid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.gridAPI.grid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @protected
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.getSortDirection = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var expr = this.gridAPI.grid.sortingExpressions.find(function (x) { return x.fieldName === _this.column.field; });
        this.sortDirection = expr ? expr.dir : SortingDirection.None;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.onSortingIconClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.grid.filteringService.isFilterRowVisible) {
            event.stopPropagation();
            this.triggerSort();
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.triggerSort = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var groupingExpr = this.grid.groupingExpressions ?
            this.grid.groupingExpressions.find(function (expr) { return expr.fieldName === _this.column.field; }) : null;
        /** @type {?} */
        var sortDir = groupingExpr ?
            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc
            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;
        this.sortDirection = sortDir;
        this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,
            strategy: this.column.sortStrategy });
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.toggleFilterDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this._componentOverlayId) {
            /** @type {?} */
            var headerTarget = this.elementRef.nativeElement;
            /** @type {?} */
            var filterIconTarget = headerTarget.querySelector('.' + this.filterIconClassName);
            this._filterMenuOverlaySettings.positionStrategy.settings.target = filterIconTarget;
            this._filterMenuOverlaySettings.outlet = this.grid.outlet;
            this._componentOverlayId =
                this._overlayService.attach(IgxGridExcelStyleFilteringComponent, this._filterMenuOverlaySettings, this._moduleRef);
            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.initFilteringSettings = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._filterMenuPositionSettings = {
            verticalStartPoint: VerticalAlignment.Bottom,
            openAnimation: useAnimation(fadeIn, {
                params: {
                    duration: '250ms'
                }
            }),
            closeAnimation: useAnimation(fadeOut, {
                params: {
                    duration: '200ms'
                }
            })
        };
        this._filterMenuOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            positionStrategy: new AutoPositionStrategy(this._filterMenuPositionSettings),
            scrollStrategy: new AbsoluteScrollStrategy()
        };
        this._overlayService.onOpening.pipe(filter(function (overlay) { return overlay.id === _this._componentOverlayId; }), takeUntil(this._destroy$)).subscribe(function (eventArgs) {
            _this.onOverlayOpening(eventArgs);
        });
        this._overlayService.onClosed.pipe(filter(function (overlay) { return overlay.id === _this._componentOverlayId; }), takeUntil(this._destroy$)).subscribe(function () {
            _this.onOverlayClosed();
        });
    };
    /**
     * @private
     * @param {?} eventArgs
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.onOverlayOpening = /**
     * @private
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventArgs) {
        /** @type {?} */
        var instance = (/** @type {?} */ (eventArgs.componentRef.instance));
        if (instance) {
            instance.initialize(this.column, this._filteringService, this._overlayService, eventArgs.id);
        }
    };
    /**
     * @private
     * @return {?}
     */
    IgxGridHeaderComponent.prototype.onOverlayClosed = /**
     * @private
     * @return {?}
     */
    function () {
        this._componentOverlayId = null;
    };
    IgxGridHeaderComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    selector: 'igx-grid-header',
                    template: "<ng-template #defaultColumn>\n    <span [attr.title]=\"column.header || column.field\">{{ column.header || column.field }}</span>\n</ng-template>\n\n<span class=\"igx-grid__th-title\">\n    <ng-container *ngTemplateOutlet=\"column.headerTemplate ? column.headerTemplate : defaultColumn; context: { $implicit: column, column: column}\">\n    </ng-container>\n</span>\n<div class=\"igx-grid__th-icons\" *ngIf=\"!column.columnGroup\">\n    <igx-icon [attr.draggable]=\"false\"\n        class=\"sort-icon\"\n        *ngIf=\"column.sortable\"\n        (click)=\"onSortingIconClick($event)\">\n        {{sortingIcon}}\n    </igx-icon>\n\n    <igx-icon [ngClass]=\"filterIconClassName\" [attr.draggable]=\"false\" (click)=\"onFilteringIconClick($event)\"\n        *ngIf=\"grid.allowFiltering == true && column.filterable && grid.filterMode == 'excelStyleFilter'\">\n        filter_list\n    </igx-icon>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    IgxGridHeaderComponent.ctorParameters = function () { return [
        { type: GridBaseAPIService },
        { type: IgxColumnResizingService },
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: NgZone },
        { type: IgxFilteringService },
        { type: NgModuleRef },
        { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] }
    ]; };
    IgxGridHeaderComponent.propDecorators = {
        column: [{ type: Input }],
        gridID: [{ type: Input }],
        styleClasses: [{ type: HostBinding, args: ['class',] }],
        height: [{ type: HostBinding, args: ['style.height.rem',] }],
        hostRole: [{ type: HostBinding, args: ['attr.role',] }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        headerID: [{ type: HostBinding, args: ['attr.id',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return IgxGridHeaderComponent;
}());
export { IgxGridHeaderComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGridHeaderComponent.prototype._componentOverlayId;
    /**
     * @type {?}
     * @private
     */
    IgxGridHeaderComponent.prototype._filterMenuPositionSettings;
    /**
     * @type {?}
     * @private
     */
    IgxGridHeaderComponent.prototype._filterMenuOverlaySettings;
    /**
     * @type {?}
     * @private
     */
    IgxGridHeaderComponent.prototype._destroy$;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.column;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.gridID;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.hostRole;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.tabindex;
    /**
     * @type {?}
     * @protected
     */
    IgxGridHeaderComponent.prototype.sortDirection;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.gridAPI;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.colResizingService;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.cdr;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.elementRef;
    /** @type {?} */
    IgxGridHeaderComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    IgxGridHeaderComponent.prototype._filteringService;
    /**
     * @type {?}
     * @private
     */
    IgxGridHeaderComponent.prototype._moduleRef;
    /**
     * @type {?}
     * @private
     */
    IgxGridHeaderComponent.prototype._overlayService;
}
//# sourceMappingURL=data:application/json;base64,