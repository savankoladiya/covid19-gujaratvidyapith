/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, NgModule, TemplateRef } from '@angular/core';
/**
 * @hidden
 */
var IgxRowSelectorDirective = /** @class */ (function () {
    function IgxRowSelectorDirective(templateRef) {
        this.templateRef = templateRef;
    }
    IgxRowSelectorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxRowSelector]'
                },] }
    ];
    /** @nocollapse */
    IgxRowSelectorDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxRowSelectorDirective;
}());
export { IgxRowSelectorDirective };
if (false) {
    /** @type {?} */
    IgxRowSelectorDirective.prototype.templateRef;
}
/**
 * @hidden
 */
var IgxHeadSelectorDirective = /** @class */ (function () {
    function IgxHeadSelectorDirective(templateRef) {
        this.templateRef = templateRef;
    }
    IgxHeadSelectorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[igxHeadSelector]'
                },] }
    ];
    /** @nocollapse */
    IgxHeadSelectorDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return IgxHeadSelectorDirective;
}());
export { IgxHeadSelectorDirective };
if (false) {
    /** @type {?} */
    IgxHeadSelectorDirective.prototype.templateRef;
}
/**
 * @hidden
 */
var IgxRowSelectorsModule = /** @class */ (function () {
    function IgxRowSelectorsModule() {
    }
    IgxRowSelectorsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [IgxRowSelectorDirective, IgxHeadSelectorDirective],
                    exports: [IgxRowSelectorDirective, IgxHeadSelectorDirective]
                },] }
    ];
    return IgxRowSelectorsModule;
}());
export { IgxRowSelectorsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWd4LXJvdy1zZWxlY3RvcnMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9ncmlkcy9pZ3gtcm93LXNlbGVjdG9ycy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUtqRTtJQUlJLGlDQUFtQixXQUE2QjtRQUE3QixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFBSSxDQUFDOztnQkFKeEQsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxrQkFBa0I7aUJBQy9COzs7O2dCQVA2QixXQUFXOztJQVV6Qyw4QkFBQztDQUFBLEFBTEQsSUFLQztTQUZZLHVCQUF1Qjs7O0lBQ3BCLDhDQUFvQzs7Ozs7QUFNcEQ7SUFJSSxrQ0FBbUIsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBQUksQ0FBQzs7Z0JBSnhELFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2lCQUNoQzs7OztnQkFqQjZCLFdBQVc7O0lBb0J6QywrQkFBQztDQUFBLEFBTEQsSUFLQztTQUZZLHdCQUF3Qjs7O0lBQ3JCLCtDQUFvQzs7Ozs7QUFNcEQ7SUFBQTtJQUtBLENBQUM7O2dCQUxBLFFBQVEsU0FBQztvQkFDTixZQUFZLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSx3QkFBd0IsQ0FBQztvQkFDakUsT0FBTyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsd0JBQXdCLENBQUM7aUJBQy9EOztJQUVELDRCQUFDO0NBQUEsQUFMRCxJQUtDO1NBRFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBOZ01vZHVsZSwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneFJvd1NlbGVjdG9yXSdcbn0pXG5leHBvcnQgY2xhc3MgSWd4Um93U2VsZWN0b3JEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tpZ3hIZWFkU2VsZWN0b3JdJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hIZWFkU2VsZWN0b3JEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PikgeyB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW0lneFJvd1NlbGVjdG9yRGlyZWN0aXZlLCBJZ3hIZWFkU2VsZWN0b3JEaXJlY3RpdmVdLFxuICAgIGV4cG9ydHM6IFtJZ3hSb3dTZWxlY3RvckRpcmVjdGl2ZSwgSWd4SGVhZFNlbGVjdG9yRGlyZWN0aXZlXVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hSb3dTZWxlY3RvcnNNb2R1bGUge1xufVxuIl19