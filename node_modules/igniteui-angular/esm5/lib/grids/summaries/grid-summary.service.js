/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DataUtil } from '../../data-operations/data-util';
import { cloneArray } from '../../core/utils';
/**
 * @hidden
 */
var IgxGridSummaryService = /** @class */ (function () {
    function IgxGridSummaryService() {
        this.summaryCacheMap = new Map();
        this.rootSummaryID = 'igxGridRootSummary';
        this.summaryHeight = 0;
        this.maxSummariesLenght = 0;
        this.groupingExpressions = [];
        this.retriggerRootPipe = 0;
        this.deleteOperation = false;
    }
    /**
     * @return {?}
     */
    IgxGridSummaryService.prototype.recalculateSummaries = /**
     * @return {?}
     */
    function () {
        this.resetSummaryHeight();
        this.grid.notifyChanges(true);
    };
    /**
     * @param {?=} args
     * @return {?}
     */
    IgxGridSummaryService.prototype.clearSummaryCache = /**
     * @param {?=} args
     * @return {?}
     */
    function (args) {
        if (!this.summaryCacheMap.size) {
            return;
        }
        if (!args) {
            this.summaryCacheMap.clear();
            if (this.grid && this.grid.rootSummariesEnabled) {
                this.retriggerRootPipe++;
            }
            return;
        }
        if (args.data) {
            /** @type {?} */
            var rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;
            this.removeSummaries(rowID);
        }
        if (args.rowID !== undefined && args.rowID !== null) {
            /** @type {?} */
            var columnName = args.cellID ? this.grid.columnList.find(function (col) { return col.index === args.cellID.columnID; }).field : undefined;
            if (columnName && this.grid.rowEditable) {
                return;
            }
            /** @type {?} */
            var isGroupedColumn = this.grid.groupingExpressions &&
                this.grid.groupingExpressions.map(function (expr) { return expr.fieldName; }).indexOf(columnName) !== -1;
            if (columnName && isGroupedColumn) {
                columnName = undefined;
            }
            this.removeSummaries(args.rowID, columnName);
        }
    };
    /**
     * @param {?} rowID
     * @param {?=} columnName
     * @return {?}
     */
    IgxGridSummaryService.prototype.removeSummaries = /**
     * @param {?} rowID
     * @param {?=} columnName
     * @return {?}
     */
    function (rowID, columnName) {
        var _this = this;
        this.deleteSummaryCache(this.rootSummaryID, columnName);
        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) {
            return;
        }
        if (this.isTreeGrid) {
            if (this.grid.transactions.enabled && this.deleteOperation) {
                this.deleteOperation = false;
                // TODO: this.removeChildRowSummaries(rowID, columnName);
                this.summaryCacheMap.clear();
                return;
            }
            this.removeAllTreeGridSummaries(rowID, columnName);
        }
        else if (this.isHierarchicalGrid) {
            if (this.grid.transactions.enabled && this.deleteOperation) {
                this.deleteOperation = false;
                this.summaryCacheMap.clear();
            }
        }
        else {
            /** @type {?} */
            var summaryIds = this.getSummaryID(rowID, this.grid.groupingExpressions);
            summaryIds.forEach(function (id) {
                _this.deleteSummaryCache(id, columnName);
            });
        }
    };
    /**
     * @param {?} columnName
     * @return {?}
     */
    IgxGridSummaryService.prototype.removeSummariesCachePerColumn = /**
     * @param {?} columnName
     * @return {?}
     */
    function (columnName) {
        this.summaryCacheMap.forEach(function (cache) {
            if (cache.get(columnName)) {
                cache.delete(columnName);
            }
        });
        if (this.grid.rootSummariesEnabled) {
            this.retriggerRootPipe++;
        }
    };
    /**
     * @return {?}
     */
    IgxGridSummaryService.prototype.calcMaxSummaryHeight = /**
     * @return {?}
     */
    function () {
        if (this.summaryHeight) {
            return this.summaryHeight;
        }
        if (!this.grid.data) {
            return this.summaryHeight = 0;
        }
        /** @type {?} */
        var maxSummaryLength = 0;
        this.grid.columnList.filter(function (col) { return col.hasSummary && !col.hidden; }).forEach(function (column) {
            /** @type {?} */
            var getCurrentSummaryColumn = column.summaries.operate([], [], column.field).length;
            if (getCurrentSummaryColumn) {
                if (maxSummaryLength < getCurrentSummaryColumn) {
                    maxSummaryLength = getCurrentSummaryColumn;
                }
            }
        });
        this.maxSummariesLenght = maxSummaryLength;
        this.summaryHeight = maxSummaryLength * this.grid.defaultSummaryHeight;
        return this.summaryHeight;
    };
    /**
     * @param {?} rowID
     * @param {?} data
     * @return {?}
     */
    IgxGridSummaryService.prototype.calculateSummaries = /**
     * @param {?} rowID
     * @param {?} data
     * @return {?}
     */
    function (rowID, data) {
        /** @type {?} */
        var rowSummaries = this.summaryCacheMap.get(rowID);
        if (!rowSummaries) {
            rowSummaries = new Map();
            this.summaryCacheMap.set(rowID, rowSummaries);
        }
        if (!this.hasSummarizedColumns || !data) {
            return rowSummaries;
        }
        this.grid.columnList.filter(function (col) { return col.hasSummary; }).forEach(function (column) {
            if (!rowSummaries.get(column.field)) {
                rowSummaries.set(column.field, column.summaries.operate(data.map(function (r) { return r[column.field]; }), data, column.field));
            }
        });
        return rowSummaries;
    };
    /**
     * @return {?}
     */
    IgxGridSummaryService.prototype.resetSummaryHeight = /**
     * @return {?}
     */
    function () {
        this.summaryHeight = 0;
        ((/** @type {?} */ (this.grid)))._summaryPipeTrigger++;
        if (this.grid.rootSummariesEnabled) {
            this.retriggerRootPipe++;
        }
    };
    /**
     * @param {?} groupingArgs
     * @return {?}
     */
    IgxGridSummaryService.prototype.updateSummaryCache = /**
     * @param {?} groupingArgs
     * @return {?}
     */
    function (groupingArgs) {
        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) {
            return;
        }
        if (this.groupingExpressions.length === 0) {
            this.groupingExpressions = groupingArgs.expressions.map(function (record) { return record.fieldName; });
            return;
        }
        if (groupingArgs.length === 0) {
            this.groupingExpressions = [];
            this.clearSummaryCache();
            return;
        }
        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);
        this.groupingExpressions = groupingArgs.expressions.map(function (record) { return record.fieldName; });
    };
    Object.defineProperty(IgxGridSummaryService.prototype, "hasSummarizedColumns", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var summarizedColumns = this.grid.columnList.filter(function (col) { return col.hasSummary && !col.hidden; });
            return summarizedColumns.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} id
     * @param {?} columnName
     * @return {?}
     */
    IgxGridSummaryService.prototype.deleteSummaryCache = /**
     * @private
     * @param {?} id
     * @param {?} columnName
     * @return {?}
     */
    function (id, columnName) {
        if (this.summaryCacheMap.get(id)) {
            /** @type {?} */
            var filteringApplied = columnName && this.grid.filteringExpressionsTree &&
                this.grid.filteringExpressionsTree.filteringOperands.map(function (expr) { return expr.fieldName; }).indexOf(columnName) !== -1;
            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {
                this.summaryCacheMap.get(id).delete(columnName);
            }
            else {
                this.summaryCacheMap.delete(id);
            }
            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {
                this.retriggerRootPipe++;
            }
        }
    };
    /**
     * @private
     * @param {?} rowID
     * @param {?} groupingExpressions
     * @return {?}
     */
    IgxGridSummaryService.prototype.getSummaryID = /**
     * @private
     * @param {?} rowID
     * @param {?} groupingExpressions
     * @return {?}
     */
    function (rowID, groupingExpressions) {
        var _this = this;
        if (groupingExpressions.length === 0) {
            return [];
        }
        /** @type {?} */
        var summaryIDs = [];
        /** @type {?} */
        var data = this.grid.data;
        if (this.grid.transactions.enabled) {
            data = DataUtil.mergeTransactions(cloneArray(this.grid.data), this.grid.transactions.getAggregatedChanges(true), this.grid.primaryKey);
        }
        /** @type {?} */
        var rowData = this.grid.primaryKey ? data.find(function (rec) { return rec[_this.grid.primaryKey] === rowID; }) : rowID;
        /** @type {?} */
        var id = '{ ';
        groupingExpressions.forEach(function (expr) {
            id += "'" + expr.fieldName + "': '" + rowData[expr.fieldName] + "'";
            summaryIDs.push(id.concat(' }'));
            id += ', ';
        });
        return summaryIDs;
    };
    /**
     * @private
     * @param {?} rowID
     * @param {?=} columnName
     * @return {?}
     */
    IgxGridSummaryService.prototype.removeAllTreeGridSummaries = /**
     * @private
     * @param {?} rowID
     * @param {?=} columnName
     * @return {?}
     */
    function (rowID, columnName) {
        /** @type {?} */
        var row = this.grid.records.get(rowID);
        if (!row) {
            return;
        }
        row = row.children ? row : row.parent;
        while (row) {
            rowID = row.rowID;
            this.deleteSummaryCache(rowID, columnName);
            row = row.parent;
        }
    };
    // TODO: remove only deleted rows
    // TODO: remove only deleted rows
    /**
     * @private
     * @param {?} rowID
     * @param {?=} columnName
     * @return {?}
     */
    IgxGridSummaryService.prototype.removeChildRowSummaries = 
    // TODO: remove only deleted rows
    /**
     * @private
     * @param {?} rowID
     * @param {?=} columnName
     * @return {?}
     */
    function (rowID, columnName) {
    };
    /**
     * @private
     * @param {?} current
     * @param {?} groupingArgs
     * @return {?}
     */
    IgxGridSummaryService.prototype.compareGroupingExpressions = /**
     * @private
     * @param {?} current
     * @param {?} groupingArgs
     * @return {?}
     */
    function (current, groupingArgs) {
        var _this = this;
        /** @type {?} */
        var newExpressions = groupingArgs.expressions.map(function (record) { return record.fieldName; });
        /** @type {?} */
        var removedCols = groupingArgs.ungroupedColumns;
        if (current.length <= newExpressions.length) {
            /** @type {?} */
            var newExpr = newExpressions.slice(0, current.length).toString();
            if (current.toString() !== newExpr) {
                this.clearSummaryCache();
            }
        }
        else {
            /** @type {?} */
            var currExpr = current.slice(0, newExpressions.length).toString();
            if (currExpr !== newExpressions.toString()) {
                this.clearSummaryCache();
                return;
            }
            removedCols.map(function (col) { return col.field; }).forEach(function (colName) {
                _this.summaryCacheMap.forEach(function (cache, id) {
                    if (id.indexOf(colName) !== -1) {
                        _this.summaryCacheMap.delete(id);
                    }
                });
            });
        }
    };
    Object.defineProperty(IgxGridSummaryService.prototype, "isTreeGrid", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxGridSummaryService.prototype, "isHierarchicalGrid", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';
        },
        enumerable: true,
        configurable: true
    });
    IgxGridSummaryService.decorators = [
        { type: Injectable }
    ];
    return IgxGridSummaryService;
}());
export { IgxGridSummaryService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    IgxGridSummaryService.prototype.summaryCacheMap;
    /** @type {?} */
    IgxGridSummaryService.prototype.grid;
    /** @type {?} */
    IgxGridSummaryService.prototype.rootSummaryID;
    /** @type {?} */
    IgxGridSummaryService.prototype.summaryHeight;
    /** @type {?} */
    IgxGridSummaryService.prototype.maxSummariesLenght;
    /** @type {?} */
    IgxGridSummaryService.prototype.groupingExpressions;
    /** @type {?} */
    IgxGridSummaryService.prototype.retriggerRootPipe;
    /** @type {?} */
    IgxGridSummaryService.prototype.deleteOperation;
}
//# sourceMappingURL=data:application/json;base64,