/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { animate, animation, keyframes, style } from '@angular/animations';
import { EaseOut } from '../easings';
/** @type {?} */
var baseRecipe = [
    style({
        backfaceVisibility: 'hidden',
        transformStyle: 'preserve-3d'
    }),
    animate("{{duration}} {{delay}} {{easing}}", keyframes([
        style({
            offset: 0,
            transform: "translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)"
        }),
        style({
            offset: 1,
            transform: "translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)"
        })
    ]))
];
/** @type {?} */
var baseParams = {
    delay: '0s',
    duration: '600ms',
    easing: EaseOut.quad,
    endAngle: 180,
    endDistance: '0px',
    rotateX: 1,
    rotateY: 0,
    rotateZ: 0,
    startAngle: 0,
    startDistance: '0px'
};
/** @type {?} */
var flipTop = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams)
});
/** @type {?} */
var flipBottom = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { endAngle: -180 })
});
/** @type {?} */
var flipLeft = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { rotateX: 0, rotateY: 1 })
});
/** @type {?} */
var flipRight = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { endAngle: -180, rotateX: 0, rotateY: 1 })
});
/** @type {?} */
var flipHorFwd = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { endDistance: '170px' })
});
/** @type {?} */
var flipHorBck = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { endDistance: '-170px' })
});
/** @type {?} */
var flipVerFwd = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { endDistance: '170px', rotateX: 0, rotateY: 1 })
});
/** @type {?} */
var flipVerBck = animation(baseRecipe, {
    params: tslib_1.__assign({}, baseParams, { endDistance: '-170px', rotateX: 0, rotateY: 1 })
});
export { flipTop, flipRight, flipBottom, flipLeft, flipHorFwd, flipHorBck, flipVerFwd, flipVerBck };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2FuaW1hdGlvbnMvZmxpcC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDSCxPQUFPLEVBQ1AsU0FBUyxFQUdULFNBQVMsRUFDVCxLQUFLLEVBQ1IsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDOztJQUcvQixVQUFVLEdBQXdCO0lBQ3BDLEtBQUssQ0FBQztRQUNGLGtCQUFrQixFQUFFLFFBQVE7UUFDNUIsY0FBYyxFQUFFLGFBQWE7S0FDaEMsQ0FBQztJQUNGLE9BQU8sQ0FDSCxtQ0FBbUMsRUFDbkMsU0FBUyxDQUFDO1FBQ04sS0FBSyxDQUFDO1lBQ0YsTUFBTSxFQUFFLENBQUM7WUFDVCxTQUFTLEVBQUUsbUhBQ3dEO1NBQ3RFLENBQUM7UUFDRixLQUFLLENBQUM7WUFDRixNQUFNLEVBQUUsQ0FBQztZQUNULFNBQVMsRUFBRSwrR0FDc0Q7U0FDcEUsQ0FBQztLQUNMLENBQUMsQ0FDTDtDQUNKOztJQUVLLFVBQVUsR0FBcUI7SUFDakMsS0FBSyxFQUFFLElBQUk7SUFDWCxRQUFRLEVBQUUsT0FBTztJQUNqQixNQUFNLEVBQUUsT0FBTyxDQUFDLElBQUk7SUFDcEIsUUFBUSxFQUFFLEdBQUc7SUFDYixXQUFXLEVBQUUsS0FBSztJQUNsQixPQUFPLEVBQUUsQ0FBQztJQUNWLE9BQU8sRUFBRSxDQUFDO0lBQ1YsT0FBTyxFQUFFLENBQUM7SUFDVixVQUFVLEVBQUUsQ0FBQztJQUNiLGFBQWEsRUFBRSxLQUFLO0NBQ3ZCOztJQUVLLE9BQU8sR0FBK0IsU0FBUyxDQUFDLFVBQVUsRUFBRTtJQUM5RCxNQUFNLHVCQUNDLFVBQVUsQ0FDaEI7Q0FDSixDQUFDOztJQUVJLFVBQVUsR0FBK0IsU0FBUyxDQUFDLFVBQVUsRUFBRTtJQUNqRSxNQUFNLHVCQUNDLFVBQVUsSUFDYixRQUFRLEVBQUUsQ0FBQyxHQUFHLEdBQ2pCO0NBQ0osQ0FBQzs7SUFFSSxRQUFRLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDL0QsTUFBTSx1QkFDQyxVQUFVLElBQ2IsT0FBTyxFQUFFLENBQUMsRUFDVixPQUFPLEVBQUUsQ0FBQyxHQUNiO0NBQ0osQ0FBQzs7SUFFSSxTQUFTLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDaEUsTUFBTSx1QkFDQyxVQUFVLElBQ2IsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUNkLE9BQU8sRUFBRSxDQUFDLEVBQ1YsT0FBTyxFQUFFLENBQUMsR0FDYjtDQUNKLENBQUM7O0lBRUksVUFBVSxHQUErQixTQUFTLENBQUMsVUFBVSxFQUFFO0lBQ2pFLE1BQU0sdUJBQ0MsVUFBVSxJQUNiLFdBQVcsRUFBRSxPQUFPLEdBQ3ZCO0NBQ0osQ0FBQzs7SUFFSSxVQUFVLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDakUsTUFBTSx1QkFDQyxVQUFVLElBQ2IsV0FBVyxFQUFFLFFBQVEsR0FDeEI7Q0FDSixDQUFDOztJQUVJLFVBQVUsR0FBK0IsU0FBUyxDQUFDLFVBQVUsRUFBRTtJQUNqRSxNQUFNLHVCQUNDLFVBQVUsSUFDYixXQUFXLEVBQUUsT0FBTyxFQUNwQixPQUFPLEVBQUUsQ0FBQyxFQUNWLE9BQU8sRUFBRSxDQUFDLEdBQ2I7Q0FDSixDQUFDOztJQUVJLFVBQVUsR0FBK0IsU0FBUyxDQUFDLFVBQVUsRUFBRTtJQUNqRSxNQUFNLHVCQUNDLFVBQVUsSUFDYixXQUFXLEVBQUUsUUFBUSxFQUNyQixPQUFPLEVBQUUsQ0FBQyxFQUNWLE9BQU8sRUFBRSxDQUFDLEdBQ2I7Q0FDSixDQUFDO0FBRUYsT0FBTyxFQUNILE9BQU8sRUFDUCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFFBQVEsRUFDUixVQUFVLEVBQ1YsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLEVBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgYW5pbWF0ZSxcbiAgICBhbmltYXRpb24sXG4gICAgQW5pbWF0aW9uTWV0YWRhdGEsXG4gICAgQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEsXG4gICAga2V5ZnJhbWVzLFxuICAgIHN0eWxlXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgRWFzZU91dCB9IGZyb20gJy4uL2Vhc2luZ3MnO1xuaW1wb3J0IHsgSUFuaW1hdGlvblBhcmFtcyB9IGZyb20gJy4uL2ludGVyZmFjZSc7XG5cbmNvbnN0IGJhc2VSZWNpcGU6IEFuaW1hdGlvbk1ldGFkYXRhW10gPSBbXG4gICAgc3R5bGUoe1xuICAgICAgICBiYWNrZmFjZVZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgICAgICB0cmFuc2Zvcm1TdHlsZTogJ3ByZXNlcnZlLTNkJ1xuICAgIH0pLFxuICAgIGFuaW1hdGUoXG4gICAgICAgIGB7e2R1cmF0aW9ufX0ge3tkZWxheX19IHt7ZWFzaW5nfX1gLFxuICAgICAgICBrZXlmcmFtZXMoW1xuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGVaKHt7c3RhcnREaXN0YW5jZX19KVxuICAgICAgICAgICAgICAgIHJvdGF0ZTNkKHt7cm90YXRlWH19LCB7e3JvdGF0ZVl9fSwge3tyb3RhdGVafX0sIHt7c3RhcnRBbmdsZX19ZGVnKWBcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc3R5bGUoe1xuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGVaKHt7ZW5kRGlzdGFuY2V9fSlcbiAgICAgICAgICAgICAgICByb3RhdGUzZCh7e3JvdGF0ZVh9fSwge3tyb3RhdGVZfX0sIHt7cm90YXRlWn19LCB7e2VuZEFuZ2xlfX1kZWcpYFxuICAgICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICApXG5dO1xuXG5jb25zdCBiYXNlUGFyYW1zOiBJQW5pbWF0aW9uUGFyYW1zID0ge1xuICAgIGRlbGF5OiAnMHMnLFxuICAgIGR1cmF0aW9uOiAnNjAwbXMnLFxuICAgIGVhc2luZzogRWFzZU91dC5xdWFkLFxuICAgIGVuZEFuZ2xlOiAxODAsXG4gICAgZW5kRGlzdGFuY2U6ICcwcHgnLFxuICAgIHJvdGF0ZVg6IDEsXG4gICAgcm90YXRlWTogMCxcbiAgICByb3RhdGVaOiAwLFxuICAgIHN0YXJ0QW5nbGU6IDAsXG4gICAgc3RhcnREaXN0YW5jZTogJzBweCdcbn07XG5cbmNvbnN0IGZsaXBUb3A6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmFzZVBhcmFtc1xuICAgIH1cbn0pO1xuXG5jb25zdCBmbGlwQm90dG9tOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlUmVjaXBlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmJhc2VQYXJhbXMsXG4gICAgICAgIGVuZEFuZ2xlOiAtMTgwXG4gICAgfVxufSk7XG5cbmNvbnN0IGZsaXBMZWZ0OiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlUmVjaXBlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmJhc2VQYXJhbXMsXG4gICAgICAgIHJvdGF0ZVg6IDAsXG4gICAgICAgIHJvdGF0ZVk6IDFcbiAgICB9XG59KTtcblxuY29uc3QgZmxpcFJpZ2h0OiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlUmVjaXBlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmJhc2VQYXJhbXMsXG4gICAgICAgIGVuZEFuZ2xlOiAtMTgwLFxuICAgICAgICByb3RhdGVYOiAwLFxuICAgICAgICByb3RhdGVZOiAxXG4gICAgfVxufSk7XG5cbmNvbnN0IGZsaXBIb3JGd2Q6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcbiAgICBwYXJhbXM6IHtcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcbiAgICAgICAgZW5kRGlzdGFuY2U6ICcxNzBweCdcbiAgICB9XG59KTtcblxuY29uc3QgZmxpcEhvckJjazogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5iYXNlUGFyYW1zLFxuICAgICAgICBlbmREaXN0YW5jZTogJy0xNzBweCdcbiAgICB9XG59KTtcblxuY29uc3QgZmxpcFZlckZ3ZDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xuICAgIHBhcmFtczoge1xuICAgICAgICAuLi5iYXNlUGFyYW1zLFxuICAgICAgICBlbmREaXN0YW5jZTogJzE3MHB4JyxcbiAgICAgICAgcm90YXRlWDogMCxcbiAgICAgICAgcm90YXRlWTogMVxuICAgIH1cbn0pO1xuXG5jb25zdCBmbGlwVmVyQmNrOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlUmVjaXBlLCB7XG4gICAgcGFyYW1zOiB7XG4gICAgICAgIC4uLmJhc2VQYXJhbXMsXG4gICAgICAgIGVuZERpc3RhbmNlOiAnLTE3MHB4JyxcbiAgICAgICAgcm90YXRlWDogMCxcbiAgICAgICAgcm90YXRlWTogMVxuICAgIH1cbn0pO1xuXG5leHBvcnQge1xuICAgIGZsaXBUb3AsXG4gICAgZmxpcFJpZ2h0LFxuICAgIGZsaXBCb3R0b20sXG4gICAgZmxpcExlZnQsXG4gICAgZmxpcEhvckZ3ZCxcbiAgICBmbGlwSG9yQmNrLFxuICAgIGZsaXBWZXJGd2QsXG4gICAgZmxpcFZlckJja1xufTtcbiJdfQ==