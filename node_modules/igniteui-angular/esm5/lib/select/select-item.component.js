/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';
import { Component, Input } from '@angular/core';
var IgxSelectItemComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxSelectItemComponent, _super);
    function IgxSelectItemComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(IgxSelectItemComponent.prototype, "text", {
        /**
         * An @Input property that gets/sets the item's text to be displayed in the select component's input when the item is selected.
         *
         * ```typescript
         *  //get
         *  let mySelectedItem = this.dropDown.selectedItem;
         *  let selectedItemText = mySelectedItem.text;
         * ```
    
         * ```html
         * // set
         * <igx-select-item [text]="'London'"></igx-select-item>
         * ```
         */
        get: /**
         * An \@Input property that gets/sets the item's text to be displayed in the select component's input when the item is selected.
         *
         * ```typescript
         *  //get
         *  let mySelectedItem = this.dropDown.selectedItem;
         *  let selectedItemText = mySelectedItem.text;
         * ```
         * ```html
         * // set
         * <igx-select-item [text]="'London'"></igx-select-item>
         * ```
         * @return {?}
         */
        function () {
            return this._text;
        },
        set: /**
         * @param {?} text
         * @return {?}
         */
        function (text) {
            this._text = text;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSelectItemComponent.prototype, "itemText", {
        /** @hidden @internal */
        get: /**
         * @hidden \@internal
         * @return {?}
         */
        function () {
            if (this._text !== undefined) {
                return this._text;
            }
            // If text @Input is undefined, try extract a meaningful item text out of the item template
            return this.elementRef.nativeElement.textContent.trim();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxSelectItemComponent.prototype, "selected", {
        /**
         * Sets/Gets if the item is the currently selected one in the select
         *
         * ```typescript
         *  let mySelectedItem = this.select.selectedItem;
         *  let isMyItemSelected = mySelectedItem.selected; // true
         * ```
         */
        get: /**
         * Sets/Gets if the item is the currently selected one in the select
         *
         * ```typescript
         *  let mySelectedItem = this.select.selectedItem;
         *  let isMyItemSelected = mySelectedItem.selected; // true
         * ```
         * @return {?}
         */
        function () {
            return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value && !this.isHeader && !this.disabled) {
                this.dropDown.selectItem(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IgxSelectItemComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
    };
    IgxSelectItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-select-item',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    IgxSelectItemComponent.propDecorators = {
        text: [{ type: Input }]
    };
    return IgxSelectItemComponent;
}(IgxDropDownItemComponent));
export { IgxSelectItemComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxSelectItemComponent.prototype._text;
    /**
     * @hidden \@internal
     * @type {?}
     */
    IgxSelectItemComponent.prototype.isHeader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZWxlY3Qvc2VsZWN0LWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDbkYsT0FBTyxFQUFFLFNBQVMsRUFBVyxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUQ7SUFJNEMsa0RBQXdCO0lBSnBFOztJQStEQSxDQUFDO0lBekNHLHNCQUNXLHdDQUFJO1FBZmY7Ozs7Ozs7Ozs7Ozs7V0FhRzs7Ozs7Ozs7Ozs7Ozs7O1FBQ0g7WUFFSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdEIsQ0FBQzs7Ozs7UUFFRCxVQUFnQixJQUFZO1lBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLENBQUM7OztPQUpBO0lBT0Qsc0JBQVcsNENBQVE7UUFEbkIsd0JBQXdCOzs7OztRQUN4QjtZQUNJLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUU7Z0JBQzFCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQzthQUNyQjtZQUNELDJGQUEyRjtZQUMzRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM1RCxDQUFDOzs7T0FBQTtJQVVELHNCQUFXLDRDQUFRO1FBUm5COzs7Ozs7O1dBT0c7Ozs7Ozs7Ozs7UUFDSDtZQUNJLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZHLENBQUM7Ozs7O1FBRUQsVUFBb0IsS0FBVTtZQUMxQixJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUMzQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNsQztRQUNMLENBQUM7OztPQU5BOzs7O0lBV0QsMENBQVM7OztJQUFUO0lBQ0EsQ0FBQzs7Z0JBOURKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixRQUFRLEVBQUUsMkJBQTJCO2lCQUN4Qzs7O3VCQW1CSSxLQUFLOztJQXlDViw2QkFBQztDQUFBLEFBL0RELENBSTRDLHdCQUF3QixHQTJEbkU7U0EzRFksc0JBQXNCOzs7Ozs7SUFFL0IsdUNBQW1COzs7OztJQXFEbkIsMENBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWd4RHJvcERvd25JdGVtQ29tcG9uZW50IH0gZnJvbSAnLi8uLi9kcm9wLWRvd24vZHJvcC1kb3duLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7IENvbXBvbmVudCwgRG9DaGVjaywgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtc2VsZWN0LWl0ZW0nLFxuICAgIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgSWd4U2VsZWN0SXRlbUNvbXBvbmVudCBleHRlbmRzIElneERyb3BEb3duSXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIERvQ2hlY2sge1xuXG4gICAgcHJpdmF0ZSBfdGV4dDogYW55O1xuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRoYXQgZ2V0cy9zZXRzIHRoZSBpdGVtJ3MgdGV4dCB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIHNlbGVjdCBjb21wb25lbnQncyBpbnB1dCB3aGVuIHRoZSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICAvL2dldFxuICAgICAqICBsZXQgbXlTZWxlY3RlZEl0ZW0gPSB0aGlzLmRyb3BEb3duLnNlbGVjdGVkSXRlbTtcbiAgICAgKiAgbGV0IHNlbGVjdGVkSXRlbVRleHQgPSBteVNlbGVjdGVkSXRlbS50ZXh0O1xuICAgICAqIGBgYFxuXG4gICAgICogYGBgaHRtbFxuICAgICAqIC8vIHNldFxuICAgICAqIDxpZ3gtc2VsZWN0LWl0ZW0gW3RleHRdPVwiJ0xvbmRvbidcIj48L2lneC1zZWxlY3QtaXRlbT5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBnZXQgdGV4dCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHRleHQodGV4dDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3RleHQgPSB0ZXh0O1xuICAgIH1cblxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHB1YmxpYyBnZXQgaXRlbVRleHQoKSB7XG4gICAgICAgIGlmICh0aGlzLl90ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0O1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRleHQgQElucHV0IGlzIHVuZGVmaW5lZCwgdHJ5IGV4dHJhY3QgYSBtZWFuaW5nZnVsIGl0ZW0gdGV4dCBvdXQgb2YgdGhlIGl0ZW0gdGVtcGxhdGVcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnRleHRDb250ZW50LnRyaW0oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzL0dldHMgaWYgdGhlIGl0ZW0gaXMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBvbmUgaW4gdGhlIHNlbGVjdFxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBsZXQgbXlTZWxlY3RlZEl0ZW0gPSB0aGlzLnNlbGVjdC5zZWxlY3RlZEl0ZW07XG4gICAgICogIGxldCBpc015SXRlbVNlbGVjdGVkID0gbXlTZWxlY3RlZEl0ZW0uc2VsZWN0ZWQ7IC8vIHRydWVcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHNlbGVjdGVkKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNIZWFkZXIgJiYgIXRoaXMuZGlzYWJsZWQgJiYgdGhpcy5zZWxlY3Rpb24uaXNfaXRlbV9zZWxlY3RlZCh0aGlzLmRyb3BEb3duLmlkLCB0aGlzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHNlbGVjdGVkKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgaWYgKHZhbHVlICYmICF0aGlzLmlzSGVhZGVyICYmICF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRyb3BEb3duLnNlbGVjdEl0ZW0odGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwdWJsaWMgaXNIZWFkZXI6IGJvb2xlYW47XG5cbiAgICBuZ0RvQ2hlY2soKTogdm9pZCB7XG4gICAgfVxufVxuIl19