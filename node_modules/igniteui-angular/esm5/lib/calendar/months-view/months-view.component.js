/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ViewChildren, QueryList, ElementRef } from '@angular/core';
import { Calendar } from '../calendar';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxCalendarMonthDirective } from '../calendar.directives';
/** @type {?} */
var NEXT_ID = 0;
var IgxMonthsViewComponent = /** @class */ (function () {
    function IgxMonthsViewComponent(el) {
        this.el = el;
        /**
         * Sets/gets the `id` of the months view.
         * If not set, the `id` will have value `"igx-months-view-0"`.
         * ```html
         * <igx-months-view id="my-months-view"></igx-months-view>
         * ```
         * ```typescript
         * let monthsViewId =  this.monthsView.id;
         * ```
         * \@memberof IgxMonthsViewComponent
         */
        this.id = "igx-months-view-" + NEXT_ID++;
        /**
         * Gets/sets the selected date of the months view.
         * By default it is the current date.
         * ```html
         * <igx-months-view [date]="myDate"></igx-months-view>
         * ```
         * ```typescript
         * let date =  this.monthsView.date;
         * ```
         * \@memberof IgxMonthsViewComponent
         */
        this.date = new Date();
        /**
         * Gets/sets whether the view should be rendered
         * according to the locale and monthFormat, if any.
         */
        this.formatView = true;
        /**
         * Emits an event when a selection is made in the months view.
         * Provides reference the `date` property in the `IgxMonthsViewComponent`.
         * ```html
         * <igx-months-view (onSelection)="onSelection($event)"></igx-months-view>
         * ```
         * \@memberof IgxMonthsViewComponent
         */
        this.onSelection = new EventEmitter();
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.styleClass = true;
        /**
         * The default `tabindex` attribute for the component.
         *
         * @hidden
         */
        this.tabindex = 0;
        /**
         * @hidden
         */
        this._locale = 'en';
        /**
         * @hidden
         */
        this._monthFormat = 'short';
        /**
         * @hidden
         */
        this._onTouchedCallback = function () { };
        /**
         * @hidden
         */
        this._onChangeCallback = function () { };
        this.initMonthFormatter();
        this._calendarModel = new Calendar();
    }
    Object.defineProperty(IgxMonthsViewComponent.prototype, "monthFormat", {
        /**
         * Gets the month format option of the months view.
         * ```typescript
         * let monthFormat = this.monthsView.monthFormat.
         * ```
         */
        get: /**
         * Gets the month format option of the months view.
         * ```typescript
         * let monthFormat = this.monthsView.monthFormat.
         * ```
         * @return {?}
         */
        function () {
            return this._monthFormat;
        },
        /**
         * Sets the month format option of the months view.
         * ```html
         * <igx-months-view> [monthFormat] = "short'"</igx-months-view>
         * ```
         * @memberof IgxMonthsViewComponent
         */
        set: /**
         * Sets the month format option of the months view.
         * ```html
         * <igx-months-view> [monthFormat] = "short'"</igx-months-view>
         * ```
         * \@memberof IgxMonthsViewComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._monthFormat = value;
            this.initMonthFormatter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMonthsViewComponent.prototype, "locale", {
        /**
         * Gets the `locale` of the months view.
         * Default value is `"en"`.
         * ```typescript
         * let locale =  this.monthsView.locale;
         * ```
         * @memberof IgxMonthsViewComponent
         */
        get: /**
         * Gets the `locale` of the months view.
         * Default value is `"en"`.
         * ```typescript
         * let locale =  this.monthsView.locale;
         * ```
         * \@memberof IgxMonthsViewComponent
         * @return {?}
         */
        function () {
            return this._locale;
        },
        /**
         * Sets the `locale` of the months view.
         * Expects a valid BCP 47 language tag.
         * Default value is `"en"`.
         * ```html
         * <igx-months-view [locale]="de"></igx-months-view>
         * ```
         * @memberof IgxMonthsViewComponent
         */
        set: /**
         * Sets the `locale` of the months view.
         * Expects a valid BCP 47 language tag.
         * Default value is `"en"`.
         * ```html
         * <igx-months-view [locale]="de"></igx-months-view>
         * ```
         * \@memberof IgxMonthsViewComponent
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._locale = value;
            this.initMonthFormatter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMonthsViewComponent.prototype, "months", {
        /**
         * Returns an array of date objects which are then used to
         * properly render the month names.
         *
         * Used in the template of the component
         *
         * @hidden
         */
        get: /**
         * Returns an array of date objects which are then used to
         * properly render the month names.
         *
         * Used in the template of the component
         *
         * @hidden
         * @return {?}
         */
        function () {
            /** @type {?} */
            var start = new Date(this.date.getFullYear(), 0, 1);
            /** @type {?} */
            var result = [];
            for (var i = 0; i < 12; i++) {
                result.push(start);
                start = this._calendarModel.timedelta(start, 'month', 1);
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the locale representation of the month in the months view.
     *
     * @hidden
     */
    /**
     * Returns the locale representation of the month in the months view.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.formattedMonth = /**
     * Returns the locale representation of the month in the months view.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.formatView) {
            return this._formatterMonth.format(value);
        }
        return "" + value.getMonth();
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.selectMonth = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onSelection.emit(event);
        this.date = event;
        this._onChangeCallback(this.date);
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.registerOnChange = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChangeCallback = fn;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.registerOnTouched = /**
     * @hidden
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouchedCallback = fn;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.writeValue = /**
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.date = value;
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.monthTracker = /**
     * @hidden
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return item.getMonth() + "}";
    };
    /**
     *@hidden
     */
    /**
     * @hidden
     * @private
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.initMonthFormatter = /**
     * @hidden
     * @private
     * @return {?}
     */
    function () {
        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.onKeydownArrowUp = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        /** @type {?} */
        var node = this.monthsRef.find(function (date) { return date.nativeElement === event.target; });
        if (!node) {
            return;
        }
        /** @type {?} */
        var months = this.monthsRef.toArray();
        /** @type {?} */
        var nodeRect = node.nativeElement.getBoundingClientRect();
        for (var index = months.indexOf(node) - 1; index >= 0; index--) {
            /** @type {?} */
            var nextNodeRect = months[index].nativeElement.getBoundingClientRect();
            /** @type {?} */
            var tolerance = 6;
            if (nodeRect.top !== nextNodeRect.top && (nextNodeRect.left - nodeRect.left) < tolerance) {
                months[index].nativeElement.focus();
                break;
            }
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.onKeydownArrowDown = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        /** @type {?} */
        var node = this.monthsRef.find(function (date) { return date.nativeElement === event.target; });
        if (!node) {
            return;
        }
        /** @type {?} */
        var months = this.monthsRef.toArray();
        /** @type {?} */
        var nodeRect = node.nativeElement.getBoundingClientRect();
        for (var index = months.indexOf(node) + 1; index < months.length; index++) {
            /** @type {?} */
            var nextNodeRect = months[index].nativeElement.getBoundingClientRect();
            /** @type {?} */
            var tolerance = 6;
            if (nextNodeRect.top !== nodeRect.top && (nodeRect.left - nextNodeRect.left) < tolerance) {
                months[index].nativeElement.focus();
                break;
            }
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.onKeydownArrowRight = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        /** @type {?} */
        var node = this.monthsRef.find(function (date) { return date.nativeElement === event.target; });
        if (!node) {
            return;
        }
        /** @type {?} */
        var months = this.monthsRef.toArray();
        if (months.indexOf(node) + 1 < months.length) {
            /** @type {?} */
            var month = months[months.indexOf(node) + 1];
            month.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.onKeydownArrowLeft = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        /** @type {?} */
        var node = this.monthsRef.find(function (date) { return date.nativeElement === event.target; });
        if (!node) {
            return;
        }
        /** @type {?} */
        var months = this.monthsRef.toArray();
        if (months.indexOf(node) - 1 >= 0) {
            /** @type {?} */
            var month = months[months.indexOf(node) - 1];
            month.nativeElement.focus();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.onKeydownHome = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        /** @type {?} */
        var month = this.monthsRef.toArray()[0];
        month.nativeElement.focus();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.onKeydownEnd = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        /** @type {?} */
        var months = this.monthsRef.toArray();
        /** @type {?} */
        var month = months[months.length - 1];
        month.nativeElement.focus();
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMonthsViewComponent.prototype.onKeydownEnter = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = this.monthsRef.find(function (date) { return date.nativeElement === event.target; }).value;
        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());
        this.onSelection.emit(this.date);
        this._onChangeCallback(this.date);
    };
    IgxMonthsViewComponent.decorators = [
        { type: Component, args: [{
                    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],
                    selector: 'igx-months-view',
                    template: "<div class=\"igx-calendar__body\">\n    <div class=\"igx-calendar__body-row--wrap\">\n        <div [igxCalendarMonth]=\"month\" [date]=\"date\" (onMonthSelection)=\"selectMonth($event)\" [index]=\"i\" *ngFor=\"let month of months; index as i; trackBy: monthTracker\">\n            {{ formattedMonth(month) | titlecase }}\n        </div>\n    </div>\n</div>\n\n"
                }] }
    ];
    /** @nocollapse */
    IgxMonthsViewComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    IgxMonthsViewComponent.propDecorators = {
        id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
        date: [{ type: Input }],
        monthFormat: [{ type: Input }],
        locale: [{ type: Input }],
        formatView: [{ type: Input }],
        onSelection: [{ type: Output }],
        styleClass: [{ type: HostBinding, args: ['class.igx-calendar',] }],
        monthsRef: [{ type: ViewChildren, args: [IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective },] }],
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        onKeydownArrowUp: [{ type: HostListener, args: ['keydown.arrowup', ['$event'],] }],
        onKeydownArrowDown: [{ type: HostListener, args: ['keydown.arrowdown', ['$event'],] }],
        onKeydownArrowRight: [{ type: HostListener, args: ['keydown.arrowright', ['$event'],] }],
        onKeydownArrowLeft: [{ type: HostListener, args: ['keydown.arrowleft', ['$event'],] }],
        onKeydownHome: [{ type: HostListener, args: ['keydown.home', ['$event'],] }],
        onKeydownEnd: [{ type: HostListener, args: ['keydown.end', ['$event'],] }],
        onKeydownEnter: [{ type: HostListener, args: ['keydown.enter', ['$event'],] }]
    };
    return IgxMonthsViewComponent;
}());
export { IgxMonthsViewComponent };
if (false) {
    /**
     * Sets/gets the `id` of the months view.
     * If not set, the `id` will have value `"igx-months-view-0"`.
     * ```html
     * <igx-months-view id="my-months-view"></igx-months-view>
     * ```
     * ```typescript
     * let monthsViewId =  this.monthsView.id;
     * ```
     * \@memberof IgxMonthsViewComponent
     * @type {?}
     */
    IgxMonthsViewComponent.prototype.id;
    /**
     * Gets/sets the selected date of the months view.
     * By default it is the current date.
     * ```html
     * <igx-months-view [date]="myDate"></igx-months-view>
     * ```
     * ```typescript
     * let date =  this.monthsView.date;
     * ```
     * \@memberof IgxMonthsViewComponent
     * @type {?}
     */
    IgxMonthsViewComponent.prototype.date;
    /**
     * Gets/sets whether the view should be rendered
     * according to the locale and monthFormat, if any.
     * @type {?}
     */
    IgxMonthsViewComponent.prototype.formatView;
    /**
     * Emits an event when a selection is made in the months view.
     * Provides reference the `date` property in the `IgxMonthsViewComponent`.
     * ```html
     * <igx-months-view (onSelection)="onSelection($event)"></igx-months-view>
     * ```
     * \@memberof IgxMonthsViewComponent
     * @type {?}
     */
    IgxMonthsViewComponent.prototype.onSelection;
    /**
     * The default css class applied to the component.
     *
     * @hidden
     * @type {?}
     */
    IgxMonthsViewComponent.prototype.styleClass;
    /**
     * @hidden
     * @type {?}
     */
    IgxMonthsViewComponent.prototype.monthsRef;
    /**
     * The default `tabindex` attribute for the component.
     *
     * @hidden
     * @type {?}
     */
    IgxMonthsViewComponent.prototype.tabindex;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMonthsViewComponent.prototype._formatterMonth;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMonthsViewComponent.prototype._locale;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMonthsViewComponent.prototype._monthFormat;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMonthsViewComponent.prototype._calendarModel;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMonthsViewComponent.prototype._onTouchedCallback;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMonthsViewComponent.prototype._onChangeCallback;
    /** @type {?} */
    IgxMonthsViewComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,