/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ScrollMonth } from '../calendar-base';
/** @enum {string} */
var Direction = {
    Up: 'ArrowUp',
    Down: 'ArrowDown',
    Left: 'ArrowLeft',
    Right: 'ArrowRight',
};
/** @type {?} */
var ARROW = 'Arrow';
/**
 * @hidden
 */
var IgxDaysViewNavigationService = /** @class */ (function () {
    function IgxDaysViewNavigationService() {
    }
    /**
     * Implements kb navigation in all MoveDirections. nextDate and nextMonthView naming convention is used for both previous/next
     * @hidden
     */
    /**
     * Implements kb navigation in all MoveDirections. nextDate and nextMonthView naming convention is used for both previous/next
     * @hidden
     * @param {?} target
     * @param {?} key
     * @param {?=} nextView
     * @return {?}
     */
    IgxDaysViewNavigationService.prototype.focusNextDate = /**
     * Implements kb navigation in all MoveDirections. nextDate and nextMonthView naming convention is used for both previous/next
     * @hidden
     * @param {?} target
     * @param {?} key
     * @param {?=} nextView
     * @return {?}
     */
    function (target, key, nextView) {
        if (nextView === void 0) { nextView = false; }
        if (target.childElementCount === 0) {
            target = target.parentElement;
        }
        if (key.indexOf('Arrow') === -1) {
            key = ARROW.concat(key);
        }
        /** @type {?} */
        var monthView = this.monthView;
        /** @type {?} */
        var node = monthView.dates.find(function (date) { return date.nativeElement === target; });
        /** @type {?} */
        var dates = monthView.dates.toArray();
        /** @type {?} */
        var day;
        /** @type {?} */
        var step;
        /** @type {?} */
        var i;
        /** @type {?} */
        var nextDate;
        /** @type {?} */
        var index = dates.indexOf(node);
        if (!node) {
            return;
        }
        // focus item in current month
        switch (key) {
            case Direction.Left: {
                step = -1;
                nextDate = this.timedelta(node.date.date, step);
                for (i = index; i > 0; i--) {
                    day = nextView ? dates[i] : dates[i - 1];
                    nextDate = day.date.date;
                    if (day.date.isPrevMonth) {
                        break;
                    }
                    if (day && day.isFocusable) {
                        day.nativeElement.focus();
                        return;
                    }
                }
                break;
            }
            case Direction.Right: {
                step = 1;
                nextDate = this.timedelta(node.date.date, step);
                for (i = index; i < dates.length - 1; i++) {
                    day = nextView ? dates[i] : dates[i + 1];
                    nextDate = day.date.date;
                    if (day.date.isNextMonth) {
                        break;
                    }
                    if (day && day.isFocusable) {
                        day.nativeElement.focus();
                        return;
                    }
                }
                break;
            }
            case Direction.Up: {
                step = -7;
                nextDate = this.timedelta(node.date.date, step);
                for (i = index; i - 7 > -1; i -= 7) {
                    day = nextView ? dates[i] : dates[i - 7];
                    nextDate = day.date.date;
                    if (day.date.isPrevMonth) {
                        break;
                    }
                    if (day && day.isFocusable) {
                        day.nativeElement.focus();
                        return;
                    }
                }
                break;
            }
            case Direction.Down: {
                step = 7;
                nextDate = this.timedelta(node.date.date, step);
                for (i = index; i + 7 < 42; i += 7) {
                    day = nextView ? dates[i] : dates[i + 7];
                    nextDate = day.date.date;
                    if (day.date.isNextMonth) {
                        break;
                    }
                    if (day && day.isFocusable) {
                        day.nativeElement.focus();
                        return;
                    }
                }
                break;
            }
        }
        // focus item in prev/next visible month
        /** @type {?} */
        var nextMonthView = step > 0 ? monthView.nextMonthView : monthView.prevMonthView;
        if (nextMonthView) {
            dates = nextMonthView.dates.toArray();
            day = dates.find(function (item) { return item.date.date.getTime() === nextDate.getTime(); });
            if (day && day.isFocusable) {
                day.nativeElement.focus();
                return;
            }
            nextMonthView.daysNavService.focusNextDate(day.nativeElement, key);
        }
        // if iterating in the visible prev/next moths above found a day that is not focusable, ie is disabled, hidden, etc
        // then it is needed to recalculate the next day, which is going to be part of the prev/next months
        if (day && !day.isFocusable) {
            day = dates[i + step];
            if (!day) {
                nextDate = this.timedelta(node.date.date, step + i - index);
            }
        }
        // focus item in prev/next month, which is currently out of view
        /** @type {?} */
        var dayIsNextMonth;
        if (day) {
            dayIsNextMonth = step > 0 ? day.date.isNextMonth : day.date.isPrevMonth;
        }
        if (monthView.changeDaysView && !nextMonthView && ((day && dayIsNextMonth) || !day)) {
            /** @type {?} */
            var monthAction = step > 0 ? ScrollMonth.NEXT : ScrollMonth.PREV;
            monthView.onViewChanging.emit({ monthAction: monthAction, key: key, nextDate: nextDate });
        }
    };
    /**
     * Focuses first focusable day in the month. Will go to next visible month, if no day in the first month is focusable
     * @hidden
     */
    /**
     * Focuses first focusable day in the month. Will go to next visible month, if no day in the first month is focusable
     * @hidden
     * @return {?}
     */
    IgxDaysViewNavigationService.prototype.focusHomeDate = /**
     * Focuses first focusable day in the month. Will go to next visible month, if no day in the first month is focusable
     * @hidden
     * @return {?}
     */
    function () {
        /** @type {?} */
        var monthView = this.monthView;
        while (!this.focusFirstDay(monthView) && monthView.nextMonthView) {
            monthView = monthView.nextMonthView;
        }
    };
    /**
     * Focuses last focusable day in the month. Will go to previous visible month, if no day in the first month is focusable
     * @hidden
     */
    /**
     * Focuses last focusable day in the month. Will go to previous visible month, if no day in the first month is focusable
     * @hidden
     * @return {?}
     */
    IgxDaysViewNavigationService.prototype.focusEndDate = /**
     * Focuses last focusable day in the month. Will go to previous visible month, if no day in the first month is focusable
     * @hidden
     * @return {?}
     */
    function () {
        /** @type {?} */
        var monthView = this.monthView;
        while (!this.focusLastDay(monthView) && monthView.prevMonthView) {
            monthView = monthView.prevMonthView;
        }
    };
    /**
     * @private
     * @param {?} date
     * @param {?} units
     * @return {?}
     */
    IgxDaysViewNavigationService.prototype.timedelta = /**
     * @private
     * @param {?} date
     * @param {?} units
     * @return {?}
     */
    function (date, units) {
        /** @type {?} */
        var ret = new Date(date);
        ret.setDate(ret.getDate() + units);
        return ret;
    };
    /**
     * @private
     * @param {?} monthView
     * @return {?}
     */
    IgxDaysViewNavigationService.prototype.focusFirstDay = /**
     * @private
     * @param {?} monthView
     * @return {?}
     */
    function (monthView) {
        /** @type {?} */
        var dates = monthView.dates.filter(function (d) { return d.isCurrentMonth; });
        for (var i = 0; i < dates.length; i++) {
            if (dates[i].isFocusable) {
                dates[i].nativeElement.focus();
                return true;
            }
        }
        return false;
    };
    /**
     * @private
     * @param {?} monthView
     * @return {?}
     */
    IgxDaysViewNavigationService.prototype.focusLastDay = /**
     * @private
     * @param {?} monthView
     * @return {?}
     */
    function (monthView) {
        /** @type {?} */
        var dates = monthView.dates.filter(function (d) { return d.isCurrentMonth; });
        for (var i = dates.length - 1; i >= 0; i--) {
            if (dates[i].isFocusable) {
                dates[i].nativeElement.focus();
                return true;
            }
        }
        return false;
    };
    IgxDaysViewNavigationService.decorators = [
        { type: Injectable }
    ];
    return IgxDaysViewNavigationService;
}());
export { IgxDaysViewNavigationService };
if (false) {
    /** @type {?} */
    IgxDaysViewNavigationService.prototype.monthView;
}
//# sourceMappingURL=data:application/json;base64,