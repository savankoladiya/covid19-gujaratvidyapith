/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { Calendar } from './calendar';
var IgxMonthViewSlotsCalendar = /** @class */ (function () {
    function IgxMonthViewSlotsCalendar() {
    }
    /**
     * @param {?} monthViews
     * @return {?}
     */
    IgxMonthViewSlotsCalendar.prototype.transform = /**
     * @param {?} monthViews
     * @return {?}
     */
    function (monthViews) {
        return new Array(monthViews);
    };
    IgxMonthViewSlotsCalendar.decorators = [
        { type: Pipe, args: [{
                    name: 'IgxMonthViewSlots'
                },] }
    ];
    return IgxMonthViewSlotsCalendar;
}());
export { IgxMonthViewSlotsCalendar };
var IgxGetViewDateCalendar = /** @class */ (function () {
    function IgxGetViewDateCalendar() {
        this.calendar = new Calendar();
    }
    /**
     * @param {?} index
     * @param {?} viewDate
     * @param {?=} wholeDate
     * @return {?}
     */
    IgxGetViewDateCalendar.prototype.transform = /**
     * @param {?} index
     * @param {?} viewDate
     * @param {?=} wholeDate
     * @return {?}
     */
    function (index, viewDate, wholeDate) {
        if (wholeDate === void 0) { wholeDate = true; }
        /** @type {?} */
        var date = this.calendar.timedelta(viewDate, 'month', index);
        return wholeDate ? date : date.getMonth();
    };
    IgxGetViewDateCalendar.decorators = [
        { type: Pipe, args: [{
                    name: 'IgxGetViewDate'
                },] }
    ];
    /** @nocollapse */
    IgxGetViewDateCalendar.ctorParameters = function () { return []; };
    return IgxGetViewDateCalendar;
}());
export { IgxGetViewDateCalendar };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxGetViewDateCalendar.prototype.calendar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGhzLXZpZXcucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvY2FsZW5kYXIvbW9udGhzLXZpZXcucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUV0QztJQUFBO0lBT0EsQ0FBQzs7Ozs7SUFIVSw2Q0FBUzs7OztJQUFoQixVQUFpQixVQUFrQjtRQUMvQixPQUFPLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7O2dCQU5KLElBQUksU0FBQztvQkFDRixJQUFJLEVBQUUsbUJBQW1CO2lCQUM1Qjs7SUFLRCxnQ0FBQztDQUFBLEFBUEQsSUFPQztTQUpZLHlCQUF5QjtBQU10QztJQUtJO1FBQ0ksSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQ25DLENBQUM7Ozs7Ozs7SUFDTSwwQ0FBUzs7Ozs7O0lBQWhCLFVBQWlCLEtBQWEsRUFBRSxRQUFjLEVBQUUsU0FBZ0I7UUFBaEIsMEJBQUEsRUFBQSxnQkFBZ0I7O1lBQ3RELElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQztRQUM5RCxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7Z0JBWEosSUFBSSxTQUFDO29CQUNGLElBQUksRUFBRSxnQkFBZ0I7aUJBQ3pCOzs7O0lBVUQsNkJBQUM7Q0FBQSxBQVpELElBWUM7U0FUWSxzQkFBc0I7Ozs7OztJQUMvQiwwQ0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYWxlbmRhciB9IGZyb20gJy4vY2FsZW5kYXInO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogJ0lneE1vbnRoVmlld1Nsb3RzJ1xufSlcbmV4cG9ydCBjbGFzcyBJZ3hNb250aFZpZXdTbG90c0NhbGVuZGFyIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHVibGljIHRyYW5zZm9ybShtb250aFZpZXdzOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheShtb250aFZpZXdzKTtcbiAgICB9XG59XG5cbkBQaXBlKHtcbiAgICBuYW1lOiAnSWd4R2V0Vmlld0RhdGUnXG59KVxuZXhwb3J0IGNsYXNzIElneEdldFZpZXdEYXRlQ2FsZW5kYXIgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICBwcml2YXRlIGNhbGVuZGFyOiBDYWxlbmRhcjtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jYWxlbmRhciA9IG5ldyBDYWxlbmRhcigpO1xuICAgIH1cbiAgICBwdWJsaWMgdHJhbnNmb3JtKGluZGV4OiBudW1iZXIsIHZpZXdEYXRlOiBEYXRlLCB3aG9sZURhdGUgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSB0aGlzLmNhbGVuZGFyLnRpbWVkZWx0YSh2aWV3RGF0ZSwgJ21vbnRoJywgaW5kZXgpO1xuICAgICAgICByZXR1cm4gd2hvbGVEYXRlID8gZGF0ZSA6IGRhdGUuZ2V0TW9udGgoKTtcbiAgICB9XG59XG4iXX0=