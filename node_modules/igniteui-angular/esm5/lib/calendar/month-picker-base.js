/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IgxCalendarBase } from './calendar-base';
import { HostBinding, ViewChildren, QueryList } from '@angular/core';
/** @enum {number} */
var CalendarView = {
    DEFAULT: 0,
    YEAR: 1,
    DECADE: 2,
};
export { CalendarView };
CalendarView[CalendarView.DEFAULT] = 'DEFAULT';
CalendarView[CalendarView.YEAR] = 'YEAR';
CalendarView[CalendarView.DECADE] = 'DECADE';
var IgxMonthPickerBase = /** @class */ (function (_super) {
    tslib_1.__extends(IgxMonthPickerBase, _super);
    function IgxMonthPickerBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Holds month view index we are operating on.
         */
        _this.activeViewIdx = 0;
        /**
         * The default `tabindex` attribute for the component.
         *
         * @hidden
         */
        _this.tabindex = 0;
        /**
         * @hidden
         */
        _this._activeView = CalendarView.DEFAULT;
        return _this;
    }
    Object.defineProperty(IgxMonthPickerBase.prototype, "activeView", {
        /**
         * Gets the current active view.
         */
        get: /**
         * Gets the current active view.
         * @return {?}
         */
        function () {
            return this._activeView;
        },
        /**
         * Sets the current active view.
         */
        set: /**
         * Sets the current active view.
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._activeView = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMonthPickerBase.prototype, "isDefaultView", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._activeView === CalendarView.DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxMonthPickerBase.prototype, "isDecadeView", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return this._activeView === CalendarView.DECADE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    IgxMonthPickerBase.prototype.changeYear = /**
     * @hidden
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.viewDate = this.calendarModel.getFirstViewDate(event, 'month', this.activeViewIdx);
        this.activeView = CalendarView.DEFAULT;
        requestAnimationFrame(function () {
            if (_this.yearsBtns && _this.yearsBtns.length) {
                _this.yearsBtns.find(function (e, idx) { return idx === _this.activeViewIdx; }).nativeElement.focus();
            }
        });
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?=} activeViewIdx
     * @return {?}
     */
    IgxMonthPickerBase.prototype.activeViewDecade = /**
     * @hidden
     * @param {?=} activeViewIdx
     * @return {?}
     */
    function (activeViewIdx) {
        if (activeViewIdx === void 0) { activeViewIdx = 0; }
        this._activeView = CalendarView.DECADE;
        this.activeViewIdx = activeViewIdx;
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @param {?=} activeViewIdx
     * @return {?}
     */
    IgxMonthPickerBase.prototype.activeViewDecadeKB = /**
     * @hidden
     * @param {?} event
     * @param {?=} activeViewIdx
     * @return {?}
     */
    function (event, activeViewIdx) {
        if (activeViewIdx === void 0) { activeViewIdx = 0; }
        if (event.key === " " /* SPACE */ || event.key === "Spacebar" /* SPACE_IE */ || event.key === "Enter" /* ENTER */) {
            event.preventDefault();
            this.activeViewDecade(activeViewIdx);
        }
    };
    /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     */
    /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    IgxMonthPickerBase.prototype.formattedYear = /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.formatViews.year) {
            return this.formatterYear.format(value);
        }
        return "" + value.getFullYear();
    };
    IgxMonthPickerBase.propDecorators = {
        tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
        yearsBtns: [{ type: ViewChildren, args: ['yearsBtn',] }]
    };
    return IgxMonthPickerBase;
}(IgxCalendarBase));
export { IgxMonthPickerBase };
if (false) {
    /**
     * Holds month view index we are operating on.
     * @type {?}
     * @protected
     */
    IgxMonthPickerBase.prototype.activeViewIdx;
    /**
     * The default `tabindex` attribute for the component.
     *
     * @hidden
     * @type {?}
     */
    IgxMonthPickerBase.prototype.tabindex;
    /**
     * @hidden
     * @type {?}
     */
    IgxMonthPickerBase.prototype.yearsBtns;
    /**
     * @hidden
     * @type {?}
     * @private
     */
    IgxMonthPickerBase.prototype._activeView;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGgtcGlja2VyLWJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9pZ25pdGV1aS1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2NhbGVuZGFyL21vbnRoLXBpY2tlci1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFjLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0lBTzdFLFVBQU87SUFDUCxPQUFJO0lBQ0osU0FBTTs7Ozs7O0FBRVY7SUFBd0MsOENBQWU7SUFBdkQ7UUFBQSxxRUFtR0M7Ozs7UUE5RmEsbUJBQWEsR0FBRyxDQUFDLENBQUM7Ozs7OztRQVFyQixjQUFRLEdBQUcsQ0FBQyxDQUFDOzs7O1FBd0NaLGlCQUFXLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQzs7SUE4Qy9DLENBQUM7SUExRUcsc0JBQVcsMENBQVU7UUFIckI7O1dBRUc7Ozs7O1FBQ0g7WUFDSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDNUIsQ0FBQztRQUVEOztXQUVHOzs7Ozs7UUFDSCxVQUFzQixHQUFpQjtZQUNuQyxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztRQUMzQixDQUFDOzs7T0FQQTtJQVlELHNCQUFXLDZDQUFhO1FBSHhCOztXQUVHOzs7OztRQUNIO1lBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxLQUFLLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFDckQsQ0FBQzs7O09BQUE7SUFLRCxzQkFBVyw0Q0FBWTtRQUh2Qjs7V0FFRzs7Ozs7UUFDSDtZQUNJLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQ3BELENBQUM7OztPQUFBO0lBT0Q7O09BRUc7Ozs7OztJQUNJLHVDQUFVOzs7OztJQUFqQixVQUFrQixLQUFXO1FBQTdCLGlCQVNDO1FBUkcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3hGLElBQUksQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUV2QyxxQkFBcUIsQ0FBQztZQUNsQixJQUFJLEtBQUksQ0FBQyxTQUFTLElBQUksS0FBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3pDLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBYSxFQUFFLEdBQVcsSUFBSyxPQUFBLEdBQUcsS0FBSyxLQUFJLENBQUMsYUFBYSxFQUExQixDQUEwQixDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ3pHO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7O09BRUc7Ozs7OztJQUNJLDZDQUFnQjs7Ozs7SUFBdkIsVUFBd0IsYUFBaUI7UUFBakIsOEJBQUEsRUFBQSxpQkFBaUI7UUFDckMsSUFBSSxDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7T0FFRzs7Ozs7OztJQUNJLCtDQUFrQjs7Ozs7O0lBQXpCLFVBQTBCLEtBQUssRUFBRSxhQUFpQjtRQUFqQiw4QkFBQSxFQUFBLGlCQUFpQjtRQUM5QyxJQUFJLEtBQUssQ0FBQyxHQUFHLG9CQUFlLElBQUksS0FBSyxDQUFDLEdBQUcsOEJBQWtCLElBQUksS0FBSyxDQUFDLEdBQUcsd0JBQWUsRUFBRTtZQUNyRixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQztJQUVEOzs7OztPQUtHOzs7Ozs7Ozs7SUFDSSwwQ0FBYTs7Ozs7Ozs7SUFBcEIsVUFBcUIsS0FBVztRQUM1QixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLEtBQUcsS0FBSyxDQUFDLFdBQVcsRUFBSSxDQUFDO0lBQ3BDLENBQUM7OzJCQXRGQSxXQUFXLFNBQUMsZUFBZTs0QkFNM0IsWUFBWSxTQUFDLFVBQVU7O0lBaUY1Qix5QkFBQztDQUFBLEFBbkdELENBQXdDLGVBQWUsR0FtR3REO1NBbkdZLGtCQUFrQjs7Ozs7OztJQUszQiwyQ0FBNEI7Ozs7Ozs7SUFPNUIsc0NBQ29COzs7OztJQUtwQix1Q0FDd0M7Ozs7OztJQWtDeEMseUNBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWd4Q2FsZW5kYXJCYXNlIH0gZnJvbSAnLi9jYWxlbmRhci1iYXNlJztcbmltcG9ydCB7IEhvc3RCaW5kaW5nLCBWaWV3Q2hpbGRyZW4sIEVsZW1lbnRSZWYsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgS0VZUyB9IGZyb20gJy4uL2NvcmUvdXRpbHMnO1xuXG4vKipcbiAqIFNldHMgdGhlIGNhbGVuZGVyIHZpZXcgLSBkYXlzLCBtb250aHMgb3IgeWVhcnMuXG4gKi9cbmV4cG9ydCBlbnVtIENhbGVuZGFyVmlldyB7XG4gICAgREVGQVVMVCxcbiAgICBZRUFSLFxuICAgIERFQ0FERVxufVxuZXhwb3J0IGNsYXNzIElneE1vbnRoUGlja2VyQmFzZSBleHRlbmRzIElneENhbGVuZGFyQmFzZSB7XG5cbiAgICAvKipcbiAgICAgKiBIb2xkcyBtb250aCB2aWV3IGluZGV4IHdlIGFyZSBvcGVyYXRpbmcgb24uXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGFjdGl2ZVZpZXdJZHggPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgYHRhYmluZGV4YCBhdHRyaWJ1dGUgZm9yIHRoZSBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnRhYmluZGV4JylcbiAgICBwdWJsaWMgdGFiaW5kZXggPSAwO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIEBWaWV3Q2hpbGRyZW4oJ3llYXJzQnRuJylcbiAgICBwdWJsaWMgeWVhcnNCdG5zOiBRdWVyeUxpc3Q8RWxlbWVudFJlZj47XG5cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgYWN0aXZlIHZpZXcuXG4gICAgICovXG4gICAgcHVibGljIGdldCBhY3RpdmVWaWV3KCk6IENhbGVuZGFyVmlldyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVWaWV3O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgYWN0aXZlIHZpZXcuXG4gICAgICovXG4gICAgcHVibGljIHNldCBhY3RpdmVWaWV3KHZhbDogQ2FsZW5kYXJWaWV3KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVZpZXcgPSB2YWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgaXNEZWZhdWx0VmlldygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVZpZXcgPT09IENhbGVuZGFyVmlldy5ERUZBVUxUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGlzRGVjYWRlVmlldygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVZpZXcgPT09IENhbGVuZGFyVmlldy5ERUNBREU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfYWN0aXZlVmlldyA9IENhbGVuZGFyVmlldy5ERUZBVUxUO1xuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBjaGFuZ2VZZWFyKGV2ZW50OiBEYXRlKSB7XG4gICAgICAgIHRoaXMudmlld0RhdGUgPSB0aGlzLmNhbGVuZGFyTW9kZWwuZ2V0Rmlyc3RWaWV3RGF0ZShldmVudCwgJ21vbnRoJywgdGhpcy5hY3RpdmVWaWV3SWR4KTtcbiAgICAgICAgdGhpcy5hY3RpdmVWaWV3ID0gQ2FsZW5kYXJWaWV3LkRFRkFVTFQ7XG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnllYXJzQnRucyAmJiB0aGlzLnllYXJzQnRucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnllYXJzQnRucy5maW5kKChlOiBFbGVtZW50UmVmLCBpZHg6IG51bWJlcikgPT4gaWR4ID09PSB0aGlzLmFjdGl2ZVZpZXdJZHgpLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBhY3RpdmVWaWV3RGVjYWRlKGFjdGl2ZVZpZXdJZHggPSAwKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVZpZXcgPSBDYWxlbmRhclZpZXcuREVDQURFO1xuICAgICAgICB0aGlzLmFjdGl2ZVZpZXdJZHggPSBhY3RpdmVWaWV3SWR4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aXZlVmlld0RlY2FkZUtCKGV2ZW50LCBhY3RpdmVWaWV3SWR4ID0gMCkge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBLRVlTLlNQQUNFIHx8IGV2ZW50LmtleSA9PT0gS0VZUy5TUEFDRV9JRSB8fCBldmVudC5rZXkgPT09IEtFWVMuRU5URVIpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVZpZXdEZWNhZGUoYWN0aXZlVmlld0lkeCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsb2NhbGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIHllYXIgaW4gdGhlIHllYXIgdmlldyBpZiBlbmFibGVkLFxuICAgICAqIG90aGVyd2lzZSByZXR1cm5zIHRoZSBkZWZhdWx0IGBEYXRlLmdldEZ1bGxZZWFyKClgIHZhbHVlLlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBmb3JtYXR0ZWRZZWFyKHZhbHVlOiBEYXRlKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybWF0Vmlld3MueWVhcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyWWVhci5mb3JtYXQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHt2YWx1ZS5nZXRGdWxsWWVhcigpfWA7XG4gICAgfVxufVxuIl19