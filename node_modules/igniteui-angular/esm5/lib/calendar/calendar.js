/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DateRangeType } from '../core/dates';
/** @enum {string} */
var TimeDeltaInterval = {
    Month: 'month',
    Year: 'year',
};
/** @type {?} */
var MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
/** @type {?} */
var FEBRUARY = 1;
/**
 * @param {?=} start
 * @param {?=} stop
 * @param {?=} step
 * @return {?}
 */
export function range(start, stop, step) {
    if (start === void 0) { start = 0; }
    if (step === void 0) { step = 1; }
    /** @type {?} */
    var res = [];
    /** @type {?} */
    var cur = (stop === undefined) ? 0 : start;
    /** @type {?} */
    var max = (stop === undefined) ? start : stop;
    for (var i = cur; step < 0 ? i > max : i < max; i += step) {
        res.push(i);
    }
    return res;
}
/**
 * Returns true for leap years, false for non-leap years.
 *
 * @export
 * @param {?} year
 * @return {?}
 */
export function isLeap(year) {
    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));
}
/**
 * @param {?} year
 * @param {?} month
 * @param {?} day
 * @return {?}
 */
export function weekDay(year, month, day) {
    return new Date(year, month, day).getDay();
}
/**
 * Return weekday and number of days for year, month.
 *
 * @export
 * @param {?} year
 * @param {?} month
 * @return {?}
 */
export function monthRange(year, month) {
    if ((month < 0) || (month > 11)) {
        throw new Error('Invalid month specified');
    }
    /** @type {?} */
    var day = weekDay(year, month, 1);
    /** @type {?} */
    var nDays = MDAYS[month];
    if ((month === FEBRUARY) && (isLeap(year))) {
        nDays++;
    }
    return [day, nDays];
}
/**
 * @param {?} date
 * @param {?} ranges
 * @return {?}
 */
export function isDateInRanges(date, ranges) {
    var e_1, _a, e_2, _b;
    date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    /** @type {?} */
    var dateInMs = date.getTime();
    if (!ranges) {
        return false;
    }
    try {
        for (var ranges_1 = tslib_1.__values(ranges), ranges_1_1 = ranges_1.next(); !ranges_1_1.done; ranges_1_1 = ranges_1.next()) {
            var descriptor = ranges_1_1.value;
            /** @type {?} */
            var dRanges = descriptor.dateRange ? descriptor.dateRange.map(function (r) { return new Date(r.getFullYear(), r.getMonth(), r.getDate()); }) : undefined;
            switch (descriptor.type) {
                case (DateRangeType.After):
                    if (dateInMs > dRanges[0].getTime()) {
                        return true;
                    }
                    break;
                case (DateRangeType.Before):
                    if (dateInMs < dRanges[0].getTime()) {
                        return true;
                    }
                    break;
                case (DateRangeType.Between):
                    /** @type {?} */
                    var dRange = dRanges.map(function (d) { return d.getTime(); });
                    /** @type {?} */
                    var min = Math.min(dRange[0], dRange[1]);
                    /** @type {?} */
                    var max = Math.max(dRange[0], dRange[1]);
                    if (dateInMs >= min && dateInMs <= max) {
                        return true;
                    }
                    break;
                case (DateRangeType.Specific):
                    /** @type {?} */
                    var datesInMs = dRanges.map(function (d) { return d.getTime(); });
                    try {
                        for (var datesInMs_1 = tslib_1.__values(datesInMs), datesInMs_1_1 = datesInMs_1.next(); !datesInMs_1_1.done; datesInMs_1_1 = datesInMs_1.next()) {
                            var specificDateInMs = datesInMs_1_1.value;
                            if (dateInMs === specificDateInMs) {
                                return true;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (datesInMs_1_1 && !datesInMs_1_1.done && (_b = datesInMs_1.return)) _b.call(datesInMs_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    break;
                case (DateRangeType.Weekdays):
                    /** @type {?} */
                    var day = date.getDay();
                    if (day % 6 !== 0) {
                        return true;
                    }
                    break;
                case (DateRangeType.Weekends):
                    /** @type {?} */
                    var weekday = date.getDay();
                    if (weekday % 6 === 0) {
                        return true;
                    }
                    break;
                default:
                    return false;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (ranges_1_1 && !ranges_1_1.done && (_a = ranges_1.return)) _a.call(ranges_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
/**
 * @record
 */
export function ICalendarDate() { }
if (false) {
    /** @type {?} */
    ICalendarDate.prototype.date;
    /** @type {?} */
    ICalendarDate.prototype.isCurrentMonth;
    /** @type {?} */
    ICalendarDate.prototype.isPrevMonth;
    /** @type {?} */
    ICalendarDate.prototype.isNextMonth;
}
/**
 * @record
 */
export function IFormattedParts() { }
if (false) {
    /** @type {?} */
    IFormattedParts.prototype.value;
    /** @type {?|undefined} */
    IFormattedParts.prototype.literal;
    /** @type {?} */
    IFormattedParts.prototype.combined;
}
/**
 * @record
 */
export function IFormattingOptions() { }
if (false) {
    /** @type {?|undefined} */
    IFormattingOptions.prototype.day;
    /** @type {?|undefined} */
    IFormattingOptions.prototype.month;
    /** @type {?|undefined} */
    IFormattingOptions.prototype.weekday;
    /** @type {?|undefined} */
    IFormattingOptions.prototype.year;
}
/**
 * @record
 */
export function IFormattingViews() { }
if (false) {
    /** @type {?|undefined} */
    IFormattingViews.prototype.day;
    /** @type {?|undefined} */
    IFormattingViews.prototype.month;
    /** @type {?|undefined} */
    IFormattingViews.prototype.year;
}
/** @enum {number} */
var WEEKDAYS = {
    SUNDAY: 0,
    MONDAY: 1,
    TUESDAY: 2,
    WEDNESDAY: 3,
    THURSDAY: 4,
    FRIDAY: 5,
    SATURDAY: 6,
};
export { WEEKDAYS };
WEEKDAYS[WEEKDAYS.SUNDAY] = 'SUNDAY';
WEEKDAYS[WEEKDAYS.MONDAY] = 'MONDAY';
WEEKDAYS[WEEKDAYS.TUESDAY] = 'TUESDAY';
WEEKDAYS[WEEKDAYS.WEDNESDAY] = 'WEDNESDAY';
WEEKDAYS[WEEKDAYS.THURSDAY] = 'THURSDAY';
WEEKDAYS[WEEKDAYS.FRIDAY] = 'FRIDAY';
WEEKDAYS[WEEKDAYS.SATURDAY] = 'SATURDAY';
var Calendar = /** @class */ (function () {
    function Calendar(firstWeekDay) {
        if (firstWeekDay === void 0) { firstWeekDay = WEEKDAYS.SUNDAY; }
        this._firstWeekDay = firstWeekDay;
    }
    Object.defineProperty(Calendar.prototype, "firstWeekDay", {
        get: /**
         * @return {?}
         */
        function () {
            return this._firstWeekDay % 7;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._firstWeekDay = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns an array of weekdays for one week starting
     * with the currently set `firstWeekDay`
     *
     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]
     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]
     *
     * @returns
     *
     * @memberof Calendar
     */
    /**
     * Returns an array of weekdays for one week starting
     * with the currently set `firstWeekDay`
     *
     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]
     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]
     *
     * \@memberof Calendar
     * @return {?}
     *
     */
    Calendar.prototype.weekdays = /**
     * Returns an array of weekdays for one week starting
     * with the currently set `firstWeekDay`
     *
     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]
     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]
     *
     * \@memberof Calendar
     * @return {?}
     *
     */
    function () {
        var e_3, _a;
        /** @type {?} */
        var res = [];
        try {
            for (var _b = tslib_1.__values(range(this.firstWeekDay, this.firstWeekDay + 7)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var i = _c.value;
                res.push(i % 7);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return res;
    };
    /**
     * Returns the date values for one month. It will always iterate throught
     * complete weeks, so it will contain dates outside the specified month.
     *
     * @param year
     * @param month
     * @param boolean
     * @returns
     *
     * @memberof Calendar
     */
    /**
     * Returns the date values for one month. It will always iterate throught
     * complete weeks, so it will contain dates outside the specified month.
     *
     * \@memberof Calendar
     * @param {?} year
     * @param {?} month
     * @param {?=} extraWeek
     * @return {?}
     *
     */
    Calendar.prototype.monthdates = /**
     * Returns the date values for one month. It will always iterate throught
     * complete weeks, so it will contain dates outside the specified month.
     *
     * \@memberof Calendar
     * @param {?} year
     * @param {?} month
     * @param {?=} extraWeek
     * @return {?}
     *
     */
    function (year, month, extraWeek) {
        var e_4, _a;
        if (extraWeek === void 0) { extraWeek = false; }
        /** @type {?} */
        var date = new Date(year, month, 1);
        /** @type {?} */
        var days = (date.getDay() - this.firstWeekDay) % 7;
        if (days < 0) {
            days = 7 - Math.abs(days);
        }
        date = this.timedelta(date, 'day', -days);
        /** @type {?} */
        var res = [];
        /** @type {?} */
        var value;
        while (true) {
            value = this.generateICalendarDate(date, year, month);
            res.push(value);
            date = this.timedelta(date, 'day', 1);
            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {
                if (extraWeek && res.length <= 35) {
                    try {
                        for (var _b = tslib_1.__values(range(0, 7)), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var _ = _c.value;
                            value = this.generateICalendarDate(date, year, month);
                            res.push(value);
                            date = this.timedelta(date, 'day', 1);
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
                break;
            }
        }
        return res;
    };
    /**
     * Returns a matrix (array of arrays) representing a month's calendar.
     * Each row represents a full week; week entries are ICalendarDate objects.
     *
     * @param year
     * @param month
     * @returns
     *
     * @memberof Calendar
     */
    /**
     * Returns a matrix (array of arrays) representing a month's calendar.
     * Each row represents a full week; week entries are ICalendarDate objects.
     *
     * \@memberof Calendar
     * @param {?} year
     * @param {?} month
     * @param {?=} extraWeek
     * @return {?}
     *
     */
    Calendar.prototype.monthdatescalendar = /**
     * Returns a matrix (array of arrays) representing a month's calendar.
     * Each row represents a full week; week entries are ICalendarDate objects.
     *
     * \@memberof Calendar
     * @param {?} year
     * @param {?} month
     * @param {?=} extraWeek
     * @return {?}
     *
     */
    function (year, month, extraWeek) {
        var e_5, _a;
        if (extraWeek === void 0) { extraWeek = false; }
        /** @type {?} */
        var dates = this.monthdates(year, month, extraWeek);
        /** @type {?} */
        var res = [];
        try {
            for (var _b = tslib_1.__values(range(0, dates.length, 7)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var i = _c.value;
                res.push(dates.slice(i, i + 7));
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return res;
    };
    /**
     * @param {?} date
     * @param {?} interval
     * @param {?} units
     * @return {?}
     */
    Calendar.prototype.timedelta = /**
     * @param {?} date
     * @param {?} interval
     * @param {?} units
     * @return {?}
     */
    function (date, interval, units) {
        /** @type {?} */
        var ret = new Date(date);
        /** @type {?} */
        var checkRollover = function () {
            if (ret.getDate() !== date.getDate()) {
                ret.setDate(0);
            }
        };
        switch (interval.toLowerCase()) {
            case 'year':
                ret.setFullYear(ret.getFullYear() + units);
                checkRollover();
                break;
            case 'quarter':
                ret.setMonth(ret.getMonth() + 3 * units);
                checkRollover();
                break;
            case 'month':
                ret.setMonth(ret.getMonth() + units);
                checkRollover();
                break;
            case 'week':
                ret.setDate(ret.getDate() + 7 * units);
                break;
            case 'day':
                ret.setDate(ret.getDate() + units);
                break;
            case 'hour':
                ret.setTime(ret.getTime() + units * 3600000);
                break;
            case 'minute':
                ret.setTime(ret.getTime() + units * 60000);
                break;
            case 'second':
                ret.setTime(ret.getTime() + units * 1000);
                break;
            default:
                throw new Error('Invalid interval specifier');
        }
        return ret;
    };
    /**
     * @param {?} date
     * @param {?} locale
     * @param {?} options
     * @param {?} parts
     * @return {?}
     */
    Calendar.prototype.formatToParts = /**
     * @param {?} date
     * @param {?} locale
     * @param {?} options
     * @param {?} parts
     * @return {?}
     */
    function (date, locale, options, parts) {
        var e_6, _a, e_7, _b;
        /** @type {?} */
        var formatter = new Intl.DateTimeFormat(locale, options);
        /** @type {?} */
        var result = {
            date: date,
            full: formatter.format(date)
        };
        if (((/** @type {?} */ (formatter))).formatToParts) {
            /** @type {?} */
            var formattedParts_1 = ((/** @type {?} */ (formatter))).formatToParts(date);
            /** @type {?} */
            var toType = function (partType) {
                /** @type {?} */
                var index = formattedParts_1.findIndex(function (_a) {
                    var type = _a.type;
                    return type === partType;
                });
                /** @type {?} */
                var o = { value: '', literal: '', combined: '' };
                if (partType === 'era' && index > -1) {
                    o.value = formattedParts_1[index].value;
                    return o;
                }
                else if (partType === 'era' && index === -1) {
                    return o;
                }
                o.value = formattedParts_1[index].value;
                o.literal = formattedParts_1[index + 1] ? formattedParts_1[index + 1].value : '';
                o.combined = [o.value, o.literal].join('');
                return o;
            };
            try {
                for (var parts_1 = tslib_1.__values(parts), parts_1_1 = parts_1.next(); !parts_1_1.done; parts_1_1 = parts_1.next()) {
                    var each = parts_1_1.value;
                    result[each] = toType(each);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        else {
            try {
                for (var parts_2 = tslib_1.__values(parts), parts_2_1 = parts_2.next(); !parts_2_1.done; parts_2_1 = parts_2.next()) {
                    var each = parts_2_1.value;
                    result[each] = { value: '', literal: '', combined: '' };
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (parts_2_1 && !parts_2_1.done && (_b = parts_2.return)) _b.call(parts_2);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
        return result;
    };
    /**
     * @param {?} date
     * @param {?} interval
     * @param {?} activeViewIdx
     * @return {?}
     */
    Calendar.prototype.getFirstViewDate = /**
     * @param {?} date
     * @param {?} interval
     * @param {?} activeViewIdx
     * @return {?}
     */
    function (date, interval, activeViewIdx) {
        return this.timedelta(date, interval, -activeViewIdx);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    Calendar.prototype.getNextMonth = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.timedelta(date, TimeDeltaInterval.Month, 1);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    Calendar.prototype.getPrevMonth = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.timedelta(date, TimeDeltaInterval.Month, -1);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    Calendar.prototype.getNextYear = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.timedelta(date, TimeDeltaInterval.Year, 1);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    Calendar.prototype.getPrevYear = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.timedelta(date, TimeDeltaInterval.Year, -1);
    };
    /**
     * @private
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    Calendar.prototype.generateICalendarDate = /**
     * @private
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (date, year, month) {
        return {
            date: date,
            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,
            isNextMonth: this.isNextMonth(date, year, month),
            isPrevMonth: this.isPreviousMonth(date, year, month)
        };
    };
    /**
     * @private
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    Calendar.prototype.isPreviousMonth = /**
     * @private
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (date, year, month) {
        if (date.getFullYear() === year) {
            return date.getMonth() < month;
        }
        return date.getFullYear() < year;
    };
    /**
     * @private
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    Calendar.prototype.isNextMonth = /**
     * @private
     * @param {?} date
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (date, year, month) {
        if (date.getFullYear() === year) {
            return date.getMonth() > month;
        }
        return date.getFullYear() > year;
    };
    return Calendar;
}());
export { Calendar };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Calendar.prototype._firstWeekDay;
}
//# sourceMappingURL=data:application/json;base64,