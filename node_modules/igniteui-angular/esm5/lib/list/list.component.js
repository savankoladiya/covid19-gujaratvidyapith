/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, Input, NgModule, Output, QueryList, TemplateRef, ViewChild, Optional, Inject, Directive } from '@angular/core';
import { IgxRippleModule } from '../directives/ripple/ripple.directive';
import { IgxListItemComponent } from './list-item.component';
import { IgxListBase, IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective, IgxListItemLeftPanningTemplateDirective, IgxListItemRightPanningTemplateDirective } from './list.common';
import { DisplayDensityToken, DisplayDensity } from '../core/density';
/** @type {?} */
var NEXT_ID = 0;
/**
 * @record
 */
export function IPanStateChangeEventArgs() { }
if (false) {
    /** @type {?} */
    IPanStateChangeEventArgs.prototype.oldState;
    /** @type {?} */
    IPanStateChangeEventArgs.prototype.newState;
    /** @type {?} */
    IPanStateChangeEventArgs.prototype.item;
}
/**
 * @record
 */
export function IListItemClickEventArgs() { }
if (false) {
    /** @type {?} */
    IListItemClickEventArgs.prototype.item;
    /** @type {?} */
    IListItemClickEventArgs.prototype.event;
    /** @type {?} */
    IListItemClickEventArgs.prototype.direction;
}
/**
 * @record
 */
export function IListItemPanningEventArgs() { }
if (false) {
    /** @type {?} */
    IListItemPanningEventArgs.prototype.item;
    /** @type {?} */
    IListItemPanningEventArgs.prototype.direction;
    /** @type {?} */
    IListItemPanningEventArgs.prototype.keepItem;
}
/**
 * **Ignite UI for Angular List** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)
 *
 * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering
 * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.
 *
 * Example:
 * ```html
 * <igx-list>
 *   <igx-list-item isHeader="true">Contacts</igx-list-item>
 *   <igx-list-item *ngFor="let contact of contacts">
 *     <span class="name">{{ contact.name }}</span>
 *     <span class="phone">{{ contact.phone }}</span>
 *   </igx-list-item>
 * </igx-list>
 * ```
 */
/**
 * igxListThumbnail is container for the List media
 * Use it to wrap anything you want to be used as a thumbnail.
 */
var IgxListThumbnailDirective = /** @class */ (function () {
    function IgxListThumbnailDirective() {
    }
    IgxListThumbnailDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[igxListThumbnail]'
                },] }
    ];
    return IgxListThumbnailDirective;
}());
export { IgxListThumbnailDirective };
/**
 * igxListAction is container for the List action
 * Use it to wrap anything you want to be used as a list action: icon, checkbox...
 */
var IgxListActionDirective = /** @class */ (function () {
    function IgxListActionDirective() {
    }
    IgxListActionDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[igxListAction]'
                },] }
    ];
    return IgxListActionDirective;
}());
export { IgxListActionDirective };
/**
 * igxListLine is container for the List text content
 * Use it to wrap anything you want to be used as a plane text.
 */
var IgxListLineDirective = /** @class */ (function () {
    function IgxListLineDirective() {
    }
    IgxListLineDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[igxListLine]'
                },] }
    ];
    return IgxListLineDirective;
}());
export { IgxListLineDirective };
/**
 * igxListLineTitle is a directive that add class to the target element
 * Use it to make anything to look like list Title.
 */
var IgxListLineTitleDirective = /** @class */ (function () {
    function IgxListLineTitleDirective() {
        this.cssClass = 'igx-list__item-line-title';
    }
    IgxListLineTitleDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[igxListLineTitle]'
                },] }
    ];
    IgxListLineTitleDirective.propDecorators = {
        cssClass: [{ type: HostBinding, args: ['class.igx-list__item-line-title',] }]
    };
    return IgxListLineTitleDirective;
}());
export { IgxListLineTitleDirective };
if (false) {
    /** @type {?} */
    IgxListLineTitleDirective.prototype.cssClass;
}
/**
 * igxListLineSubTitle is a directive that add class to the target element
 * Use it to make anything to look like list Subtitle.
 */
var IgxListLineSubTitleDirective = /** @class */ (function () {
    function IgxListLineSubTitleDirective() {
        this.cssClass = 'igx-list__item-line-subtitle';
    }
    IgxListLineSubTitleDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[igxListLineSubTitle]'
                },] }
    ];
    IgxListLineSubTitleDirective.propDecorators = {
        cssClass: [{ type: HostBinding, args: ['class.igx-list__item-line-subtitle',] }]
    };
    return IgxListLineSubTitleDirective;
}());
export { IgxListLineSubTitleDirective };
if (false) {
    /** @type {?} */
    IgxListLineSubTitleDirective.prototype.cssClass;
}
var IgxListComponent = /** @class */ (function (_super) {
    tslib_1.__extends(IgxListComponent, _super);
    function IgxListComponent(element, _displayDensityOptions) {
        var _this = _super.call(this, _displayDensityOptions) || this;
        _this.element = element;
        _this._displayDensityOptions = _displayDensityOptions;
        /**
         * Provides a threshold after which the item's panning will be completed automatically.
         * By default this property is set to 0.5 which is 50% of the list item's width.
         * ```typescript
         * this.list.panEndTriggeringThreshold = 0.8;
         * ```
         */
        _this.panEndTriggeringThreshold = 0.5;
        /**
         * Sets/gets the `id` of the list.
         * If not set, the `id` of the first list component will be `"igx-list-0"`.
         * ```html
         * <igx-list id = "my-first-list"></igx-list>
         * ```
         * ```typescript
         * let listId =  this.list.id;
         * ```
         * \@memberof IgxListComponent
         */
        _this.id = "igx-list-" + NEXT_ID++;
        /**
         * Sets/gets whether the left panning of an item is allowed.
         * Default value is `false`.
         * ```html
         *  <igx-list [allowLeftPanning] = "true"></igx-list>
         * ```
         * ```typescript
         * let isLeftPanningAllowed = this.list.allowLeftPanning;
         * ```
         * \@memberof IgxListComponent
         */
        _this.allowLeftPanning = false;
        /**
         * Sets/gets whether the right panning of an item is allowed.
         * Default value is `false`.
         * ```html
         *  <igx-list [allowRightPanning] = "true"></igx-list>
         * ```
         * ```typescript
         * let isRightPanningAllowed = this.list.allowRightPanning;
         * ```
         * \@memberof IgxListComponent
         */
        _this.allowRightPanning = false;
        /**
         * Sets/gets whether the list is currently loading data.
         * Set it to display the dataLoadingTemplate while data is being retrieved.
         * Default value is `false`.
         * ```html
         *  <igx-list [isLoading]="true"></igx-list>
         * ```
         * ```typescript
         * let isLoading = this.list.isLoading;
         * ```
         * \@memberof IgxListComponent
         */
        _this.isLoading = false;
        /**
         * Emits an event within the current list when left pan gesture is executed on a list item.
         * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
         * ```html
         * <igx-list [allowLeftPanning]="true" (onLeftPan)="onLeftPan($event)"></igx-list>
         * ```
         * \@memberof IgxListComponent
         */
        _this.onLeftPan = new EventEmitter();
        /**
         * Emits an event within the current list when right pan gesture is executed on a list item.
         * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
         * ```html
         * <igx-list [allowRightPanning]="true" (onRightPan)="onRightPan($event)"></igx-list>
         * ```
         * \@memberof IgxListComponent
         */
        _this.onRightPan = new EventEmitter();
        /**
         * Emits an event within the current list when pan gesture is executed on list item.
         * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.
         * ```html
         * <igx-list (onPanStateChange) = "onPanStateChange($event)"></igx-list>
         * ```
         * \@memberof IgxListComponent
         */
        _this.onPanStateChange = new EventEmitter();
        /**
         * Emits an event within the current list when a list item has been clicked.
         * Provides references to the `IgxListItemComponent` and `Event` as event arguments.
         *  ```html
         * <igx-list (onItemClicked) = "onItemClicked($event)"></igx-list>
         * ```
         * \@memberof IgxListComponent
         */
        _this.onItemClicked = new EventEmitter();
        return _this;
    }
    Object.defineProperty(IgxListComponent.prototype, "sortedChildren", {
        /**
         * @hidden
         * @internal
         */
        get: /**
         * @hidden
         * \@internal
         * @protected
         * @return {?}
         */
        function () {
            if (this.children !== undefined) {
                return this.children.toArray()
                    .sort(function (a, b) {
                    return a.index - b.index;
                });
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "role", {
        /**
         * Gets the `role` attribute.
         * ```typescript
         * let listRole =  this.list.role;
         * ```
         * @memberof IgxListComponent
         */
        get: /**
         * Gets the `role` attribute.
         * ```typescript
         * let listRole =  this.list.role;
         * ```
         * \@memberof IgxListComponent
         * @return {?}
         */
        function () {
            return 'list';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "isListEmpty", {
        /**
         * Returns boolean indicating if the list is empty.
         * ```typescript
         * let isEmpty =  this.list.isListEmpty;
         * ```
         * @memberof IgxListComponent
         */
        get: /**
         * Returns boolean indicating if the list is empty.
         * ```typescript
         * let isEmpty =  this.list.isListEmpty;
         * ```
         * \@memberof IgxListComponent
         * @return {?}
         */
        function () {
            return !this.children || this.children.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "cssClass", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "cssClassCompact", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "cssClassCosy", {
        /**
         * @hidden
         */
        get: /**
         * @hidden
         * @return {?}
         */
        function () {
            return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "items", {
        /**
         * Returns the `items` in the list excluding the headers.
         * ```typescript
         * let listItems: IgxListItemComponent[] = this.list.items;
         * ```
         * @memberof IgxListComponent
         */
        get: /**
         * Returns the `items` in the list excluding the headers.
         * ```typescript
         * let listItems: IgxListItemComponent[] = this.list.items;
         * ```
         * \@memberof IgxListComponent
         * @return {?}
         */
        function () {
            var e_1, _a;
            /** @type {?} */
            var items = [];
            if (this.children !== undefined) {
                try {
                    for (var _b = tslib_1.__values(this.sortedChildren), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var child = _c.value;
                        if (!child.isHeader) {
                            items.push(child);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return items;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "headers", {
        /**
         * Returns the headers in the list.
         * ```typescript
         * let listHeaders: IgxListItemComponent[] =  this.list.headers;
         * ```
         * @memberof IgxListComponent
         */
        get: /**
         * Returns the headers in the list.
         * ```typescript
         * let listHeaders: IgxListItemComponent[] =  this.list.headers;
         * ```
         * \@memberof IgxListComponent
         * @return {?}
         */
        function () {
            var e_2, _a;
            /** @type {?} */
            var headers = [];
            if (this.children !== undefined) {
                try {
                    for (var _b = tslib_1.__values(this.children.toArray()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var child = _c.value;
                        if (child.isHeader) {
                            headers.push(child);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            return headers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "context", {
        /**
         * Returns the `context` object which represents the `template context` binding into the `list container`
         * by providing the `$implicit` declaration which is the `IgxListComponent` itself.
         * ```typescript
         * let listComponent =  this.list.context;
         * ```
         */
        get: /**
         * Returns the `context` object which represents the `template context` binding into the `list container`
         * by providing the `$implicit` declaration which is the `IgxListComponent` itself.
         * ```typescript
         * let listComponent =  this.list.context;
         * ```
         * @return {?}
         */
        function () {
            return {
                $implicit: this
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgxListComponent.prototype, "template", {
        /**
         * Returns the `template` of an empty list.
         * ```typescript
         * let listTemplate = this.list.template;
         * ```
         * @memberof IgxListComponent
         */
        get: /**
         * Returns the `template` of an empty list.
         * ```typescript
         * let listTemplate = this.list.template;
         * ```
         * \@memberof IgxListComponent
         * @return {?}
         */
        function () {
            if (this.isLoading) {
                return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;
            }
            else {
                return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;
            }
        },
        enumerable: true,
        configurable: true
    });
    IgxListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'igx-list',
                    template: "<ng-content></ng-content>\n\n<ng-template #defaultEmptyList>\n    <article class=\"message\">\n        There are no items in the list.\n    </article>\n</ng-template>\n\n<ng-template #defaultDataLoading>\n    <article class=\"message\">\n        Loading data from the server...\n    </article>\n</ng-template>\n\n<ng-container *ngIf=\"!children || children.length === 0 || isLoading\">\n    <ng-container *ngTemplateOutlet=\"template; context: context\">\n    </ng-container>\n</ng-container>\n",
                    providers: [{ provide: IgxListBase, useExisting: IgxListComponent }]
                }] }
    ];
    /** @nocollapse */
    IgxListComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] }
    ]; };
    IgxListComponent.propDecorators = {
        children: [{ type: ContentChildren, args: [forwardRef(function () { return IgxListItemComponent; }),] }],
        emptyListTemplate: [{ type: ContentChild, args: [IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective, static: false },] }],
        dataLoadingTemplate: [{ type: ContentChild, args: [IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective, static: false },] }],
        listItemLeftPanningTemplate: [{ type: ContentChild, args: [IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective, static: false },] }],
        listItemRightPanningTemplate: [{ type: ContentChild, args: [IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective, static: false },] }],
        panEndTriggeringThreshold: [{ type: Input }],
        defaultEmptyListTemplate: [{ type: ViewChild, args: ['defaultEmptyList', { read: TemplateRef, static: true },] }],
        defaultDataLoadingTemplate: [{ type: ViewChild, args: ['defaultDataLoading', { read: TemplateRef, static: true },] }],
        id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
        allowLeftPanning: [{ type: Input }],
        allowRightPanning: [{ type: Input }],
        isLoading: [{ type: Input }],
        onLeftPan: [{ type: Output }],
        onRightPan: [{ type: Output }],
        onPanStateChange: [{ type: Output }],
        onItemClicked: [{ type: Output }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        isListEmpty: [{ type: HostBinding, args: ['class.igx-list-empty',] }],
        cssClass: [{ type: HostBinding, args: ['class.igx-list',] }],
        cssClassCompact: [{ type: HostBinding, args: ['class.igx-list--compact',] }],
        cssClassCosy: [{ type: HostBinding, args: ['class.igx-list--cosy',] }]
    };
    return IgxListComponent;
}(IgxListBase));
export { IgxListComponent };
if (false) {
    /**
     * Returns a collection of all items and headers in the list.
     * ```typescript
     * let listChildren: QueryList = this.list.children;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.children;
    /**
     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.
     * ```typescript
     * let emptyTemplate = this.list.emptyListTemplate;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.emptyListTemplate;
    /**
     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.
     * ```typescript
     * let loadingTemplate = this.list.dataLoadingTemplate;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.dataLoadingTemplate;
    /**
     * Sets/gets the template shown when left panning a list item.
     * Default value is `null`.
     * ```html
     *  <igx-list [allowLeftPanning] = "true"></igx-list>
     * ```
     * ```typescript
     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.listItemLeftPanningTemplate;
    /**
     * Sets/gets the template shown when right panning a list item.
     * Default value is `null`.
     * ```html
     *  <igx-list [allowLeftPanning] = "true"></igx-list>
     * ```
     * ```typescript
     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.listItemRightPanningTemplate;
    /**
     * Provides a threshold after which the item's panning will be completed automatically.
     * By default this property is set to 0.5 which is 50% of the list item's width.
     * ```typescript
     * this.list.panEndTriggeringThreshold = 0.8;
     * ```
     * @type {?}
     */
    IgxListComponent.prototype.panEndTriggeringThreshold;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxListComponent.prototype.defaultEmptyListTemplate;
    /**
     * @hidden
     * @type {?}
     * @protected
     */
    IgxListComponent.prototype.defaultDataLoadingTemplate;
    /**
     * Sets/gets the `id` of the list.
     * If not set, the `id` of the first list component will be `"igx-list-0"`.
     * ```html
     * <igx-list id = "my-first-list"></igx-list>
     * ```
     * ```typescript
     * let listId =  this.list.id;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.id;
    /**
     * Sets/gets whether the left panning of an item is allowed.
     * Default value is `false`.
     * ```html
     *  <igx-list [allowLeftPanning] = "true"></igx-list>
     * ```
     * ```typescript
     * let isLeftPanningAllowed = this.list.allowLeftPanning;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.allowLeftPanning;
    /**
     * Sets/gets whether the right panning of an item is allowed.
     * Default value is `false`.
     * ```html
     *  <igx-list [allowRightPanning] = "true"></igx-list>
     * ```
     * ```typescript
     * let isRightPanningAllowed = this.list.allowRightPanning;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.allowRightPanning;
    /**
     * Sets/gets whether the list is currently loading data.
     * Set it to display the dataLoadingTemplate while data is being retrieved.
     * Default value is `false`.
     * ```html
     *  <igx-list [isLoading]="true"></igx-list>
     * ```
     * ```typescript
     * let isLoading = this.list.isLoading;
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.isLoading;
    /**
     * Emits an event within the current list when left pan gesture is executed on a list item.
     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
     * ```html
     * <igx-list [allowLeftPanning]="true" (onLeftPan)="onLeftPan($event)"></igx-list>
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.onLeftPan;
    /**
     * Emits an event within the current list when right pan gesture is executed on a list item.
     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.
     * ```html
     * <igx-list [allowRightPanning]="true" (onRightPan)="onRightPan($event)"></igx-list>
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.onRightPan;
    /**
     * Emits an event within the current list when pan gesture is executed on list item.
     * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.
     * ```html
     * <igx-list (onPanStateChange) = "onPanStateChange($event)"></igx-list>
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.onPanStateChange;
    /**
     * Emits an event within the current list when a list item has been clicked.
     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.
     *  ```html
     * <igx-list (onItemClicked) = "onItemClicked($event)"></igx-list>
     * ```
     * \@memberof IgxListComponent
     * @type {?}
     */
    IgxListComponent.prototype.onItemClicked;
    /** @type {?} */
    IgxListComponent.prototype.element;
    /**
     * @type {?}
     * @protected
     */
    IgxListComponent.prototype._displayDensityOptions;
}
/**
 * @hidden
 */
var IgxListModule = /** @class */ (function () {
    function IgxListModule() {
    }
    IgxListModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        IgxListComponent,
                        IgxListItemComponent,
                        IgxListThumbnailDirective,
                        IgxListActionDirective,
                        IgxListLineDirective,
                        IgxListLineTitleDirective,
                        IgxListLineSubTitleDirective,
                        IgxDataLoadingTemplateDirective,
                        IgxEmptyListTemplateDirective,
                        IgxListItemLeftPanningTemplateDirective,
                        IgxListItemRightPanningTemplateDirective
                    ],
                    exports: [
                        IgxListComponent,
                        IgxListItemComponent,
                        IgxListThumbnailDirective,
                        IgxListActionDirective,
                        IgxListLineDirective,
                        IgxListLineTitleDirective,
                        IgxListLineSubTitleDirective,
                        IgxDataLoadingTemplateDirective,
                        IgxEmptyListTemplateDirective,
                        IgxListItemLeftPanningTemplateDirective,
                        IgxListItemRightPanningTemplateDirective
                    ],
                    imports: [
                        CommonModule,
                        IgxRippleModule
                    ]
                },] }
    ];
    return IgxListModule;
}());
export { IgxListModule };
//# sourceMappingURL=data:application/json;base64,