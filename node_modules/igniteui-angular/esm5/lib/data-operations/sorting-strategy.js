/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { cloneArray } from '../core/utils';
import { SortingDirection } from './sorting-expression.interface';
import { getHierarchy, isHierarchyMatch } from './operations';
/**
 * @record
 */
export function ISortingStrategy() { }
if (false) {
    /** @type {?} */
    ISortingStrategy.prototype.sort;
}
var DefaultSortingStrategy = /** @class */ (function () {
    function DefaultSortingStrategy() {
    }
    /**
     * @return {?}
     */
    DefaultSortingStrategy.instance = /**
     * @return {?}
     */
    function () {
        return this._instance || (this._instance = new this());
    };
    /**
     * @param {?} data
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @param {?} valueResolver
     * @return {?}
     */
    DefaultSortingStrategy.prototype.sort = /**
     * @param {?} data
     * @param {?} fieldName
     * @param {?} dir
     * @param {?} ignoreCase
     * @param {?} valueResolver
     * @return {?}
     */
    function (data, fieldName, dir, ignoreCase, valueResolver) {
        var _this = this;
        /** @type {?} */
        var key = fieldName;
        /** @type {?} */
        var reverse = (dir === SortingDirection.Desc ? -1 : 1);
        /** @type {?} */
        var cmpFunc = function (obj1, obj2) {
            return _this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);
        };
        return this.arraySort(data, cmpFunc);
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    DefaultSortingStrategy.prototype.compareValues = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        /** @type {?} */
        var an = (a === null || a === undefined);
        /** @type {?} */
        var bn = (b === null || b === undefined);
        if (an) {
            if (bn) {
                return 0;
            }
            return -1;
        }
        else if (bn) {
            return 1;
        }
        return a > b ? 1 : a < b ? -1 : 0;
    };
    /**
     * @protected
     * @param {?} obj1
     * @param {?} obj2
     * @param {?} key
     * @param {?} reverse
     * @param {?} ignoreCase
     * @param {?} valueResolver
     * @return {?}
     */
    DefaultSortingStrategy.prototype.compareObjects = /**
     * @protected
     * @param {?} obj1
     * @param {?} obj2
     * @param {?} key
     * @param {?} reverse
     * @param {?} ignoreCase
     * @param {?} valueResolver
     * @return {?}
     */
    function (obj1, obj2, key, reverse, ignoreCase, valueResolver) {
        /** @type {?} */
        var a = valueResolver(obj1, key);
        /** @type {?} */
        var b = valueResolver(obj2, key);
        if (ignoreCase) {
            a = a && a.toLowerCase ? a.toLowerCase() : a;
            b = b && b.toLowerCase ? b.toLowerCase() : b;
        }
        return reverse * this.compareValues(a, b);
    };
    /**
     * @protected
     * @param {?} data
     * @param {?=} compareFn
     * @return {?}
     */
    DefaultSortingStrategy.prototype.arraySort = /**
     * @protected
     * @param {?} data
     * @param {?=} compareFn
     * @return {?}
     */
    function (data, compareFn) {
        return data.sort(compareFn);
    };
    DefaultSortingStrategy._instance = null;
    return DefaultSortingStrategy;
}());
export { DefaultSortingStrategy };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultSortingStrategy._instance;
}
var IgxSorting = /** @class */ (function () {
    function IgxSorting() {
    }
    /**
     * @param {?} data
     * @param {?} expressions
     * @return {?}
     */
    IgxSorting.prototype.sort = /**
     * @param {?} data
     * @param {?} expressions
     * @return {?}
     */
    function (data, expressions) {
        return this.sortDataRecursive(data, expressions);
    };
    /**
     * @private
     * @param {?} data
     * @param {?} index
     * @param {?} expression
     * @return {?}
     */
    IgxSorting.prototype.groupedRecordsByExpression = /**
     * @private
     * @param {?} data
     * @param {?} index
     * @param {?} expression
     * @return {?}
     */
    function (data, index, expression) {
        /** @type {?} */
        var i;
        /** @type {?} */
        var groupval;
        /** @type {?} */
        var res = [];
        /** @type {?} */
        var key = expression.fieldName;
        /** @type {?} */
        var len = data.length;
        res.push(data[index]);
        groupval = this.getFieldValue(data[index], key);
        index++;
        /** @type {?} */
        var comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;
        for (i = index; i < len; i++) {
            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {
                res.push(data[i]);
            }
            else {
                break;
            }
        }
        return res;
    };
    /**
     * @private
     * @template T
     * @param {?} data
     * @param {?} expressions
     * @param {?=} expressionIndex
     * @return {?}
     */
    IgxSorting.prototype.sortDataRecursive = /**
     * @private
     * @template T
     * @param {?} data
     * @param {?} expressions
     * @param {?=} expressionIndex
     * @return {?}
     */
    function (data, expressions, expressionIndex) {
        if (expressionIndex === void 0) { expressionIndex = 0; }
        /** @type {?} */
        var i;
        /** @type {?} */
        var j;
        /** @type {?} */
        var expr;
        /** @type {?} */
        var gbData;
        /** @type {?} */
        var gbDataLen;
        /** @type {?} */
        var exprsLen = expressions.length;
        /** @type {?} */
        var dataLen = data.length;
        expressionIndex = expressionIndex || 0;
        if (expressionIndex >= exprsLen || dataLen <= 1) {
            return data;
        }
        expr = expressions[expressionIndex];
        if (!expr.strategy) {
            expr.strategy = DefaultSortingStrategy.instance();
        }
        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);
        if (expressionIndex === exprsLen - 1) {
            return data;
        }
        // in case of multiple sorting
        for (i = 0; i < dataLen; i++) {
            gbData = this.groupedRecordsByExpression(data, i, expr);
            gbDataLen = gbData.length;
            if (gbDataLen > 1) {
                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);
            }
            for (j = 0; j < gbDataLen; j++) {
                data[i + j] = gbData[j];
            }
            i += gbDataLen - 1;
        }
        return data;
    };
    /**
     * @protected
     * @template T
     * @param {?} data
     * @param {?} state
     * @param {?} level
     * @param {?} parent
     * @param {?} metadata
     * @param {?=} grid
     * @param {?=} groupsRecords
     * @param {?=} fullResult
     * @return {?}
     */
    IgxSorting.prototype.groupDataRecursive = /**
     * @protected
     * @template T
     * @param {?} data
     * @param {?} state
     * @param {?} level
     * @param {?} parent
     * @param {?} metadata
     * @param {?=} grid
     * @param {?=} groupsRecords
     * @param {?=} fullResult
     * @return {?}
     */
    function (data, state, level, parent, metadata, grid, groupsRecords, fullResult) {
        if (grid === void 0) { grid = null; }
        if (groupsRecords === void 0) { groupsRecords = []; }
        if (fullResult === void 0) { fullResult = { data: [], metadata: [] }; }
        /** @type {?} */
        var expressions = state.expressions;
        /** @type {?} */
        var expansion = state.expansion;
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var result = [];
        var _loop_1 = function () {
            var e_1, _a;
            /** @type {?} */
            var group = this_1.groupedRecordsByExpression(data, i, expressions[level]);
            /** @type {?} */
            var groupRow = {
                expression: expressions[level],
                level: level,
                records: cloneArray(group),
                value: group[0][expressions[level].fieldName],
                groupParent: parent,
                groups: [],
                height: grid ? grid.renderedRowHeight : null
            };
            if (parent) {
                parent.groups.push(groupRow);
            }
            else {
                groupsRecords.push(groupRow);
            }
            /** @type {?} */
            var hierarchy = getHierarchy(groupRow);
            /** @type {?} */
            var expandState = expansion.find(function (s) {
                return isHierarchyMatch(s.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy);
            });
            /** @type {?} */
            var expanded = expandState ? expandState.expanded : state.defaultExpanded;
            /** @type {?} */
            var recursiveResult = void 0;
            result.push(groupRow);
            metadata.push(null);
            fullResult.data.push(groupRow);
            fullResult.metadata.push(null);
            if (level < expressions.length - 1) {
                recursiveResult = this_1.groupDataRecursive(group, state, level + 1, groupRow, expanded ? metadata : [], grid, groupsRecords, fullResult);
                if (expanded) {
                    result = result.concat(recursiveResult);
                }
            }
            else {
                try {
                    for (var group_1 = tslib_1.__values(group), group_1_1 = group_1.next(); !group_1_1.done; group_1_1 = group_1.next()) {
                        var groupItem = group_1_1.value;
                        fullResult.metadata.push(groupRow);
                        fullResult.data.push(groupItem);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (group_1_1 && !group_1_1.done && (_a = group_1.return)) _a.call(group_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (expanded) {
                    metadata.push.apply(metadata, tslib_1.__spread(fullResult.metadata.slice(fullResult.metadata.length - group.length)));
                    result.push.apply(result, tslib_1.__spread(fullResult.data.slice(fullResult.data.length - group.length)));
                }
            }
            i += group.length;
        };
        var this_1 = this;
        while (i < data.length) {
            _loop_1();
        }
        return result;
    };
    /**
     * @protected
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    IgxSorting.prototype.getFieldValue = /**
     * @protected
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    function (obj, key) {
        return obj[key];
    };
    return IgxSorting;
}());
export { IgxSorting };
var IgxDataRecordSorting = /** @class */ (function (_super) {
    tslib_1.__extends(IgxDataRecordSorting, _super);
    function IgxDataRecordSorting() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    IgxDataRecordSorting.prototype.getFieldValue = /**
     * @protected
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    function (obj, key) {
        return obj.data[key];
    };
    return IgxDataRecordSorting;
}(IgxSorting));
export { IgxDataRecordSorting };
//# sourceMappingURL=data:application/json;base64,