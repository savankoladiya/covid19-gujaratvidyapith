/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FilteringLogic } from './filtering-expression.interface';
import { FilteringExpressionsTree } from './filtering-expressions-tree';
/**
 * @record
 */
export function IFilteringStrategy() { }
if (false) {
    /**
     * @param {?} data
     * @param {?} expressionsTree
     * @param {?=} advancedExpressionsTree
     * @return {?}
     */
    IFilteringStrategy.prototype.filter = function (data, expressionsTree, advancedExpressionsTree) { };
}
/**
 * @abstract
 */
var /**
 * @abstract
 */
BaseFilteringStrategy = /** @class */ (function () {
    function BaseFilteringStrategy() {
    }
    /**
     * @param {?} rec
     * @param {?} expr
     * @return {?}
     */
    BaseFilteringStrategy.prototype.findMatchByExpression = /**
     * @param {?} rec
     * @param {?} expr
     * @return {?}
     */
    function (rec, expr) {
        /** @type {?} */
        var cond = expr.condition;
        /** @type {?} */
        var val = this.getFieldValue(rec, expr.fieldName);
        return cond.logic(val, expr.searchVal, expr.ignoreCase);
    };
    /**
     * @param {?} rec
     * @param {?} expressions
     * @return {?}
     */
    BaseFilteringStrategy.prototype.matchRecord = /**
     * @param {?} rec
     * @param {?} expressions
     * @return {?}
     */
    function (rec, expressions) {
        if (expressions) {
            if (expressions instanceof FilteringExpressionsTree) {
                /** @type {?} */
                var expressionsTree = (/** @type {?} */ (expressions));
                /** @type {?} */
                var operator = (/** @type {?} */ (expressionsTree.operator));
                /** @type {?} */
                var matchOperand = void 0;
                /** @type {?} */
                var operand = void 0;
                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {
                    for (var i = 0; i < expressionsTree.filteringOperands.length; i++) {
                        operand = expressionsTree.filteringOperands[i];
                        matchOperand = this.matchRecord(rec, operand);
                        // Return false if at least one operand does not match and the filtering logic is And
                        if (!matchOperand && operator === FilteringLogic.And) {
                            return false;
                        }
                        // Return true if at least one operand matches and the filtering logic is Or
                        if (matchOperand && operator === FilteringLogic.Or) {
                            return true;
                        }
                    }
                    return matchOperand;
                }
                return true;
            }
            else {
                /** @type {?} */
                var expression = (/** @type {?} */ (expressions));
                return this.findMatchByExpression(rec, expression);
            }
        }
        return true;
    };
    return BaseFilteringStrategy;
}());
/**
 * @abstract
 */
export { BaseFilteringStrategy };
if (false) {
    /**
     * @abstract
     * @param {?} data
     * @param {?} expressionsTree
     * @param {?=} advancedExpressionsTree
     * @return {?}
     */
    BaseFilteringStrategy.prototype.filter = function (data, expressionsTree, advancedExpressionsTree) { };
    /**
     * @abstract
     * @protected
     * @param {?} rec
     * @param {?} fieldName
     * @return {?}
     */
    BaseFilteringStrategy.prototype.getFieldValue = function (rec, fieldName) { };
}
var FilteringStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(FilteringStrategy, _super);
    function FilteringStrategy() {
        return _super.call(this) || this;
    }
    /**
     * @return {?}
     */
    FilteringStrategy.instance = /**
     * @return {?}
     */
    function () {
        return this._instace || (this._instace = new this());
    };
    /**
     * @template T
     * @param {?} data
     * @param {?} expressionsTree
     * @param {?=} advancedExpressionsTree
     * @return {?}
     */
    FilteringStrategy.prototype.filter = /**
     * @template T
     * @param {?} data
     * @param {?} expressionsTree
     * @param {?=} advancedExpressionsTree
     * @return {?}
     */
    function (data, expressionsTree, advancedExpressionsTree) {
        /** @type {?} */
        var i;
        /** @type {?} */
        var rec;
        /** @type {?} */
        var len = data.length;
        /** @type {?} */
        var res = [];
        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = data[i];
            if (this.matchRecord(rec, expressionsTree) && this.matchRecord(rec, advancedExpressionsTree)) {
                res.push(rec);
            }
        }
        return res;
    };
    /**
     * @protected
     * @param {?} rec
     * @param {?} fieldName
     * @return {?}
     */
    FilteringStrategy.prototype.getFieldValue = /**
     * @protected
     * @param {?} rec
     * @param {?} fieldName
     * @return {?}
     */
    function (rec, fieldName) {
        return rec[fieldName];
    };
    FilteringStrategy._instace = null;
    return FilteringStrategy;
}(BaseFilteringStrategy));
export { FilteringStrategy };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FilteringStrategy._instace;
}
//# sourceMappingURL=data:application/json;base64,