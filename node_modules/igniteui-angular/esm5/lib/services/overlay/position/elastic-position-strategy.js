/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BaseFitPositionStrategy } from './base-fit-position-strategy';
import { HorizontalAlignment, VerticalAlignment } from '../utilities';
/**
 * Positions the element as in **Connected** positioning strategy and resize the element
 * to fit in the view port in case the element is partially getting out of view
 */
var /**
 * Positions the element as in **Connected** positioning strategy and resize the element
 * to fit in the view port in case the element is partially getting out of view
 */
ElasticPositionStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(ElasticPositionStrategy, _super);
    function ElasticPositionStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @inheritdoc */
    /**
     * \@inheritdoc
     * @protected
     * @param {?} element
     * @param {?} connectedFit
     * @return {?}
     */
    ElasticPositionStrategy.prototype.fitInViewport = /**
     * \@inheritdoc
     * @protected
     * @param {?} element
     * @param {?} connectedFit
     * @return {?}
     */
    function (element, connectedFit) {
        element.classList.add('igx-overlay__content--elastic');
        /** @type {?} */
        var transformString = [];
        if (!connectedFit.fitHorizontal) {
            /** @type {?} */
            var maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);
            /** @type {?} */
            var leftExtend = Math.max(0, 0 - connectedFit.left);
            /** @type {?} */
            var rightExtend = Math.max(0, connectedFit.right - connectedFit.viewPortRect.width);
            /** @type {?} */
            var reduction = Math.min(maxReduction, leftExtend + rightExtend);
            element.style.width = connectedFit.contentElementRect.width - reduction + "px";
            //  if direction is center and element goes off the screen in left direction we should push the
            //  element to the right. Prevents left still going out of view when normally positioned
            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {
                //  the amount of translation depends on whether element goes off the screen to the left,
                //  to the right or in both directions, as well as how much it goes of the screen and finally
                //  on the minSize. The translation should be proportional between left and right extend
                //  taken from the reduction
                /** @type {?} */
                var translation = leftExtend * reduction / (leftExtend + rightExtend);
                if (translation > 0) {
                    transformString.push("translateX(" + translation + "px)");
                }
            }
        }
        if (!connectedFit.fitVertical) {
            /** @type {?} */
            var maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);
            /** @type {?} */
            var topExtend = Math.max(0, 0 - connectedFit.top);
            /** @type {?} */
            var bottomExtend = Math.max(0, connectedFit.bottom - connectedFit.viewPortRect.height);
            /** @type {?} */
            var reduction = Math.min(maxReduction, topExtend + bottomExtend);
            element.style.height = connectedFit.contentElementRect.height - reduction + "px";
            //  if direction is middle and element goes off the screen in top direction we should push the
            //  element to the bottom. Prevents top still going out of view when normally positioned
            if (this.settings.verticalDirection === VerticalAlignment.Middle) {
                //  the amount of translation depends on whether element goes off the screen to the top,
                //  to the bottom or in both directions, as well as how much it goes of the screen and finally
                //  on the minSize. The translation should be proportional between top and bottom extend
                //  taken from the reduction
                /** @type {?} */
                var translation = topExtend * reduction / (topExtend + bottomExtend);
                if (translation > 0) {
                    transformString.push("translateY(" + translation + "px)");
                }
            }
        }
        element.style.transform = transformString.join(' ').trim();
    };
    return ElasticPositionStrategy;
}(BaseFitPositionStrategy));
/**
 * Positions the element as in **Connected** positioning strategy and resize the element
 * to fit in the view port in case the element is partially getting out of view
 */
export { ElasticPositionStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxhc3RpYy1wb3NpdGlvbi1zdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lnbml0ZXVpLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvb3ZlcmxheS9wb3NpdGlvbi9lbGFzdGljLXBvc2l0aW9uLXN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFnQixNQUFNLDhCQUE4QixDQUFDO0FBQ3JGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7Ozs7QUFNdEU7Ozs7O0lBQTZDLG1EQUF1QjtJQUFwRTs7SUFnREEsQ0FBQztJQS9DRyxrQkFBa0I7Ozs7Ozs7O0lBQ1IsK0NBQWE7Ozs7Ozs7SUFBdkIsVUFBd0IsT0FBb0IsRUFBRSxZQUEwQjtRQUNwRSxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDOztZQUNqRCxlQUFlLEdBQWEsRUFBRTtRQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRTs7Z0JBQ3ZCLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsa0JBQWtCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQzs7Z0JBQy9GLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQzs7Z0JBQy9DLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDOztnQkFDL0UsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFVBQVUsR0FBRyxXQUFXLENBQUM7WUFDbEUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQU0sWUFBWSxDQUFDLGtCQUFrQixDQUFDLEtBQUssR0FBRyxTQUFTLE9BQUksQ0FBQztZQUUvRSwrRkFBK0Y7WUFDL0Ysd0ZBQXdGO1lBQ3hGLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsS0FBSyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7Ozs7OztvQkFLNUQsV0FBVyxHQUFHLFVBQVUsR0FBRyxTQUFTLEdBQUcsQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO2dCQUN2RSxJQUFJLFdBQVcsR0FBRyxDQUFDLEVBQUU7b0JBQ2pCLGVBQWUsQ0FBQyxJQUFJLENBQUMsZ0JBQWMsV0FBVyxRQUFLLENBQUMsQ0FBQztpQkFDeEQ7YUFDSjtTQUNKO1FBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUU7O2dCQUNyQixZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7O2dCQUNqRyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUM7O2dCQUM3QyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQzs7Z0JBQ2xGLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxTQUFTLEdBQUcsWUFBWSxDQUFDO1lBQ2xFLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFNLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsU0FBUyxPQUFJLENBQUM7WUFFakYsOEZBQThGO1lBQzlGLHdGQUF3RjtZQUN4RixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEtBQUssaUJBQWlCLENBQUMsTUFBTSxFQUFFOzs7Ozs7b0JBS3hELFdBQVcsR0FBRyxTQUFTLEdBQUcsU0FBUyxHQUFHLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQztnQkFDdEUsSUFBSSxXQUFXLEdBQUcsQ0FBQyxFQUFFO29CQUNqQixlQUFlLENBQUMsSUFBSSxDQUFDLGdCQUFjLFdBQVcsUUFBSyxDQUFDLENBQUM7aUJBQ3hEO2FBQ0o7U0FDSjtRQUNELE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0QsQ0FBQztJQUNMLDhCQUFDO0FBQUQsQ0FBQyxBQWhERCxDQUE2Qyx1QkFBdUIsR0FnRG5FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUZpdFBvc2l0aW9uU3RyYXRlZ3ksIENvbm5lY3RlZEZpdCB9IGZyb20gJy4vYmFzZS1maXQtcG9zaXRpb24tc3RyYXRlZ3knO1xuaW1wb3J0IHsgSG9yaXpvbnRhbEFsaWdubWVudCwgVmVydGljYWxBbGlnbm1lbnQgfSBmcm9tICcuLi91dGlsaXRpZXMnO1xuXG4vKipcbiAqIFBvc2l0aW9ucyB0aGUgZWxlbWVudCBhcyBpbiAqKkNvbm5lY3RlZCoqIHBvc2l0aW9uaW5nIHN0cmF0ZWd5IGFuZCByZXNpemUgdGhlIGVsZW1lbnRcbiAqIHRvIGZpdCBpbiB0aGUgdmlldyBwb3J0IGluIGNhc2UgdGhlIGVsZW1lbnQgaXMgcGFydGlhbGx5IGdldHRpbmcgb3V0IG9mIHZpZXdcbiAqL1xuZXhwb3J0IGNsYXNzIEVsYXN0aWNQb3NpdGlvblN0cmF0ZWd5IGV4dGVuZHMgQmFzZUZpdFBvc2l0aW9uU3RyYXRlZ3kge1xuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgIHByb3RlY3RlZCBmaXRJblZpZXdwb3J0KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBjb25uZWN0ZWRGaXQ6IENvbm5lY3RlZEZpdCkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2lneC1vdmVybGF5X19jb250ZW50LS1lbGFzdGljJyk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybVN0cmluZzogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgaWYgKCFjb25uZWN0ZWRGaXQuZml0SG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgY29uc3QgbWF4UmVkdWN0aW9uID0gTWF0aC5tYXgoMCwgY29ubmVjdGVkRml0LmNvbnRlbnRFbGVtZW50UmVjdC53aWR0aCAtIHRoaXMuc2V0dGluZ3MubWluU2l6ZS53aWR0aCk7XG4gICAgICAgICAgICBjb25zdCBsZWZ0RXh0ZW5kID0gTWF0aC5tYXgoMCwgMCAtIGNvbm5lY3RlZEZpdC5sZWZ0KTtcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0RXh0ZW5kID0gTWF0aC5tYXgoMCwgY29ubmVjdGVkRml0LnJpZ2h0IC0gY29ubmVjdGVkRml0LnZpZXdQb3J0UmVjdC53aWR0aCk7XG4gICAgICAgICAgICBjb25zdCByZWR1Y3Rpb24gPSBNYXRoLm1pbihtYXhSZWR1Y3Rpb24sIGxlZnRFeHRlbmQgKyByaWdodEV4dGVuZCk7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gYCR7Y29ubmVjdGVkRml0LmNvbnRlbnRFbGVtZW50UmVjdC53aWR0aCAtIHJlZHVjdGlvbn1weGA7XG5cbiAgICAgICAgICAgIC8vICBpZiBkaXJlY3Rpb24gaXMgY2VudGVyIGFuZCBlbGVtZW50IGdvZXMgb2ZmIHRoZSBzY3JlZW4gaW4gbGVmdCBkaXJlY3Rpb24gd2Ugc2hvdWxkIHB1c2ggdGhlXG4gICAgICAgICAgICAvLyAgZWxlbWVudCB0byB0aGUgcmlnaHQuIFByZXZlbnRzIGxlZnQgc3RpbGwgZ29pbmcgb3V0IG9mIHZpZXcgd2hlbiBub3JtYWxseSBwb3NpdGlvbmVkXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5ob3Jpem9udGFsRGlyZWN0aW9uID09PSBIb3Jpem9udGFsQWxpZ25tZW50LkNlbnRlcikge1xuICAgICAgICAgICAgICAgIC8vICB0aGUgYW1vdW50IG9mIHRyYW5zbGF0aW9uIGRlcGVuZHMgb24gd2hldGhlciBlbGVtZW50IGdvZXMgb2ZmIHRoZSBzY3JlZW4gdG8gdGhlIGxlZnQsXG4gICAgICAgICAgICAgICAgLy8gIHRvIHRoZSByaWdodCBvciBpbiBib3RoIGRpcmVjdGlvbnMsIGFzIHdlbGwgYXMgaG93IG11Y2ggaXQgZ29lcyBvZiB0aGUgc2NyZWVuIGFuZCBmaW5hbGx5XG4gICAgICAgICAgICAgICAgLy8gIG9uIHRoZSBtaW5TaXplLiBUaGUgdHJhbnNsYXRpb24gc2hvdWxkIGJlIHByb3BvcnRpb25hbCBiZXR3ZWVuIGxlZnQgYW5kIHJpZ2h0IGV4dGVuZFxuICAgICAgICAgICAgICAgIC8vICB0YWtlbiBmcm9tIHRoZSByZWR1Y3Rpb25cbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2xhdGlvbiA9IGxlZnRFeHRlbmQgKiByZWR1Y3Rpb24gLyAobGVmdEV4dGVuZCArIHJpZ2h0RXh0ZW5kKTtcbiAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybVN0cmluZy5wdXNoKGB0cmFuc2xhdGVYKCR7dHJhbnNsYXRpb259cHgpYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb25uZWN0ZWRGaXQuZml0VmVydGljYWwpIHtcbiAgICAgICAgICAgIGNvbnN0IG1heFJlZHVjdGlvbiA9IE1hdGgubWF4KDAsIGNvbm5lY3RlZEZpdC5jb250ZW50RWxlbWVudFJlY3QuaGVpZ2h0IC0gdGhpcy5zZXR0aW5ncy5taW5TaXplLmhlaWdodCk7XG4gICAgICAgICAgICBjb25zdCB0b3BFeHRlbmQgPSBNYXRoLm1heCgwLCAwIC0gY29ubmVjdGVkRml0LnRvcCk7XG4gICAgICAgICAgICBjb25zdCBib3R0b21FeHRlbmQgPSBNYXRoLm1heCgwLCBjb25uZWN0ZWRGaXQuYm90dG9tIC0gY29ubmVjdGVkRml0LnZpZXdQb3J0UmVjdC5oZWlnaHQpO1xuICAgICAgICAgICAgY29uc3QgcmVkdWN0aW9uID0gTWF0aC5taW4obWF4UmVkdWN0aW9uLCB0b3BFeHRlbmQgKyBib3R0b21FeHRlbmQpO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBgJHtjb25uZWN0ZWRGaXQuY29udGVudEVsZW1lbnRSZWN0LmhlaWdodCAtIHJlZHVjdGlvbn1weGA7XG5cbiAgICAgICAgICAgIC8vICBpZiBkaXJlY3Rpb24gaXMgbWlkZGxlIGFuZCBlbGVtZW50IGdvZXMgb2ZmIHRoZSBzY3JlZW4gaW4gdG9wIGRpcmVjdGlvbiB3ZSBzaG91bGQgcHVzaCB0aGVcbiAgICAgICAgICAgIC8vICBlbGVtZW50IHRvIHRoZSBib3R0b20uIFByZXZlbnRzIHRvcCBzdGlsbCBnb2luZyBvdXQgb2YgdmlldyB3aGVuIG5vcm1hbGx5IHBvc2l0aW9uZWRcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnZlcnRpY2FsRGlyZWN0aW9uID09PSBWZXJ0aWNhbEFsaWdubWVudC5NaWRkbGUpIHtcbiAgICAgICAgICAgICAgICAvLyAgdGhlIGFtb3VudCBvZiB0cmFuc2xhdGlvbiBkZXBlbmRzIG9uIHdoZXRoZXIgZWxlbWVudCBnb2VzIG9mZiB0aGUgc2NyZWVuIHRvIHRoZSB0b3AsXG4gICAgICAgICAgICAgICAgLy8gIHRvIHRoZSBib3R0b20gb3IgaW4gYm90aCBkaXJlY3Rpb25zLCBhcyB3ZWxsIGFzIGhvdyBtdWNoIGl0IGdvZXMgb2YgdGhlIHNjcmVlbiBhbmQgZmluYWxseVxuICAgICAgICAgICAgICAgIC8vICBvbiB0aGUgbWluU2l6ZS4gVGhlIHRyYW5zbGF0aW9uIHNob3VsZCBiZSBwcm9wb3J0aW9uYWwgYmV0d2VlbiB0b3AgYW5kIGJvdHRvbSBleHRlbmRcbiAgICAgICAgICAgICAgICAvLyAgdGFrZW4gZnJvbSB0aGUgcmVkdWN0aW9uXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRpb24gPSB0b3BFeHRlbmQgKiByZWR1Y3Rpb24gLyAodG9wRXh0ZW5kICsgYm90dG9tRXh0ZW5kKTtcbiAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybVN0cmluZy5wdXNoKGB0cmFuc2xhdGVZKCR7dHJhbnNsYXRpb259cHgpYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtU3RyaW5nLmpvaW4oJyAnKS50cmltKCk7XG4gICAgfVxufVxuIl19