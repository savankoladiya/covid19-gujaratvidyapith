/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { GlobalPositionStrategy } from './global-position-strategy';
/**
 * Positions the element inside the containing outlet based on the directions passed in trough PositionSettings.
 * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection
 */
var /**
 * Positions the element inside the containing outlet based on the directions passed in trough PositionSettings.
 * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection
 */
ContainerPositionStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(ContainerPositionStrategy, _super);
    function ContainerPositionStrategy(settings) {
        return _super.call(this, settings) || this;
    }
    /** @inheritdoc */
    /**
     * \@inheritdoc
     * @param {?} contentElement
     * @param {?=} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    ContainerPositionStrategy.prototype.position = /**
     * \@inheritdoc
     * @param {?} contentElement
     * @param {?=} size
     * @param {?=} document
     * @param {?=} initialCall
     * @return {?}
     */
    function (contentElement, size, document, initialCall) {
        contentElement.classList.add('igx-overlay__content--relative');
        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex-container');
        this.setPosition(contentElement, this.settings);
    };
    return ContainerPositionStrategy;
}(GlobalPositionStrategy));
/**
 * Positions the element inside the containing outlet based on the directions passed in trough PositionSettings.
 * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection
 */
export { ContainerPositionStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLXBvc2l0aW9uLXN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9vdmVybGF5L3Bvc2l0aW9uL2NvbnRhaW5lci1wb3NpdGlvbi1zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7OztBQU1wRTs7Ozs7SUFBK0MscURBQXNCO0lBQ2pFLG1DQUFZLFFBQTJCO2VBQ25DLGtCQUFNLFFBQVEsQ0FBQztJQUNuQixDQUFDO0lBRUQsa0JBQWtCOzs7Ozs7Ozs7SUFDbEIsNENBQVE7Ozs7Ozs7O0lBQVIsVUFBUyxjQUEyQixFQUFFLElBQVcsRUFBRSxRQUFtQixFQUFFLFdBQXFCO1FBQ3pGLGNBQWMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDL0QsY0FBYyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFDTCxnQ0FBQztBQUFELENBQUMsQUFYRCxDQUErQyxzQkFBc0IsR0FXcEUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb3NpdGlvblNldHRpbmdzLCBTaXplIH0gZnJvbSAnLi4vdXRpbGl0aWVzJztcbmltcG9ydCB7IEdsb2JhbFBvc2l0aW9uU3RyYXRlZ3kgfSBmcm9tICcuL2dsb2JhbC1wb3NpdGlvbi1zdHJhdGVneSc7XG5cbi8qKlxuICogUG9zaXRpb25zIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgY29udGFpbmluZyBvdXRsZXQgYmFzZWQgb24gdGhlIGRpcmVjdGlvbnMgcGFzc2VkIGluIHRyb3VnaCBQb3NpdGlvblNldHRpbmdzLlxuICogVGhlc2UgYXJlIFRvcC9NaWRkbGUvQm90dG9tIGZvciB2ZXJ0aWNhbERpcmVjdGlvbiBhbmQgTGVmdC9DZW50ZXIvUmlnaHQgZm9yIGhvcml6b250YWxEaXJlY3Rpb25cbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRhaW5lclBvc2l0aW9uU3RyYXRlZ3kgZXh0ZW5kcyBHbG9iYWxQb3NpdGlvblN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncz86IFBvc2l0aW9uU2V0dGluZ3MpIHtcbiAgICAgICAgc3VwZXIoc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgIHBvc2l0aW9uKGNvbnRlbnRFbGVtZW50OiBIVE1MRWxlbWVudCwgc2l6ZT86IFNpemUsIGRvY3VtZW50PzogRG9jdW1lbnQsIGluaXRpYWxDYWxsPzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBjb250ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpZ3gtb3ZlcmxheV9fY29udGVudC0tcmVsYXRpdmUnKTtcbiAgICAgICAgY29udGVudEVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdpZ3gtb3ZlcmxheV9fd3JhcHBlci0tZmxleC1jb250YWluZXInKTtcbiAgICAgICAgdGhpcy5zZXRQb3NpdGlvbihjb250ZW50RWxlbWVudCwgdGhpcy5zZXR0aW5ncyk7XG4gICAgfVxufVxuXG4iXX0=