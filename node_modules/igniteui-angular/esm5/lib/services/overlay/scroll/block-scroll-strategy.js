/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ScrollStrategy } from './scroll-strategy';
/**
 * Prevents scrolling while the overlay content is shown.
 */
var /**
 * Prevents scrolling while the overlay content is shown.
 */
BlockScrollStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(BlockScrollStrategy, _super);
    function BlockScrollStrategy(scrollContainer) {
        var _this = _super.call(this, scrollContainer) || this;
        _this._initialized = false;
        _this.onScroll = function (ev) {
            ev.preventDefault();
            if (!_this._sourceElement || _this._sourceElement !== ev.target) {
                _this._sourceElement = (/** @type {?} */ (ev.target));
                _this._initialScrollTop = _this._sourceElement.scrollTop;
                _this._initialScrollLeft = _this._sourceElement.scrollLeft;
            }
            _this._sourceElement.scrollTop = _this._initialScrollTop;
            _this._sourceElement.scrollLeft = _this._initialScrollLeft;
        };
        return _this;
    }
    /** @inheritdoc */
    /**
     * \@inheritdoc
     * @param {?} document
     * @param {?} overlayService
     * @param {?} id
     * @return {?}
     */
    BlockScrollStrategy.prototype.initialize = /**
     * \@inheritdoc
     * @param {?} document
     * @param {?} overlayService
     * @param {?} id
     * @return {?}
     */
    function (document, overlayService, id) {
        if (this._initialized) {
            return;
        }
        this._document = document;
        this._initialized = true;
    };
    /** @inheritdoc */
    /**
     * \@inheritdoc
     * @return {?}
     */
    BlockScrollStrategy.prototype.attach = /**
     * \@inheritdoc
     * @return {?}
     */
    function () {
        this._document.addEventListener('scroll', this.onScroll, true);
    };
    /** @inheritdoc */
    /**
     * \@inheritdoc
     * @return {?}
     */
    BlockScrollStrategy.prototype.detach = /**
     * \@inheritdoc
     * @return {?}
     */
    function () {
        this._document.removeEventListener('scroll', this.onScroll, true);
        this._sourceElement = null;
        this._initialScrollTop = 0;
        this._initialScrollLeft = 0;
        this._initialized = false;
    };
    return BlockScrollStrategy;
}(ScrollStrategy));
/**
 * Prevents scrolling while the overlay content is shown.
 */
export { BlockScrollStrategy };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BlockScrollStrategy.prototype._initialized;
    /**
     * @type {?}
     * @private
     */
    BlockScrollStrategy.prototype._document;
    /**
     * @type {?}
     * @private
     */
    BlockScrollStrategy.prototype._initialScrollTop;
    /**
     * @type {?}
     * @private
     */
    BlockScrollStrategy.prototype._initialScrollLeft;
    /**
     * @type {?}
     * @private
     */
    BlockScrollStrategy.prototype._sourceElement;
    /**
     * @type {?}
     * @private
     */
    BlockScrollStrategy.prototype.onScroll;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stc2Nyb2xsLXN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vaWduaXRldWktYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9vdmVybGF5L3Njcm9sbC9ibG9jay1zY3JvbGwtc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFLbkQ7Ozs7SUFBeUMsK0NBQWM7SUFPbkQsNkJBQVksZUFBNkI7UUFBekMsWUFDSSxrQkFBTSxlQUFlLENBQUMsU0FDekI7UUFSTyxrQkFBWSxHQUFHLEtBQUssQ0FBQztRQWtDckIsY0FBUSxHQUFHLFVBQUMsRUFBUztZQUN6QixFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLEtBQUksQ0FBQyxjQUFjLElBQUksS0FBSSxDQUFDLGNBQWMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFO2dCQUMzRCxLQUFJLENBQUMsY0FBYyxHQUFHLG1CQUFBLEVBQUUsQ0FBQyxNQUFNLEVBQVcsQ0FBQztnQkFDM0MsS0FBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDO2dCQUN2RCxLQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7YUFDNUQ7WUFFRCxLQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsR0FBRyxLQUFJLENBQUMsaUJBQWlCLENBQUM7WUFDdkQsS0FBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsS0FBSSxDQUFDLGtCQUFrQixDQUFDO1FBQzdELENBQUMsQ0FBQTs7SUFwQ0QsQ0FBQztJQUVELGtCQUFrQjs7Ozs7Ozs7SUFDWCx3Q0FBVTs7Ozs7OztJQUFqQixVQUFrQixRQUFrQixFQUFFLGNBQWlDLEVBQUUsRUFBVTtRQUMvRSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkIsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDMUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUVELGtCQUFrQjs7Ozs7SUFDWCxvQ0FBTTs7OztJQUFiO1FBQ0ksSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsa0JBQWtCOzs7OztJQUNYLG9DQUFNOzs7O0lBQWI7UUFDSSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBYUwsMEJBQUM7QUFBRCxDQUFDLEFBOUNELENBQXlDLGNBQWMsR0E4Q3REOzs7Ozs7Ozs7O0lBN0NHLDJDQUE2Qjs7Ozs7SUFDN0Isd0NBQTRCOzs7OztJQUM1QixnREFBa0M7Ozs7O0lBQ2xDLGlEQUFtQzs7Ozs7SUFDbkMsNkNBQWdDOzs7OztJQThCaEMsdUNBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZ3hPdmVybGF5U2VydmljZSB9IGZyb20gJy4uL292ZXJsYXknO1xuaW1wb3J0IHsgU2Nyb2xsU3RyYXRlZ3kgfSBmcm9tICcuL3Njcm9sbC1zdHJhdGVneSc7XG5cbi8qKlxuICogUHJldmVudHMgc2Nyb2xsaW5nIHdoaWxlIHRoZSBvdmVybGF5IGNvbnRlbnQgaXMgc2hvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBCbG9ja1Njcm9sbFN0cmF0ZWd5IGV4dGVuZHMgU2Nyb2xsU3RyYXRlZ3kge1xuICAgIHByaXZhdGUgX2luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfZG9jdW1lbnQ6IERvY3VtZW50O1xuICAgIHByaXZhdGUgX2luaXRpYWxTY3JvbGxUb3A6IG51bWJlcjtcbiAgICBwcml2YXRlIF9pbml0aWFsU2Nyb2xsTGVmdDogbnVtYmVyO1xuICAgIHByaXZhdGUgX3NvdXJjZUVsZW1lbnQ6IEVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihzY3JvbGxDb250YWluZXI/OiBIVE1MRWxlbWVudCkge1xuICAgICAgICBzdXBlcihzY3JvbGxDb250YWluZXIpO1xuICAgIH1cblxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgIHB1YmxpYyBpbml0aWFsaXplKGRvY3VtZW50OiBEb2N1bWVudCwgb3ZlcmxheVNlcnZpY2U6IElneE92ZXJsYXlTZXJ2aWNlLCBpZDogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgIHB1YmxpYyBhdHRhY2goKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgIHB1YmxpYyBkZXRhY2goKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2RvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwsIHRydWUpO1xuICAgICAgICB0aGlzLl9zb3VyY2VFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5faW5pdGlhbFNjcm9sbFRvcCA9IDA7XG4gICAgICAgIHRoaXMuX2luaXRpYWxTY3JvbGxMZWZ0ID0gMDtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uU2Nyb2xsID0gKGV2OiBFdmVudCkgPT4ge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoIXRoaXMuX3NvdXJjZUVsZW1lbnQgfHwgdGhpcy5fc291cmNlRWxlbWVudCAhPT0gZXYudGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLl9zb3VyY2VFbGVtZW50ID0gZXYudGFyZ2V0IGFzIEVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsU2Nyb2xsVG9wID0gdGhpcy5fc291cmNlRWxlbWVudC5zY3JvbGxUb3A7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsU2Nyb2xsTGVmdCA9IHRoaXMuX3NvdXJjZUVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NvdXJjZUVsZW1lbnQuc2Nyb2xsVG9wID0gdGhpcy5faW5pdGlhbFNjcm9sbFRvcDtcbiAgICAgICAgdGhpcy5fc291cmNlRWxlbWVudC5zY3JvbGxMZWZ0ID0gdGhpcy5faW5pdGlhbFNjcm9sbExlZnQ7XG4gICAgfVxufVxuIl19