/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import * as JSZip from 'jszip/dist/jszip';
import { EventEmitter, Injectable, Output } from '@angular/core';
import { ExcelElementsFactory } from './excel-elements-factory';
import { ExcelFolderTypes } from './excel-enums';
import { IgxBaseExporter } from '../exporter-common/base-export-service';
import { ExportUtilities } from '../exporter-common/export-utilities';
import { WorksheetData } from './worksheet-data';
/**
 * @record
 */
export function IExcelExportEndedEventArgs() { }
if (false) {
    /** @type {?} */
    IExcelExportEndedEventArgs.prototype.xlsx;
}
/**
 * **Ignite UI for Angular Excel Exporter Service** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)
 *
 * The Ignite UI for Angular Excel Exporter service can export data in Microsoft® Excel® format from both raw data
 * (array) or from an `IgxGrid`.
 *
 * Example:
 * ```typescript
 * public localData = [
 *   { Name: "Eric Ridley", Age: "26" },
 *   { Name: "Alanis Brook", Age: "22" },
 *   { Name: "Jonathan Morris", Age: "23" }
 * ];
 *
 * constructor(private excelExportService: IgxExcelExporterService) {
 * }
 *
 * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions("FileName"));
 * ```
 */
var IgxExcelExporterService = /** @class */ (function (_super) {
    tslib_1.__extends(IgxExcelExporterService, _super);
    function IgxExcelExporterService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * This event is emitted when the export process finishes.
         * ```typescript
         * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {
         * // put event handler code here
         * });
         * ```
         * \@memberof IgxExcelExporterService
         */
        _this.onExportEnded = new EventEmitter();
        return _this;
    }
    /**
     * @private
     * @param {?} folder
     * @param {?} zip
     * @param {?} worksheetData
     * @return {?}
     */
    IgxExcelExporterService.populateFolder = /**
     * @private
     * @param {?} folder
     * @param {?} zip
     * @param {?} worksheetData
     * @return {?}
     */
    function (folder, zip, worksheetData) {
        var e_1, _a, e_2, _b;
        try {
            for (var _c = tslib_1.__values(folder.childFolders(worksheetData)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var childFolder = _d.value;
                /** @type {?} */
                var folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);
                /** @type {?} */
                var zipFolder = zip.folder(folderIntance.folderName);
                IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _e = tslib_1.__values(folder.childFiles(worksheetData)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var childFile = _f.value;
                /** @type {?} */
                var fileInstance = ExcelElementsFactory.getExcelFile(childFile);
                fileInstance.writeElement(zip, worksheetData);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * @protected
     * @param {?} data
     * @param {?} options
     * @return {?}
     */
    IgxExcelExporterService.prototype.exportDataImplementation = /**
     * @protected
     * @param {?} data
     * @param {?} options
     * @return {?}
     */
    function (data, options) {
        var _this = this;
        if (this._isTreeGrid) {
            /** @type {?} */
            var maxLevel_1 = 0;
            data.forEach(function (r) {
                maxLevel_1 = Math.max(maxLevel_1, r.originalRowData.level);
            });
            if (maxLevel_1 > 7) {
                throw Error('Can create an outline of up to eight levels!');
            }
        }
        /** @type {?} */
        var worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);
        this._xlsx = new JSZip();
        /** @type {?} */
        var rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);
        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);
        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then(function (result) {
            _this.saveFile(result, options.fileName);
            _this.onExportEnded.emit({ xlsx: _this._xlsx });
        });
    };
    /**
     * @private
     * @param {?} data
     * @param {?} fileName
     * @return {?}
     */
    IgxExcelExporterService.prototype.saveFile = /**
     * @private
     * @param {?} data
     * @param {?} fileName
     * @return {?}
     */
    function (data, fileName) {
        /** @type {?} */
        var blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {
            type: ''
        });
        ExportUtilities.saveBlobToFile(blob, fileName);
    };
    IgxExcelExporterService.ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };
    IgxExcelExporterService.decorators = [
        { type: Injectable }
    ];
    IgxExcelExporterService.propDecorators = {
        onExportEnded: [{ type: Output }]
    };
    return IgxExcelExporterService;
}(IgxBaseExporter));
export { IgxExcelExporterService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IgxExcelExporterService.ZIP_OPTIONS;
    /**
     * @type {?}
     * @private
     */
    IgxExcelExporterService.prototype._xlsx;
    /**
     * This event is emitted when the export process finishes.
     * ```typescript
     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {
     * // put event handler code here
     * });
     * ```
     * \@memberof IgxExcelExporterService
     * @type {?}
     */
    IgxExcelExporterService.prototype.onExportEnded;
}
//# sourceMappingURL=data:application/json;base64,